{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/babel-polyfill/lib/index.js","node_modules/core-js/fn/regexp/escape.js","node_modules/core-js/modules/_a-function.js","node_modules/core-js/modules/_a-number-value.js","node_modules/core-js/modules/_add-to-unscopables.js","node_modules/core-js/modules/_an-instance.js","node_modules/core-js/modules/_an-object.js","node_modules/core-js/modules/_array-copy-within.js","node_modules/core-js/modules/_array-fill.js","node_modules/core-js/modules/_array-from-iterable.js","node_modules/core-js/modules/_array-includes.js","node_modules/core-js/modules/_array-methods.js","node_modules/core-js/modules/_array-reduce.js","node_modules/core-js/modules/_array-species-constructor.js","node_modules/core-js/modules/_array-species-create.js","node_modules/core-js/modules/_bind.js","node_modules/core-js/modules/_classof.js","node_modules/core-js/modules/_cof.js","node_modules/core-js/modules/_collection-strong.js","node_modules/core-js/modules/_collection-to-json.js","node_modules/core-js/modules/_collection-weak.js","node_modules/core-js/modules/_collection.js","node_modules/core-js/modules/_core.js","node_modules/core-js/modules/_create-property.js","node_modules/core-js/modules/_ctx.js","node_modules/core-js/modules/_date-to-primitive.js","node_modules/core-js/modules/_defined.js","node_modules/core-js/modules/_descriptors.js","node_modules/core-js/modules/_dom-create.js","node_modules/core-js/modules/_enum-bug-keys.js","node_modules/core-js/modules/_enum-keys.js","node_modules/core-js/modules/_export.js","node_modules/core-js/modules/_fails-is-regexp.js","node_modules/core-js/modules/_fails.js","node_modules/core-js/modules/_fix-re-wks.js","node_modules/core-js/modules/_flags.js","node_modules/core-js/modules/_for-of.js","node_modules/core-js/modules/_global.js","node_modules/core-js/modules/_has.js","node_modules/core-js/modules/_hide.js","node_modules/core-js/modules/_html.js","node_modules/core-js/modules/_ie8-dom-define.js","node_modules/core-js/modules/_inherit-if-required.js","node_modules/core-js/modules/_invoke.js","node_modules/core-js/modules/_iobject.js","node_modules/core-js/modules/_is-array-iter.js","node_modules/core-js/modules/_is-array.js","node_modules/core-js/modules/_is-integer.js","node_modules/core-js/modules/_is-object.js","node_modules/core-js/modules/_is-regexp.js","node_modules/core-js/modules/_iter-call.js","node_modules/core-js/modules/_iter-create.js","node_modules/core-js/modules/_iter-define.js","node_modules/core-js/modules/_iter-detect.js","node_modules/core-js/modules/_iter-step.js","node_modules/core-js/modules/_iterators.js","node_modules/core-js/modules/_keyof.js","node_modules/core-js/modules/_library.js","node_modules/core-js/modules/_math-expm1.js","node_modules/core-js/modules/_math-log1p.js","node_modules/core-js/modules/_math-sign.js","node_modules/core-js/modules/_meta.js","node_modules/core-js/modules/_metadata.js","node_modules/core-js/modules/_microtask.js","node_modules/core-js/modules/_object-assign.js","node_modules/core-js/modules/_object-create.js","node_modules/core-js/modules/_object-dp.js","node_modules/core-js/modules/_object-dps.js","node_modules/core-js/modules/_object-forced-pam.js","node_modules/core-js/modules/_object-gopd.js","node_modules/core-js/modules/_object-gopn-ext.js","node_modules/core-js/modules/_object-gopn.js","node_modules/core-js/modules/_object-gops.js","node_modules/core-js/modules/_object-gpo.js","node_modules/core-js/modules/_object-keys-internal.js","node_modules/core-js/modules/_object-keys.js","node_modules/core-js/modules/_object-pie.js","node_modules/core-js/modules/_object-sap.js","node_modules/core-js/modules/_object-to-array.js","node_modules/core-js/modules/_own-keys.js","node_modules/core-js/modules/_parse-float.js","node_modules/core-js/modules/_parse-int.js","node_modules/core-js/modules/_partial.js","node_modules/core-js/modules/_path.js","node_modules/core-js/modules/_property-desc.js","node_modules/core-js/modules/_redefine-all.js","node_modules/core-js/modules/_redefine.js","node_modules/core-js/modules/_replacer.js","node_modules/core-js/modules/_same-value.js","node_modules/core-js/modules/_set-proto.js","node_modules/core-js/modules/_set-species.js","node_modules/core-js/modules/_set-to-string-tag.js","node_modules/core-js/modules/_shared-key.js","node_modules/core-js/modules/_shared.js","node_modules/core-js/modules/_species-constructor.js","node_modules/core-js/modules/_strict-method.js","node_modules/core-js/modules/_string-at.js","node_modules/core-js/modules/_string-context.js","node_modules/core-js/modules/_string-html.js","node_modules/core-js/modules/_string-pad.js","node_modules/core-js/modules/_string-repeat.js","node_modules/core-js/modules/_string-trim.js","node_modules/core-js/modules/_string-ws.js","node_modules/core-js/modules/_task.js","node_modules/core-js/modules/_to-index.js","node_modules/core-js/modules/_to-integer.js","node_modules/core-js/modules/_to-iobject.js","node_modules/core-js/modules/_to-length.js","node_modules/core-js/modules/_to-object.js","node_modules/core-js/modules/_to-primitive.js","node_modules/core-js/modules/_typed-array.js","node_modules/core-js/modules/_typed-buffer.js","node_modules/core-js/modules/_typed.js","node_modules/core-js/modules/_uid.js","node_modules/core-js/modules/_wks-define.js","node_modules/core-js/modules/_wks-ext.js","node_modules/core-js/modules/_wks.js","node_modules/core-js/modules/core.get-iterator-method.js","node_modules/core-js/modules/core.regexp.escape.js","node_modules/core-js/modules/es6.array.copy-within.js","node_modules/core-js/modules/es6.array.every.js","node_modules/core-js/modules/es6.array.fill.js","node_modules/core-js/modules/es6.array.filter.js","node_modules/core-js/modules/es6.array.find-index.js","node_modules/core-js/modules/es6.array.find.js","node_modules/core-js/modules/es6.array.for-each.js","node_modules/core-js/modules/es6.array.from.js","node_modules/core-js/modules/es6.array.index-of.js","node_modules/core-js/modules/es6.array.is-array.js","node_modules/core-js/modules/es6.array.iterator.js","node_modules/core-js/modules/es6.array.join.js","node_modules/core-js/modules/es6.array.last-index-of.js","node_modules/core-js/modules/es6.array.map.js","node_modules/core-js/modules/es6.array.of.js","node_modules/core-js/modules/es6.array.reduce-right.js","node_modules/core-js/modules/es6.array.reduce.js","node_modules/core-js/modules/es6.array.slice.js","node_modules/core-js/modules/es6.array.some.js","node_modules/core-js/modules/es6.array.sort.js","node_modules/core-js/modules/es6.array.species.js","node_modules/core-js/modules/es6.date.now.js","node_modules/core-js/modules/es6.date.to-iso-string.js","node_modules/core-js/modules/es6.date.to-json.js","node_modules/core-js/modules/es6.date.to-primitive.js","node_modules/core-js/modules/es6.date.to-string.js","node_modules/core-js/modules/es6.function.bind.js","node_modules/core-js/modules/es6.function.has-instance.js","node_modules/core-js/modules/es6.function.name.js","node_modules/core-js/modules/es6.map.js","node_modules/core-js/modules/es6.math.acosh.js","node_modules/core-js/modules/es6.math.asinh.js","node_modules/core-js/modules/es6.math.atanh.js","node_modules/core-js/modules/es6.math.cbrt.js","node_modules/core-js/modules/es6.math.clz32.js","node_modules/core-js/modules/es6.math.cosh.js","node_modules/core-js/modules/es6.math.expm1.js","node_modules/core-js/modules/es6.math.fround.js","node_modules/core-js/modules/es6.math.hypot.js","node_modules/core-js/modules/es6.math.imul.js","node_modules/core-js/modules/es6.math.log10.js","node_modules/core-js/modules/es6.math.log1p.js","node_modules/core-js/modules/es6.math.log2.js","node_modules/core-js/modules/es6.math.sign.js","node_modules/core-js/modules/es6.math.sinh.js","node_modules/core-js/modules/es6.math.tanh.js","node_modules/core-js/modules/es6.math.trunc.js","node_modules/core-js/modules/es6.number.constructor.js","node_modules/core-js/modules/es6.number.epsilon.js","node_modules/core-js/modules/es6.number.is-finite.js","node_modules/core-js/modules/es6.number.is-integer.js","node_modules/core-js/modules/es6.number.is-nan.js","node_modules/core-js/modules/es6.number.is-safe-integer.js","node_modules/core-js/modules/es6.number.max-safe-integer.js","node_modules/core-js/modules/es6.number.min-safe-integer.js","node_modules/core-js/modules/es6.number.parse-float.js","node_modules/core-js/modules/es6.number.parse-int.js","node_modules/core-js/modules/es6.number.to-fixed.js","node_modules/core-js/modules/es6.number.to-precision.js","node_modules/core-js/modules/es6.object.assign.js","node_modules/core-js/modules/es6.object.create.js","node_modules/core-js/modules/es6.object.define-properties.js","node_modules/core-js/modules/es6.object.define-property.js","node_modules/core-js/modules/es6.object.freeze.js","node_modules/core-js/modules/es6.object.get-own-property-descriptor.js","node_modules/core-js/modules/es6.object.get-own-property-names.js","node_modules/core-js/modules/es6.object.get-prototype-of.js","node_modules/core-js/modules/es6.object.is-extensible.js","node_modules/core-js/modules/es6.object.is-frozen.js","node_modules/core-js/modules/es6.object.is-sealed.js","node_modules/core-js/modules/es6.object.is.js","node_modules/core-js/modules/es6.object.keys.js","node_modules/core-js/modules/es6.object.prevent-extensions.js","node_modules/core-js/modules/es6.object.seal.js","node_modules/core-js/modules/es6.object.set-prototype-of.js","node_modules/core-js/modules/es6.object.to-string.js","node_modules/core-js/modules/es6.parse-float.js","node_modules/core-js/modules/es6.parse-int.js","node_modules/core-js/modules/es6.promise.js","node_modules/core-js/modules/es6.reflect.apply.js","node_modules/core-js/modules/es6.reflect.construct.js","node_modules/core-js/modules/es6.reflect.define-property.js","node_modules/core-js/modules/es6.reflect.delete-property.js","node_modules/core-js/modules/es6.reflect.enumerate.js","node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js","node_modules/core-js/modules/es6.reflect.get-prototype-of.js","node_modules/core-js/modules/es6.reflect.get.js","node_modules/core-js/modules/es6.reflect.has.js","node_modules/core-js/modules/es6.reflect.is-extensible.js","node_modules/core-js/modules/es6.reflect.own-keys.js","node_modules/core-js/modules/es6.reflect.prevent-extensions.js","node_modules/core-js/modules/es6.reflect.set-prototype-of.js","node_modules/core-js/modules/es6.reflect.set.js","node_modules/core-js/modules/es6.regexp.constructor.js","node_modules/core-js/modules/es6.regexp.flags.js","node_modules/core-js/modules/es6.regexp.match.js","node_modules/core-js/modules/es6.regexp.replace.js","node_modules/core-js/modules/es6.regexp.search.js","node_modules/core-js/modules/es6.regexp.split.js","node_modules/core-js/modules/es6.regexp.to-string.js","node_modules/core-js/modules/es6.set.js","node_modules/core-js/modules/es6.string.anchor.js","node_modules/core-js/modules/es6.string.big.js","node_modules/core-js/modules/es6.string.blink.js","node_modules/core-js/modules/es6.string.bold.js","node_modules/core-js/modules/es6.string.code-point-at.js","node_modules/core-js/modules/es6.string.ends-with.js","node_modules/core-js/modules/es6.string.fixed.js","node_modules/core-js/modules/es6.string.fontcolor.js","node_modules/core-js/modules/es6.string.fontsize.js","node_modules/core-js/modules/es6.string.from-code-point.js","node_modules/core-js/modules/es6.string.includes.js","node_modules/core-js/modules/es6.string.italics.js","node_modules/core-js/modules/es6.string.iterator.js","node_modules/core-js/modules/es6.string.link.js","node_modules/core-js/modules/es6.string.raw.js","node_modules/core-js/modules/es6.string.repeat.js","node_modules/core-js/modules/es6.string.small.js","node_modules/core-js/modules/es6.string.starts-with.js","node_modules/core-js/modules/es6.string.strike.js","node_modules/core-js/modules/es6.string.sub.js","node_modules/core-js/modules/es6.string.sup.js","node_modules/core-js/modules/es6.string.trim.js","node_modules/core-js/modules/es6.symbol.js","node_modules/core-js/modules/es6.typed.array-buffer.js","node_modules/core-js/modules/es6.typed.data-view.js","node_modules/core-js/modules/es6.typed.float32-array.js","node_modules/core-js/modules/es6.typed.float64-array.js","node_modules/core-js/modules/es6.typed.int16-array.js","node_modules/core-js/modules/es6.typed.int32-array.js","node_modules/core-js/modules/es6.typed.int8-array.js","node_modules/core-js/modules/es6.typed.uint16-array.js","node_modules/core-js/modules/es6.typed.uint32-array.js","node_modules/core-js/modules/es6.typed.uint8-array.js","node_modules/core-js/modules/es6.typed.uint8-clamped-array.js","node_modules/core-js/modules/es6.weak-map.js","node_modules/core-js/modules/es6.weak-set.js","node_modules/core-js/modules/es7.array.includes.js","node_modules/core-js/modules/es7.asap.js","node_modules/core-js/modules/es7.error.is-error.js","node_modules/core-js/modules/es7.map.to-json.js","node_modules/core-js/modules/es7.math.iaddh.js","node_modules/core-js/modules/es7.math.imulh.js","node_modules/core-js/modules/es7.math.isubh.js","node_modules/core-js/modules/es7.math.umulh.js","node_modules/core-js/modules/es7.object.define-getter.js","node_modules/core-js/modules/es7.object.define-setter.js","node_modules/core-js/modules/es7.object.entries.js","node_modules/core-js/modules/es7.object.get-own-property-descriptors.js","node_modules/core-js/modules/es7.object.lookup-getter.js","node_modules/core-js/modules/es7.object.lookup-setter.js","node_modules/core-js/modules/es7.object.values.js","node_modules/core-js/modules/es7.observable.js","node_modules/core-js/modules/es7.reflect.define-metadata.js","node_modules/core-js/modules/es7.reflect.delete-metadata.js","node_modules/core-js/modules/es7.reflect.get-metadata-keys.js","node_modules/core-js/modules/es7.reflect.get-metadata.js","node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js","node_modules/core-js/modules/es7.reflect.get-own-metadata.js","node_modules/core-js/modules/es7.reflect.has-metadata.js","node_modules/core-js/modules/es7.reflect.has-own-metadata.js","node_modules/core-js/modules/es7.reflect.metadata.js","node_modules/core-js/modules/es7.set.to-json.js","node_modules/core-js/modules/es7.string.at.js","node_modules/core-js/modules/es7.string.match-all.js","node_modules/core-js/modules/es7.string.pad-end.js","node_modules/core-js/modules/es7.string.pad-start.js","node_modules/core-js/modules/es7.string.trim-left.js","node_modules/core-js/modules/es7.string.trim-right.js","node_modules/core-js/modules/es7.symbol.async-iterator.js","node_modules/core-js/modules/es7.symbol.observable.js","node_modules/core-js/modules/es7.system.global.js","node_modules/core-js/modules/web.dom.iterable.js","node_modules/core-js/modules/web.immediate.js","node_modules/core-js/modules/web.timers.js","node_modules/core-js/shim.js","node_modules/regenerator-runtime/runtime.js","node_modules/tricks/array/diff.js","node_modules/tricks/array/find.js","node_modules/tricks/array/toArray.js","node_modules/tricks/array/unique.js","node_modules/tricks/browser/agent/Storage.js","node_modules/tricks/browser/agent/cookieStorage.js","node_modules/tricks/browser/agent/localStorage.js","node_modules/tricks/browser/agent/sessionStorage.js","node_modules/tricks/browser/http/formpost.js","node_modules/tricks/browser/http/getScript.js","node_modules/tricks/browser/http/jsonp.js","node_modules/tricks/browser/http/request.js","node_modules/tricks/browser/http/xhr.js","node_modules/tricks/dom/append.js","node_modules/tricks/dom/attr.js","node_modules/tricks/dom/createElement.js","node_modules/tricks/dom/domInstance.js","node_modules/tricks/dom/each.js","node_modules/tricks/dom/hiddenFrame.js","node_modules/tricks/dom/isDom.js","node_modules/tricks/events/createEvent.js","node_modules/tricks/events/emit.js","node_modules/tricks/events/globalCallback.js","node_modules/tricks/events/on.js","node_modules/tricks/object/args.js","node_modules/tricks/object/clone.js","node_modules/tricks/object/diffKey.js","node_modules/tricks/object/extend.js","node_modules/tricks/object/hasBinary.js","node_modules/tricks/object/instanceOf.js","node_modules/tricks/object/isBinary.js","node_modules/tricks/object/isEmpty.js","node_modules/tricks/object/merge.js","node_modules/tricks/object/pubsub.js","node_modules/tricks/object/rewire.js","node_modules/tricks/object/toBlob.js","node_modules/tricks/object/tryCatch.js","node_modules/tricks/string/createUrl.js","node_modules/tricks/string/extract.js","node_modules/tricks/string/jsonParse.js","node_modules/tricks/string/param.js","node_modules/tricks/string/queryparse.js","node_modules/tricks/string/querystringify.js","node_modules/tricks/string/random.js","node_modules/tricks/support/cors.js","node_modules/tricks/time/setImmediate.js","node_modules/tricks/window/close.js","node_modules/tricks/window/popup.js","node_modules/tricks/window/url.js","src/hello.all.js","src/hello.chromeapp.js","src/hello.js","src/hello.phonegap.js","src/modules/dropbox.js","src/modules/facebook.js","src/modules/flickr.js","src/modules/foursquare.js","src/modules/github.js","src/modules/google.js","src/modules/instagram.js","src/modules/joinme.js","src/modules/linkedin.js","src/modules/soundcloud.js","src/modules/twitter.js","src/modules/vk.js","src/modules/windows.js","src/modules/yahoo.js"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC3BA;AACA;;ACDA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;;ACAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;;ACFA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChdhRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;;ACAA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;;ACHA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjtMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;;ACAA;;ACAA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","file":"hello.all.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\n\nrequire(\"core-js/shim\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nrequire(\"core-js/fn/regexp/escape\");\n\nif (global._babelPolyfill) {\n  throw new Error(\"only one instance of babel-polyfill is allowed\");\n}\nglobal._babelPolyfill = true;\n\nvar DEFINE_PROPERTY = \"defineProperty\";\nfunction define(O, key, value) {\n  O[key] || Object[DEFINE_PROPERTY](O, key, {\n    writable: true,\n    configurable: true,\n    value: value\n  });\n}\n\ndefine(String.prototype, \"padLeft\", \"\".padStart);\ndefine(String.prototype, \"padRight\", \"\".padEnd);\n\n\"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill\".split(\",\").forEach(function (key) {\n  [][key] && define(Array, key, Function.call.bind([][key]));\n});","require(119);\nmodule.exports = require(23).RegExp.escape;","module.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};","var cof = require(18);\nmodule.exports = function(it, msg){\n  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);\n  return +it;\n};","// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require(117)('unscopables')\n  , ArrayProto  = Array.prototype;\nif(ArrayProto[UNSCOPABLES] == undefined)require(40)(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function(key){\n  ArrayProto[UNSCOPABLES][key] = true;\n};","module.exports = function(it, Constructor, name, forbiddenField){\n  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};","var isObject = require(49);\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n'use strict';\nvar toObject = require(109)\n  , toIndex  = require(105)\n  , toLength = require(108);\n\nmodule.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){\n  var O     = toObject(this)\n    , len   = toLength(O.length)\n    , to    = toIndex(target, len)\n    , from  = toIndex(start, len)\n    , end   = arguments.length > 2 ? arguments[2] : undefined\n    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)\n    , inc   = 1;\n  if(from < to && to < from + count){\n    inc  = -1;\n    from += count - 1;\n    to   += count - 1;\n  }\n  while(count-- > 0){\n    if(from in O)O[to] = O[from];\n    else delete O[to];\n    to   += inc;\n    from += inc;\n  } return O;\n};","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require(109)\n  , toIndex  = require(105)\n  , toLength = require(108);\nmodule.exports = function fill(value /*, start = 0, end = @length */){\n  var O      = toObject(this)\n    , length = toLength(O.length)\n    , aLen   = arguments.length\n    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)\n    , end    = aLen > 2 ? arguments[2] : undefined\n    , endPos = end === undefined ? length : toIndex(end, length);\n  while(endPos > index)O[index++] = value;\n  return O;\n};","var forOf = require(37);\n\nmodule.exports = function(iter, ITERATOR){\n  var result = [];\n  forOf(iter, false, result.push, result, ITERATOR);\n  return result;\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require(107)\n  , toLength  = require(108)\n  , toIndex   = require(105);\nmodule.exports = function(IS_INCLUDES){\n  return function($this, el, fromIndex){\n    var O      = toIObject($this)\n      , length = toLength(O.length)\n      , index  = toIndex(fromIndex, length)\n      , value;\n    // Array#includes uses SameValueZero equality algorithm\n    if(IS_INCLUDES && el != el)while(length > index){\n      value = O[index++];\n      if(value != value)return true;\n    // Array#toIndex ignores holes, Array#includes - not\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\n      if(O[index] === el)return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx      = require(25)\n  , IObject  = require(45)\n  , toObject = require(109)\n  , toLength = require(108)\n  , asc      = require(15);\nmodule.exports = function(TYPE, $create){\n  var IS_MAP        = TYPE == 1\n    , IS_FILTER     = TYPE == 2\n    , IS_SOME       = TYPE == 3\n    , IS_EVERY      = TYPE == 4\n    , IS_FIND_INDEX = TYPE == 6\n    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX\n    , create        = $create || asc;\n  return function($this, callbackfn, that){\n    var O      = toObject($this)\n      , self   = IObject(O)\n      , f      = ctx(callbackfn, that, 3)\n      , length = toLength(self.length)\n      , index  = 0\n      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined\n      , val, res;\n    for(;length > index; index++)if(NO_HOLES || index in self){\n      val = self[index];\n      res = f(val, index, O);\n      if(TYPE){\n        if(IS_MAP)result[index] = res;            // map\n        else if(res)switch(TYPE){\n          case 3: return true;                    // some\n          case 5: return val;                     // find\n          case 6: return index;                   // findIndex\n          case 2: result.push(val);               // filter\n        } else if(IS_EVERY)return false;          // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};","var aFunction = require(3)\n  , toObject  = require(109)\n  , IObject   = require(45)\n  , toLength  = require(108);\n\nmodule.exports = function(that, callbackfn, aLen, memo, isRight){\n  aFunction(callbackfn);\n  var O      = toObject(that)\n    , self   = IObject(O)\n    , length = toLength(O.length)\n    , index  = isRight ? length - 1 : 0\n    , i      = isRight ? -1 : 1;\n  if(aLen < 2)for(;;){\n    if(index in self){\n      memo = self[index];\n      index += i;\n      break;\n    }\n    index += i;\n    if(isRight ? index < 0 : length <= index){\n      throw TypeError('Reduce of empty array with no initial value');\n    }\n  }\n  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){\n    memo = callbackfn(memo, self[index], index, O);\n  }\n  return memo;\n};","var isObject = require(49)\n  , isArray  = require(47)\n  , SPECIES  = require(117)('species');\n\nmodule.exports = function(original){\n  var C;\n  if(isArray(original)){\n    C = original.constructor;\n    // cross-realm fallback\n    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;\n    if(isObject(C)){\n      C = C[SPECIES];\n      if(C === null)C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require(14);\n\nmodule.exports = function(original, length){\n  return new (speciesConstructor(original))(length);\n};","'use strict';\nvar aFunction  = require(3)\n  , isObject   = require(49)\n  , invoke     = require(44)\n  , arraySlice = [].slice\n  , factories  = {};\n\nvar construct = function(F, len, args){\n  if(!(len in factories)){\n    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';\n    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n  } return factories[len](F, args);\n};\n\nmodule.exports = Function.bind || function bind(that /*, args... */){\n  var fn       = aFunction(this)\n    , partArgs = arraySlice.call(arguments, 1);\n  var bound = function(/* args... */){\n    var args = partArgs.concat(arraySlice.call(arguments));\n    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n  };\n  if(isObject(fn.prototype))bound.prototype = fn.prototype;\n  return bound;\n};","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require(18)\n  , TAG = require(117)('toStringTag')\n  // ES3 wrong here\n  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function(it, key){\n  try {\n    return it[key];\n  } catch(e){ /* empty */ }\n};\n\nmodule.exports = function(it){\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};","var toString = {}.toString;\n\nmodule.exports = function(it){\n  return toString.call(it).slice(8, -1);\n};","'use strict';\nvar dP          = require(67).f\n  , create      = require(66)\n  , redefineAll = require(86)\n  , ctx         = require(25)\n  , anInstance  = require(6)\n  , defined     = require(27)\n  , forOf       = require(37)\n  , $iterDefine = require(53)\n  , step        = require(55)\n  , setSpecies  = require(91)\n  , DESCRIPTORS = require(28)\n  , fastKey     = require(62).fastKey\n  , SIZE        = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function(that, key){\n  // fast case\n  var index = fastKey(key), entry;\n  if(index !== 'F')return that._i[index];\n  // frozen object case\n  for(entry = that._f; entry; entry = entry.n){\n    if(entry.k == key)return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){\n    var C = wrapper(function(that, iterable){\n      anInstance(that, C, NAME, '_i');\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear(){\n        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){\n          entry.r = true;\n          if(entry.p)entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function(key){\n        var that  = this\n          , entry = getEntry(that, key);\n        if(entry){\n          var next = entry.n\n            , prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if(prev)prev.n = next;\n          if(next)next.p = prev;\n          if(that._f == entry)that._f = next;\n          if(that._l == entry)that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /*, that = undefined */){\n        anInstance(this, C, 'forEach');\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)\n          , entry;\n        while(entry = entry ? entry.n : this._f){\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while(entry && entry.r)entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key){\n        return !!getEntry(this, key);\n      }\n    });\n    if(DESCRIPTORS)dP(C.prototype, 'size', {\n      get: function(){\n        return defined(this[SIZE]);\n      }\n    });\n    return C;\n  },\n  def: function(that, key, value){\n    var entry = getEntry(that, key)\n      , prev, index;\n    // change existing entry\n    if(entry){\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if(!that._f)that._f = entry;\n      if(prev)prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if(index !== 'F')that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function(C, NAME, IS_MAP){\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function(iterated, kind){\n      this._t = iterated;  // target\n      this._k = kind;      // kind\n      this._l = undefined; // previous\n    }, function(){\n      var that  = this\n        , kind  = that._k\n        , entry = that._l;\n      // revert to the last existing entry\n      while(entry && entry.r)entry = entry.p;\n      // get next entry\n      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if(kind == 'keys'  )return step(0, entry.k);\n      if(kind == 'values')return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar classof = require(17)\n  , from    = require(10);\nmodule.exports = function(NAME){\n  return function toJSON(){\n    if(classof(this) != NAME)throw TypeError(NAME + \"#toJSON isn't generic\");\n    return from(this);\n  };\n};","'use strict';\nvar redefineAll       = require(86)\n  , getWeak           = require(62).getWeak\n  , anObject          = require(7)\n  , isObject          = require(49)\n  , anInstance        = require(6)\n  , forOf             = require(37)\n  , createArrayMethod = require(12)\n  , $has              = require(39)\n  , arrayFind         = createArrayMethod(5)\n  , arrayFindIndex    = createArrayMethod(6)\n  , id                = 0;\n\n// fallback for uncaught frozen keys\nvar uncaughtFrozenStore = function(that){\n  return that._l || (that._l = new UncaughtFrozenStore);\n};\nvar UncaughtFrozenStore = function(){\n  this.a = [];\n};\nvar findUncaughtFrozen = function(store, key){\n  return arrayFind(store.a, function(it){\n    return it[0] === key;\n  });\n};\nUncaughtFrozenStore.prototype = {\n  get: function(key){\n    var entry = findUncaughtFrozen(this, key);\n    if(entry)return entry[1];\n  },\n  has: function(key){\n    return !!findUncaughtFrozen(this, key);\n  },\n  set: function(key, value){\n    var entry = findUncaughtFrozen(this, key);\n    if(entry)entry[1] = value;\n    else this.a.push([key, value]);\n  },\n  'delete': function(key){\n    var index = arrayFindIndex(this.a, function(it){\n      return it[0] === key;\n    });\n    if(~index)this.a.splice(index, 1);\n    return !!~index;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){\n    var C = wrapper(function(that, iterable){\n      anInstance(that, C, NAME, '_i');\n      that._i = id++;      // collection id\n      that._l = undefined; // leak store for uncaught frozen objects\n      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.3.3.2 WeakMap.prototype.delete(key)\n      // 23.4.3.3 WeakSet.prototype.delete(value)\n      'delete': function(key){\n        if(!isObject(key))return false;\n        var data = getWeak(key);\n        if(data === true)return uncaughtFrozenStore(this)['delete'](key);\n        return data && $has(data, this._i) && delete data[this._i];\n      },\n      // 23.3.3.4 WeakMap.prototype.has(key)\n      // 23.4.3.4 WeakSet.prototype.has(value)\n      has: function has(key){\n        if(!isObject(key))return false;\n        var data = getWeak(key);\n        if(data === true)return uncaughtFrozenStore(this).has(key);\n        return data && $has(data, this._i);\n      }\n    });\n    return C;\n  },\n  def: function(that, key, value){\n    var data = getWeak(anObject(key), true);\n    if(data === true)uncaughtFrozenStore(that).set(key, value);\n    else data[that._i] = value;\n    return that;\n  },\n  ufstore: uncaughtFrozenStore\n};","'use strict';\nvar global            = require(38)\n  , $export           = require(32)\n  , redefine          = require(87)\n  , redefineAll       = require(86)\n  , meta              = require(62)\n  , forOf             = require(37)\n  , anInstance        = require(6)\n  , isObject          = require(49)\n  , fails             = require(34)\n  , $iterDetect       = require(54)\n  , setToStringTag    = require(92)\n  , inheritIfRequired = require(43);\n\nmodule.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){\n  var Base  = global[NAME]\n    , C     = Base\n    , ADDER = IS_MAP ? 'set' : 'add'\n    , proto = C && C.prototype\n    , O     = {};\n  var fixMethod = function(KEY){\n    var fn = proto[KEY];\n    redefine(proto, KEY,\n      KEY == 'delete' ? function(a){\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'has' ? function has(a){\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'get' ? function get(a){\n        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }\n        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }\n    );\n  };\n  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){\n    new C().entries().next();\n  }))){\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    var instance             = new C\n      // early implementations not supports chaining\n      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance\n      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false\n      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })\n      // most early implementations doesn't supports iterables, most modern - not close it correctly\n      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new\n      // for early implementations -0 and +0 not the same\n      , BUGGY_ZERO = !IS_WEAK && fails(function(){\n        // V8 ~ Chromium 42- fails only with 5+ elements\n        var $instance = new C()\n          , index     = 5;\n        while(index--)$instance[ADDER](index, index);\n        return !$instance.has(-0);\n      });\n    if(!ACCEPT_ITERABLES){ \n      C = wrapper(function(target, iterable){\n        anInstance(target, C, NAME);\n        var that = inheritIfRequired(new Base, target, C);\n        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);\n        return that;\n      });\n      C.prototype = proto;\n      proto.constructor = C;\n    }\n    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){\n      fixMethod('delete');\n      fixMethod('has');\n      IS_MAP && fixMethod('get');\n    }\n    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);\n    // weak collections should not contains .clear method\n    if(IS_WEAK && proto.clear)delete proto.clear;\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F * (C != Base), O);\n\n  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};","var core = module.exports = {version: '2.4.0'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef","'use strict';\nvar $defineProperty = require(67)\n  , createDesc      = require(85);\n\nmodule.exports = function(object, index, value){\n  if(index in object)$defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};","// optional / simple context binding\nvar aFunction = require(3);\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};","'use strict';\nvar anObject    = require(7)\n  , toPrimitive = require(110)\n  , NUMBER      = 'number';\n\nmodule.exports = function(hint){\n  if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');\n  return toPrimitive(anObject(this), hint != NUMBER);\n};","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function(it){\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require(34)(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});","var isObject = require(49)\n  , document = require(38).document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');","// all enumerable object keys, includes symbols\nvar getKeys = require(76)\n  , gOPS    = require(73)\n  , pIE     = require(77);\nmodule.exports = function(it){\n  var result     = getKeys(it)\n    , getSymbols = gOPS.f;\n  if(getSymbols){\n    var symbols = getSymbols(it)\n      , isEnum  = pIE.f\n      , i       = 0\n      , key;\n    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);\n  } return result;\n};","var global    = require(38)\n  , core      = require(23)\n  , hide      = require(40)\n  , redefine  = require(87)\n  , ctx       = require(25)\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})\n    , key, own, out, exp;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if(target)redefine(target, key, out, type & $export.U);\n    // export\n    if(exports[key] != out)hide(exports, key, exp);\n    if(IS_PROTO && expProto[key] != out)expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library` \nmodule.exports = $export;","var MATCH = require(117)('match');\nmodule.exports = function(KEY){\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch(e){\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch(f){ /* empty */ }\n  } return true;\n};","module.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};","'use strict';\nvar hide     = require(40)\n  , redefine = require(87)\n  , fails    = require(34)\n  , defined  = require(27)\n  , wks      = require(117);\n\nmodule.exports = function(KEY, length, exec){\n  var SYMBOL   = wks(KEY)\n    , fns      = exec(defined, SYMBOL, ''[KEY])\n    , strfn    = fns[0]\n    , rxfn     = fns[1];\n  if(fails(function(){\n    var O = {};\n    O[SYMBOL] = function(){ return 7; };\n    return ''[KEY](O) != 7;\n  })){\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function(string, arg){ return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function(string){ return rxfn.call(string, this); }\n    );\n  }\n};","'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require(7);\nmodule.exports = function(){\n  var that   = anObject(this)\n    , result = '';\n  if(that.global)     result += 'g';\n  if(that.ignoreCase) result += 'i';\n  if(that.multiline)  result += 'm';\n  if(that.unicode)    result += 'u';\n  if(that.sticky)     result += 'y';\n  return result;\n};","var ctx         = require(25)\n  , call        = require(51)\n  , isArrayIter = require(46)\n  , anObject    = require(7)\n  , toLength    = require(108)\n  , getIterFn   = require(118)\n  , BREAK       = {}\n  , RETURN      = {};\nvar exports = module.exports = function(iterable, entries, fn, that, ITERATOR){\n  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)\n    , f      = ctx(fn, that, entries ? 2 : 1)\n    , index  = 0\n    , length, step, iterator, result;\n  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if(result === BREAK || result === RETURN)return result;\n  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){\n    result = call(iterator, f, step.value, entries);\n    if(result === BREAK || result === RETURN)return result;\n  }\n};\nexports.BREAK  = BREAK;\nexports.RETURN = RETURN;","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function(it, key){\n  return hasOwnProperty.call(it, key);\n};","var dP         = require(67)\n  , createDesc = require(85);\nmodule.exports = require(28) ? function(object, key, value){\n  return dP.f(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};","module.exports = require(38).document && document.documentElement;","module.exports = !require(28) && !require(34)(function(){\n  return Object.defineProperty(require(29)('div'), 'a', {get: function(){ return 7; }}).a != 7;\n});","var isObject       = require(49)\n  , setPrototypeOf = require(90).set;\nmodule.exports = function(that, target, C){\n  var P, S = target.constructor;\n  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){\n    setPrototypeOf(that, P);\n  } return that;\n};","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function(fn, args, that){\n  var un = that === undefined;\n  switch(args.length){\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return              fn.apply(that, args);\n};","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require(18);\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};","// check on default Array iterator\nvar Iterators  = require(56)\n  , ITERATOR   = require(117)('iterator')\n  , ArrayProto = Array.prototype;\n\nmodule.exports = function(it){\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};","// 7.2.2 IsArray(argument)\nvar cof = require(18);\nmodule.exports = Array.isArray || function isArray(arg){\n  return cof(arg) == 'Array';\n};","// 20.1.2.3 Number.isInteger(number)\nvar isObject = require(49)\n  , floor    = Math.floor;\nmodule.exports = function isInteger(it){\n  return !isObject(it) && isFinite(it) && floor(it) === it;\n};","module.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};","// 7.2.8 IsRegExp(argument)\nvar isObject = require(49)\n  , cof      = require(18)\n  , MATCH    = require(117)('match');\nmodule.exports = function(it){\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};","// call something on iterator step with safe closing on error\nvar anObject = require(7);\nmodule.exports = function(iterator, fn, value, entries){\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch(e){\n    var ret = iterator['return'];\n    if(ret !== undefined)anObject(ret.call(iterator));\n    throw e;\n  }\n};","'use strict';\nvar create         = require(66)\n  , descriptor     = require(85)\n  , setToStringTag = require(92)\n  , IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire(40)(IteratorPrototype, require(117)('iterator'), function(){ return this; });\n\nmodule.exports = function(Constructor, NAME, next){\n  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});\n  setToStringTag(Constructor, NAME + ' Iterator');\n};","'use strict';\nvar LIBRARY        = require(58)\n  , $export        = require(32)\n  , redefine       = require(87)\n  , hide           = require(40)\n  , has            = require(39)\n  , Iterators      = require(56)\n  , $iterCreate    = require(52)\n  , setToStringTag = require(92)\n  , getPrototypeOf = require(74)\n  , ITERATOR       = require(117)('iterator')\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n  , FF_ITERATOR    = '@@iterator'\n  , KEYS           = 'keys'\n  , VALUES         = 'values';\n\nvar returnThis = function(){ return this; };\n\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function(kind){\n    if(!BUGGY && kind in proto)return proto[kind];\n    switch(kind){\n      case KEYS: return function keys(){ return new Constructor(this, kind); };\n      case VALUES: return function values(){ return new Constructor(this, kind); };\n    } return function entries(){ return new Constructor(this, kind); };\n  };\n  var TAG        = NAME + ' Iterator'\n    , DEF_VALUES = DEFAULT == VALUES\n    , VALUES_BUG = false\n    , proto      = Base.prototype\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n    , $default   = $native || getMethod(DEFAULT)\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\n    , methods, key, IteratorPrototype;\n  // Fix native\n  if($anyNative){\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));\n    if(IteratorPrototype !== Object.prototype){\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if(DEF_VALUES && $native && $native.name !== VALUES){\n    VALUES_BUG = true;\n    $default = function values(){ return $native.call(this); };\n  }\n  // Define iterator\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG]  = returnThis;\n  if(DEFAULT){\n    methods = {\n      values:  DEF_VALUES ? $default : getMethod(VALUES),\n      keys:    IS_SET     ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if(FORCED)for(key in methods){\n      if(!(key in proto))redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};","var ITERATOR     = require(117)('iterator')\n  , SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function(){ SAFE_CLOSING = true; };\n  Array.from(riter, function(){ throw 2; });\n} catch(e){ /* empty */ }\n\nmodule.exports = function(exec, skipClosing){\n  if(!skipClosing && !SAFE_CLOSING)return false;\n  var safe = false;\n  try {\n    var arr  = [7]\n      , iter = arr[ITERATOR]();\n    iter.next = function(){ return {done: safe = true}; };\n    arr[ITERATOR] = function(){ return iter; };\n    exec(arr);\n  } catch(e){ /* empty */ }\n  return safe;\n};","module.exports = function(done, value){\n  return {value: value, done: !!done};\n};","module.exports = {};","var getKeys   = require(76)\n  , toIObject = require(107);\nmodule.exports = function(object, el){\n  var O      = toIObject(object)\n    , keys   = getKeys(O)\n    , length = keys.length\n    , index  = 0\n    , key;\n  while(length > index)if(O[key = keys[index++]] === el)return key;\n};","module.exports = false;","// 20.2.2.14 Math.expm1(x)\nvar $expm1 = Math.expm1;\nmodule.exports = (!$expm1\n  // Old FF bug\n  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168\n  // Tor Browser bug\n  || $expm1(-2e-17) != -2e-17\n) ? function expm1(x){\n  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;\n} : $expm1;","// 20.2.2.20 Math.log1p(x)\nmodule.exports = Math.log1p || function log1p(x){\n  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);\n};","// 20.2.2.28 Math.sign(x)\nmodule.exports = Math.sign || function sign(x){\n  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n};","var META     = require(114)('meta')\n  , isObject = require(49)\n  , has      = require(39)\n  , setDesc  = require(67).f\n  , id       = 0;\nvar isExtensible = Object.isExtensible || function(){\n  return true;\n};\nvar FREEZE = !require(34)(function(){\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function(it){\n  setDesc(it, META, {value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  }});\n};\nvar fastKey = function(it, create){\n  // return primitive with prefix\n  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if(!has(it, META)){\n    // can't set metadata to uncaught frozen object\n    if(!isExtensible(it))return 'F';\n    // not necessary to add metadata\n    if(!create)return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function(it, create){\n  if(!has(it, META)){\n    // can't set metadata to uncaught frozen object\n    if(!isExtensible(it))return true;\n    // not necessary to add metadata\n    if(!create)return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function(it){\n  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY:      META,\n  NEED:     false,\n  fastKey:  fastKey,\n  getWeak:  getWeak,\n  onFreeze: onFreeze\n};","var Map     = require(149)\n  , $export = require(32)\n  , shared  = require(94)('metadata')\n  , store   = shared.store || (shared.store = new (require(255)));\n\nvar getOrCreateMetadataMap = function(target, targetKey, create){\n  var targetMetadata = store.get(target);\n  if(!targetMetadata){\n    if(!create)return undefined;\n    store.set(target, targetMetadata = new Map);\n  }\n  var keyMetadata = targetMetadata.get(targetKey);\n  if(!keyMetadata){\n    if(!create)return undefined;\n    targetMetadata.set(targetKey, keyMetadata = new Map);\n  } return keyMetadata;\n};\nvar ordinaryHasOwnMetadata = function(MetadataKey, O, P){\n  var metadataMap = getOrCreateMetadataMap(O, P, false);\n  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);\n};\nvar ordinaryGetOwnMetadata = function(MetadataKey, O, P){\n  var metadataMap = getOrCreateMetadataMap(O, P, false);\n  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);\n};\nvar ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){\n  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);\n};\nvar ordinaryOwnMetadataKeys = function(target, targetKey){\n  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)\n    , keys        = [];\n  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });\n  return keys;\n};\nvar toMetaKey = function(it){\n  return it === undefined || typeof it == 'symbol' ? it : String(it);\n};\nvar exp = function(O){\n  $export($export.S, 'Reflect', O);\n};\n\nmodule.exports = {\n  store: store,\n  map: getOrCreateMetadataMap,\n  has: ordinaryHasOwnMetadata,\n  get: ordinaryGetOwnMetadata,\n  set: ordinaryDefineOwnMetadata,\n  keys: ordinaryOwnMetadataKeys,\n  key: toMetaKey,\n  exp: exp\n};","var global    = require(38)\n  , macrotask = require(104).set\n  , Observer  = global.MutationObserver || global.WebKitMutationObserver\n  , process   = global.process\n  , Promise   = global.Promise\n  , isNode    = require(18)(process) == 'process';\n\nmodule.exports = function(){\n  var head, last, notify;\n\n  var flush = function(){\n    var parent, fn;\n    if(isNode && (parent = process.domain))parent.exit();\n    while(head){\n      fn   = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch(e){\n        if(head)notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if(parent)parent.enter();\n  };\n\n  // Node.js\n  if(isNode){\n    notify = function(){\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver\n  } else if(Observer){\n    var toggle = true\n      , node   = document.createTextNode('');\n    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new\n    notify = function(){\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if(Promise && Promise.resolve){\n    var promise = Promise.resolve();\n    notify = function(){\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function(){\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function(fn){\n    var task = {fn: fn, next: undefined};\n    if(last)last.next = task;\n    if(!head){\n      head = task;\n      notify();\n    } last = task;\n  };\n};","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys  = require(76)\n  , gOPS     = require(73)\n  , pIE      = require(77)\n  , toObject = require(109)\n  , IObject  = require(45)\n  , $assign  = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require(34)(function(){\n  var A = {}\n    , B = {}\n    , S = Symbol()\n    , K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function(k){ B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source){ // eslint-disable-line no-unused-vars\n  var T     = toObject(target)\n    , aLen  = arguments.length\n    , index = 1\n    , getSymbols = gOPS.f\n    , isEnum     = pIE.f;\n  while(aLen > index){\n    var S      = IObject(arguments[index++])\n      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)\n      , length = keys.length\n      , j      = 0\n      , key;\n    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];\n  } return T;\n} : $assign;","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject    = require(7)\n  , dPs         = require(68)\n  , enumBugKeys = require(30)\n  , IE_PROTO    = require(93)('IE_PROTO')\n  , Empty       = function(){ /* empty */ }\n  , PROTOTYPE   = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function(){\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require(29)('iframe')\n    , i      = enumBugKeys.length\n    , lt     = '<'\n    , gt     = '>'\n    , iframeDocument;\n  iframe.style.display = 'none';\n  require(41).appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties){\n  var result;\n  if(O !== null){\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty;\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var anObject       = require(7)\n  , IE8_DOM_DEFINE = require(42)\n  , toPrimitive    = require(110)\n  , dP             = Object.defineProperty;\n\nexports.f = require(28) ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if(IE8_DOM_DEFINE)try {\n    return dP(O, P, Attributes);\n  } catch(e){ /* empty */ }\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n};","var dP       = require(67)\n  , anObject = require(7)\n  , getKeys  = require(76);\n\nmodule.exports = require(28) ? Object.defineProperties : function defineProperties(O, Properties){\n  anObject(O);\n  var keys   = getKeys(Properties)\n    , length = keys.length\n    , i = 0\n    , P;\n  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};","// Forced replacement prototype accessors methods\nmodule.exports = require(58)|| !require(34)(function(){\n  var K = Math.random();\n  // In FF throws only define methods\n  __defineSetter__.call(null, K, function(){ /* empty */});\n  delete require(38)[K];\n});","var pIE            = require(77)\n  , createDesc     = require(85)\n  , toIObject      = require(107)\n  , toPrimitive    = require(110)\n  , has            = require(39)\n  , IE8_DOM_DEFINE = require(42)\n  , gOPD           = Object.getOwnPropertyDescriptor;\n\nexports.f = require(28) ? gOPD : function getOwnPropertyDescriptor(O, P){\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if(IE8_DOM_DEFINE)try {\n    return gOPD(O, P);\n  } catch(e){ /* empty */ }\n  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);\n};","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require(107)\n  , gOPN      = require(72).f\n  , toString  = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function(it){\n  try {\n    return gOPN(it);\n  } catch(e){\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it){\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys      = require(75)\n  , hiddenKeys = require(30).concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){\n  return $keys(O, hiddenKeys);\n};","exports.f = Object.getOwnPropertySymbols;","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has         = require(39)\n  , toObject    = require(109)\n  , IE_PROTO    = require(93)('IE_PROTO')\n  , ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function(O){\n  O = toObject(O);\n  if(has(O, IE_PROTO))return O[IE_PROTO];\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};","var has          = require(39)\n  , toIObject    = require(107)\n  , arrayIndexOf = require(11)(false)\n  , IE_PROTO     = require(93)('IE_PROTO');\n\nmodule.exports = function(object, names){\n  var O      = toIObject(object)\n    , i      = 0\n    , result = []\n    , key;\n  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while(names.length > i)if(has(O, key = names[i++])){\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys       = require(75)\n  , enumBugKeys = require(30);\n\nmodule.exports = Object.keys || function keys(O){\n  return $keys(O, enumBugKeys);\n};","exports.f = {}.propertyIsEnumerable;","// most Object methods by ES6 should accept primitives\nvar $export = require(32)\n  , core    = require(23)\n  , fails   = require(34);\nmodule.exports = function(KEY, exec){\n  var fn  = (core.Object || {})[KEY] || Object[KEY]\n    , exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);\n};","var getKeys   = require(76)\n  , toIObject = require(107)\n  , isEnum    = require(77).f;\nmodule.exports = function(isEntries){\n  return function(it){\n    var O      = toIObject(it)\n      , keys   = getKeys(O)\n      , length = keys.length\n      , i      = 0\n      , result = []\n      , key;\n    while(length > i)if(isEnum.call(O, key = keys[i++])){\n      result.push(isEntries ? [key, O[key]] : O[key]);\n    } return result;\n  };\n};","// all object keys, includes non-enumerable and symbols\nvar gOPN     = require(72)\n  , gOPS     = require(73)\n  , anObject = require(7)\n  , Reflect  = require(38).Reflect;\nmodule.exports = Reflect && Reflect.ownKeys || function ownKeys(it){\n  var keys       = gOPN.f(anObject(it))\n    , getSymbols = gOPS.f;\n  return getSymbols ? keys.concat(getSymbols(it)) : keys;\n};","var $parseFloat = require(38).parseFloat\n  , $trim       = require(102).trim;\n\nmodule.exports = 1 / $parseFloat(require(103) + '-0') !== -Infinity ? function parseFloat(str){\n  var string = $trim(String(str), 3)\n    , result = $parseFloat(string);\n  return result === 0 && string.charAt(0) == '-' ? -0 : result;\n} : $parseFloat;","var $parseInt = require(38).parseInt\n  , $trim     = require(102).trim\n  , ws        = require(103)\n  , hex       = /^[\\-+]?0[xX]/;\n\nmodule.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){\n  var string = $trim(String(str), 3);\n  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));\n} : $parseInt;","'use strict';\nvar path      = require(84)\n  , invoke    = require(44)\n  , aFunction = require(3);\nmodule.exports = function(/* ...pargs */){\n  var fn     = aFunction(this)\n    , length = arguments.length\n    , pargs  = Array(length)\n    , i      = 0\n    , _      = path._\n    , holder = false;\n  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;\n  return function(/* ...args */){\n    var that = this\n      , aLen = arguments.length\n      , j = 0, k = 0, args;\n    if(!holder && !aLen)return invoke(fn, pargs, that);\n    args = pargs.slice();\n    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];\n    while(aLen > k)args.push(arguments[k++]);\n    return invoke(fn, args, that);\n  };\n};","module.exports = require(38);","module.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};","var redefine = require(87);\nmodule.exports = function(target, src, safe){\n  for(var key in src)redefine(target, key, src[key], safe);\n  return target;\n};","var global    = require(38)\n  , hide      = require(40)\n  , has       = require(39)\n  , SRC       = require(114)('src')\n  , TO_STRING = 'toString'\n  , $toString = Function[TO_STRING]\n  , TPL       = ('' + $toString).split(TO_STRING);\n\nrequire(23).inspectSource = function(it){\n  return $toString.call(it);\n};\n\n(module.exports = function(O, key, val, safe){\n  var isFunction = typeof val == 'function';\n  if(isFunction)has(val, 'name') || hide(val, 'name', key);\n  if(O[key] === val)return;\n  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if(O === global){\n    O[key] = val;\n  } else {\n    if(!safe){\n      delete O[key];\n      hide(O, key, val);\n    } else {\n      if(O[key])O[key] = val;\n      else hide(O, key, val);\n    }\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString(){\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});","module.exports = function(regExp, replace){\n  var replacer = replace === Object(replace) ? function(part){\n    return replace[part];\n  } : replace;\n  return function(it){\n    return String(it).replace(regExp, replacer);\n  };\n};","// 7.2.9 SameValue(x, y)\nmodule.exports = Object.is || function is(x, y){\n  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n};","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require(49)\n  , anObject = require(7);\nvar check = function(O, proto){\n  anObject(O);\n  if(!isObject(proto) && proto !== null)throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function(test, buggy, set){\n      try {\n        set = require(25)(Function.call, require(70).f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch(e){ buggy = true; }\n      return function setPrototypeOf(O, proto){\n        check(O, proto);\n        if(buggy)O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};","'use strict';\nvar global      = require(38)\n  , dP          = require(67)\n  , DESCRIPTORS = require(28)\n  , SPECIES     = require(117)('species');\n\nmodule.exports = function(KEY){\n  var C = global[KEY];\n  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {\n    configurable: true,\n    get: function(){ return this; }\n  });\n};","var def = require(67).f\n  , has = require(39)\n  , TAG = require(117)('toStringTag');\n\nmodule.exports = function(it, tag, stat){\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n};","var shared = require(94)('keys')\n  , uid    = require(114);\nmodule.exports = function(key){\n  return shared[key] || (shared[key] = uid(key));\n};","var global = require(38)\n  , SHARED = '__core-js_shared__'\n  , store  = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function(key){\n  return store[key] || (store[key] = {});\n};","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject  = require(7)\n  , aFunction = require(3)\n  , SPECIES   = require(117)('species');\nmodule.exports = function(O, D){\n  var C = anObject(O).constructor, S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};","var fails = require(34);\n\nmodule.exports = function(method, arg){\n  return !!method && fails(function(){\n    arg ? method.call(null, function(){}, 1) : method.call(null);\n  });\n};","var toInteger = require(106)\n  , defined   = require(27);\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function(TO_STRING){\n  return function(that, pos){\n    var s = String(defined(that))\n      , i = toInteger(pos)\n      , l = s.length\n      , a, b;\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};","// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = require(50)\n  , defined  = require(27);\n\nmodule.exports = function(that, searchString, NAME){\n  if(isRegExp(searchString))throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};","var $export = require(32)\n  , fails   = require(34)\n  , defined = require(27)\n  , quot    = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function(string, tag, attribute, value) {\n  var S  = String(defined(string))\n    , p1 = '<' + tag;\n  if(attribute !== '')p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function(NAME, exec){\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function(){\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};","// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = require(108)\n  , repeat   = require(101)\n  , defined  = require(27);\n\nmodule.exports = function(that, maxLength, fillString, left){\n  var S            = String(defined(that))\n    , stringLength = S.length\n    , fillStr      = fillString === undefined ? ' ' : String(fillString)\n    , intMaxLength = toLength(maxLength);\n  if(intMaxLength <= stringLength || fillStr == '')return S;\n  var fillLen = intMaxLength - stringLength\n    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);\n  return left ? stringFiller + S : S + stringFiller;\n};\n","'use strict';\nvar toInteger = require(106)\n  , defined   = require(27);\n\nmodule.exports = function repeat(count){\n  var str = String(defined(this))\n    , res = ''\n    , n   = toInteger(count);\n  if(n < 0 || n == Infinity)throw RangeError(\"Count can't be negative\");\n  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;\n  return res;\n};","var $export = require(32)\n  , defined = require(27)\n  , fails   = require(34)\n  , spaces  = require(103)\n  , space   = '[' + spaces + ']'\n  , non     = '\\u200b\\u0085'\n  , ltrim   = RegExp('^' + space + space + '*')\n  , rtrim   = RegExp(space + space + '*$');\n\nvar exporter = function(KEY, exec, ALIAS){\n  var exp   = {};\n  var FORCE = fails(function(){\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if(ALIAS)exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function(string, TYPE){\n  string = String(defined(string));\n  if(TYPE & 1)string = string.replace(ltrim, '');\n  if(TYPE & 2)string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;","module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';","var ctx                = require(25)\n  , invoke             = require(44)\n  , html               = require(41)\n  , cel                = require(29)\n  , global             = require(38)\n  , process            = global.process\n  , setTask            = global.setImmediate\n  , clearTask          = global.clearImmediate\n  , MessageChannel     = global.MessageChannel\n  , counter            = 0\n  , queue              = {}\n  , ONREADYSTATECHANGE = 'onreadystatechange'\n  , defer, channel, port;\nvar run = function(){\n  var id = +this;\n  if(queue.hasOwnProperty(id)){\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function(event){\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif(!setTask || !clearTask){\n  setTask = function setImmediate(fn){\n    var args = [], i = 1;\n    while(arguments.length > i)args.push(arguments[i++]);\n    queue[++counter] = function(){\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id){\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if(require(18)(process) == 'process'){\n    defer = function(id){\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if(MessageChannel){\n    channel = new MessageChannel;\n    port    = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){\n    defer = function(id){\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if(ONREADYSTATECHANGE in cel('script')){\n    defer = function(id){\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function(id){\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set:   setTask,\n  clear: clearTask\n};","var toInteger = require(106)\n  , max       = Math.max\n  , min       = Math.min;\nmodule.exports = function(index, length){\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};","// 7.1.4 ToInteger\nvar ceil  = Math.ceil\n  , floor = Math.floor;\nmodule.exports = function(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require(45)\n  , defined = require(27);\nmodule.exports = function(it){\n  return IObject(defined(it));\n};","// 7.1.15 ToLength\nvar toInteger = require(106)\n  , min       = Math.min;\nmodule.exports = function(it){\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};","// 7.1.13 ToObject(argument)\nvar defined = require(27);\nmodule.exports = function(it){\n  return Object(defined(it));\n};","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require(49);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function(it, S){\n  if(!isObject(it))return it;\n  var fn, val;\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};","'use strict';\nif(require(28)){\n  var LIBRARY             = require(58)\n    , global              = require(38)\n    , fails               = require(34)\n    , $export             = require(32)\n    , $typed              = require(113)\n    , $buffer             = require(112)\n    , ctx                 = require(25)\n    , anInstance          = require(6)\n    , propertyDesc        = require(85)\n    , hide                = require(40)\n    , redefineAll         = require(86)\n    , toInteger           = require(106)\n    , toLength            = require(108)\n    , toIndex             = require(105)\n    , toPrimitive         = require(110)\n    , has                 = require(39)\n    , same                = require(89)\n    , classof             = require(17)\n    , isObject            = require(49)\n    , toObject            = require(109)\n    , isArrayIter         = require(46)\n    , create              = require(66)\n    , getPrototypeOf      = require(74)\n    , gOPN                = require(72).f\n    , getIterFn           = require(118)\n    , uid                 = require(114)\n    , wks                 = require(117)\n    , createArrayMethod   = require(12)\n    , createArrayIncludes = require(11)\n    , speciesConstructor  = require(95)\n    , ArrayIterators      = require(130)\n    , Iterators           = require(56)\n    , $iterDetect         = require(54)\n    , setSpecies          = require(91)\n    , arrayFill           = require(9)\n    , arrayCopyWithin     = require(8)\n    , $DP                 = require(67)\n    , $GOPD               = require(70)\n    , dP                  = $DP.f\n    , gOPD                = $GOPD.f\n    , RangeError          = global.RangeError\n    , TypeError           = global.TypeError\n    , Uint8Array          = global.Uint8Array\n    , ARRAY_BUFFER        = 'ArrayBuffer'\n    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER\n    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'\n    , PROTOTYPE           = 'prototype'\n    , ArrayProto          = Array[PROTOTYPE]\n    , $ArrayBuffer        = $buffer.ArrayBuffer\n    , $DataView           = $buffer.DataView\n    , arrayForEach        = createArrayMethod(0)\n    , arrayFilter         = createArrayMethod(2)\n    , arraySome           = createArrayMethod(3)\n    , arrayEvery          = createArrayMethod(4)\n    , arrayFind           = createArrayMethod(5)\n    , arrayFindIndex      = createArrayMethod(6)\n    , arrayIncludes       = createArrayIncludes(true)\n    , arrayIndexOf        = createArrayIncludes(false)\n    , arrayValues         = ArrayIterators.values\n    , arrayKeys           = ArrayIterators.keys\n    , arrayEntries        = ArrayIterators.entries\n    , arrayLastIndexOf    = ArrayProto.lastIndexOf\n    , arrayReduce         = ArrayProto.reduce\n    , arrayReduceRight    = ArrayProto.reduceRight\n    , arrayJoin           = ArrayProto.join\n    , arraySort           = ArrayProto.sort\n    , arraySlice          = ArrayProto.slice\n    , arrayToString       = ArrayProto.toString\n    , arrayToLocaleString = ArrayProto.toLocaleString\n    , ITERATOR            = wks('iterator')\n    , TAG                 = wks('toStringTag')\n    , TYPED_CONSTRUCTOR   = uid('typed_constructor')\n    , DEF_CONSTRUCTOR     = uid('def_constructor')\n    , ALL_CONSTRUCTORS    = $typed.CONSTR\n    , TYPED_ARRAY         = $typed.TYPED\n    , VIEW                = $typed.VIEW\n    , WRONG_LENGTH        = 'Wrong length!';\n\n  var $map = createArrayMethod(1, function(O, length){\n    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);\n  });\n\n  var LITTLE_ENDIAN = fails(function(){\n    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\n  });\n\n  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){\n    new Uint8Array(1).set({});\n  });\n\n  var strictToLength = function(it, SAME){\n    if(it === undefined)throw TypeError(WRONG_LENGTH);\n    var number = +it\n      , length = toLength(it);\n    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);\n    return length;\n  };\n\n  var toOffset = function(it, BYTES){\n    var offset = toInteger(it);\n    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');\n    return offset;\n  };\n\n  var validate = function(it){\n    if(isObject(it) && TYPED_ARRAY in it)return it;\n    throw TypeError(it + ' is not a typed array!');\n  };\n\n  var allocate = function(C, length){\n    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){\n      throw TypeError('It is not a typed array constructor!');\n    } return new C(length);\n  };\n\n  var speciesFromList = function(O, list){\n    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);\n  };\n\n  var fromList = function(C, list){\n    var index  = 0\n      , length = list.length\n      , result = allocate(C, length);\n    while(length > index)result[index] = list[index++];\n    return result;\n  };\n\n  var addGetter = function(it, key, internal){\n    dP(it, key, {get: function(){ return this._d[internal]; }});\n  };\n\n  var $from = function from(source /*, mapfn, thisArg */){\n    var O       = toObject(source)\n      , aLen    = arguments.length\n      , mapfn   = aLen > 1 ? arguments[1] : undefined\n      , mapping = mapfn !== undefined\n      , iterFn  = getIterFn(O)\n      , i, length, values, result, step, iterator;\n    if(iterFn != undefined && !isArrayIter(iterFn)){\n      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){\n        values.push(step.value);\n      } O = values;\n    }\n    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);\n    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){\n      result[i] = mapping ? mapfn(O[i], i) : O[i];\n    }\n    return result;\n  };\n\n  var $of = function of(/*...items*/){\n    var index  = 0\n      , length = arguments.length\n      , result = allocate(this, length);\n    while(length > index)result[index] = arguments[index++];\n    return result;\n  };\n\n  // iOS Safari 6.x fails here\n  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });\n\n  var $toLocaleString = function toLocaleString(){\n    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);\n  };\n\n  var proto = {\n    copyWithin: function copyWithin(target, start /*, end */){\n      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    every: function every(callbackfn /*, thisArg */){\n      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars\n      return arrayFill.apply(validate(this), arguments);\n    },\n    filter: function filter(callbackfn /*, thisArg */){\n      return speciesFromList(this, arrayFilter(validate(this), callbackfn,\n        arguments.length > 1 ? arguments[1] : undefined));\n    },\n    find: function find(predicate /*, thisArg */){\n      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    findIndex: function findIndex(predicate /*, thisArg */){\n      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    forEach: function forEach(callbackfn /*, thisArg */){\n      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    indexOf: function indexOf(searchElement /*, fromIndex */){\n      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    includes: function includes(searchElement /*, fromIndex */){\n      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    join: function join(separator){ // eslint-disable-line no-unused-vars\n      return arrayJoin.apply(validate(this), arguments);\n    },\n    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars\n      return arrayLastIndexOf.apply(validate(this), arguments);\n    },\n    map: function map(mapfn /*, thisArg */){\n      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars\n      return arrayReduce.apply(validate(this), arguments);\n    },\n    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars\n      return arrayReduceRight.apply(validate(this), arguments);\n    },\n    reverse: function reverse(){\n      var that   = this\n        , length = validate(that).length\n        , middle = Math.floor(length / 2)\n        , index  = 0\n        , value;\n      while(index < middle){\n        value         = that[index];\n        that[index++] = that[--length];\n        that[length]  = value;\n      } return that;\n    },\n    some: function some(callbackfn /*, thisArg */){\n      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    sort: function sort(comparefn){\n      return arraySort.call(validate(this), comparefn);\n    },\n    subarray: function subarray(begin, end){\n      var O      = validate(this)\n        , length = O.length\n        , $begin = toIndex(begin, length);\n      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(\n        O.buffer,\n        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,\n        toLength((end === undefined ? length : toIndex(end, length)) - $begin)\n      );\n    }\n  };\n\n  var $slice = function slice(start, end){\n    return speciesFromList(this, arraySlice.call(validate(this), start, end));\n  };\n\n  var $set = function set(arrayLike /*, offset */){\n    validate(this);\n    var offset = toOffset(arguments[1], 1)\n      , length = this.length\n      , src    = toObject(arrayLike)\n      , len    = toLength(src.length)\n      , index  = 0;\n    if(len + offset > length)throw RangeError(WRONG_LENGTH);\n    while(index < len)this[offset + index] = src[index++];\n  };\n\n  var $iterators = {\n    entries: function entries(){\n      return arrayEntries.call(validate(this));\n    },\n    keys: function keys(){\n      return arrayKeys.call(validate(this));\n    },\n    values: function values(){\n      return arrayValues.call(validate(this));\n    }\n  };\n\n  var isTAIndex = function(target, key){\n    return isObject(target)\n      && target[TYPED_ARRAY]\n      && typeof key != 'symbol'\n      && key in target\n      && String(+key) == String(key);\n  };\n  var $getDesc = function getOwnPropertyDescriptor(target, key){\n    return isTAIndex(target, key = toPrimitive(key, true))\n      ? propertyDesc(2, target[key])\n      : gOPD(target, key);\n  };\n  var $setDesc = function defineProperty(target, key, desc){\n    if(isTAIndex(target, key = toPrimitive(key, true))\n      && isObject(desc)\n      && has(desc, 'value')\n      && !has(desc, 'get')\n      && !has(desc, 'set')\n      // TODO: add validation descriptor w/o calling accessors\n      && !desc.configurable\n      && (!has(desc, 'writable') || desc.writable)\n      && (!has(desc, 'enumerable') || desc.enumerable)\n    ){\n      target[key] = desc.value;\n      return target;\n    } else return dP(target, key, desc);\n  };\n\n  if(!ALL_CONSTRUCTORS){\n    $GOPD.f = $getDesc;\n    $DP.f   = $setDesc;\n  }\n\n  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {\n    getOwnPropertyDescriptor: $getDesc,\n    defineProperty:           $setDesc\n  });\n\n  if(fails(function(){ arrayToString.call({}); })){\n    arrayToString = arrayToLocaleString = function toString(){\n      return arrayJoin.call(this);\n    }\n  }\n\n  var $TypedArrayPrototype$ = redefineAll({}, proto);\n  redefineAll($TypedArrayPrototype$, $iterators);\n  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);\n  redefineAll($TypedArrayPrototype$, {\n    slice:          $slice,\n    set:            $set,\n    constructor:    function(){ /* noop */ },\n    toString:       arrayToString,\n    toLocaleString: $toLocaleString\n  });\n  addGetter($TypedArrayPrototype$, 'buffer', 'b');\n  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');\n  addGetter($TypedArrayPrototype$, 'byteLength', 'l');\n  addGetter($TypedArrayPrototype$, 'length', 'e');\n  dP($TypedArrayPrototype$, TAG, {\n    get: function(){ return this[TYPED_ARRAY]; }\n  });\n\n  module.exports = function(KEY, BYTES, wrapper, CLAMPED){\n    CLAMPED = !!CLAMPED;\n    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'\n      , ISNT_UINT8 = NAME != 'Uint8Array'\n      , GETTER     = 'get' + KEY\n      , SETTER     = 'set' + KEY\n      , TypedArray = global[NAME]\n      , Base       = TypedArray || {}\n      , TAC        = TypedArray && getPrototypeOf(TypedArray)\n      , FORCED     = !TypedArray || !$typed.ABV\n      , O          = {}\n      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];\n    var getter = function(that, index){\n      var data = that._d;\n      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);\n    };\n    var setter = function(that, index, value){\n      var data = that._d;\n      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;\n      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);\n    };\n    var addElement = function(that, index){\n      dP(that, index, {\n        get: function(){\n          return getter(this, index);\n        },\n        set: function(value){\n          return setter(this, index, value);\n        },\n        enumerable: true\n      });\n    };\n    if(FORCED){\n      TypedArray = wrapper(function(that, data, $offset, $length){\n        anInstance(that, TypedArray, NAME, '_d');\n        var index  = 0\n          , offset = 0\n          , buffer, byteLength, length, klass;\n        if(!isObject(data)){\n          length     = strictToLength(data, true)\n          byteLength = length * BYTES;\n          buffer     = new $ArrayBuffer(byteLength);\n        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){\n          buffer = data;\n          offset = toOffset($offset, BYTES);\n          var $len = data.byteLength;\n          if($length === undefined){\n            if($len % BYTES)throw RangeError(WRONG_LENGTH);\n            byteLength = $len - offset;\n            if(byteLength < 0)throw RangeError(WRONG_LENGTH);\n          } else {\n            byteLength = toLength($length) * BYTES;\n            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);\n          }\n          length = byteLength / BYTES;\n        } else if(TYPED_ARRAY in data){\n          return fromList(TypedArray, data);\n        } else {\n          return $from.call(TypedArray, data);\n        }\n        hide(that, '_d', {\n          b: buffer,\n          o: offset,\n          l: byteLength,\n          e: length,\n          v: new $DataView(buffer)\n        });\n        while(index < length)addElement(that, index++);\n      });\n      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);\n      hide(TypedArrayPrototype, 'constructor', TypedArray);\n    } else if(!$iterDetect(function(iter){\n      // V8 works with iterators, but fails in many other cases\n      // https://code.google.com/p/v8/issues/detail?id=4552\n      new TypedArray(null); // eslint-disable-line no-new\n      new TypedArray(iter); // eslint-disable-line no-new\n    }, true)){\n      TypedArray = wrapper(function(that, data, $offset, $length){\n        anInstance(that, TypedArray, NAME);\n        var klass;\n        // `ws` module bug, temporarily remove validation length for Uint8Array\n        // https://github.com/websockets/ws/pull/645\n        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));\n        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){\n          return $length !== undefined\n            ? new Base(data, toOffset($offset, BYTES), $length)\n            : $offset !== undefined\n              ? new Base(data, toOffset($offset, BYTES))\n              : new Base(data);\n        }\n        if(TYPED_ARRAY in data)return fromList(TypedArray, data);\n        return $from.call(TypedArray, data);\n      });\n      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){\n        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);\n      });\n      TypedArray[PROTOTYPE] = TypedArrayPrototype;\n      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;\n    }\n    var $nativeIterator   = TypedArrayPrototype[ITERATOR]\n      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)\n      , $iterator         = $iterators.values;\n    hide(TypedArray, TYPED_CONSTRUCTOR, true);\n    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);\n    hide(TypedArrayPrototype, VIEW, true);\n    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);\n\n    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){\n      dP(TypedArrayPrototype, TAG, {\n        get: function(){ return NAME; }\n      });\n    }\n\n    O[NAME] = TypedArray;\n\n    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);\n\n    $export($export.S, NAME, {\n      BYTES_PER_ELEMENT: BYTES,\n      from: $from,\n      of: $of\n    });\n\n    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);\n\n    $export($export.P, NAME, proto);\n\n    setSpecies(NAME);\n\n    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});\n\n    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);\n\n    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});\n\n    $export($export.P + $export.F * fails(function(){\n      new TypedArray(1).slice();\n    }), NAME, {slice: $slice});\n\n    $export($export.P + $export.F * (fails(function(){\n      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()\n    }) || !fails(function(){\n      TypedArrayPrototype.toLocaleString.call([1, 2]);\n    })), NAME, {toLocaleString: $toLocaleString});\n\n    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;\n    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);\n  };\n} else module.exports = function(){ /* empty */ };","'use strict';\nvar global         = require(38)\n  , DESCRIPTORS    = require(28)\n  , LIBRARY        = require(58)\n  , $typed         = require(113)\n  , hide           = require(40)\n  , redefineAll    = require(86)\n  , fails          = require(34)\n  , anInstance     = require(6)\n  , toInteger      = require(106)\n  , toLength       = require(108)\n  , gOPN           = require(72).f\n  , dP             = require(67).f\n  , arrayFill      = require(9)\n  , setToStringTag = require(92)\n  , ARRAY_BUFFER   = 'ArrayBuffer'\n  , DATA_VIEW      = 'DataView'\n  , PROTOTYPE      = 'prototype'\n  , WRONG_LENGTH   = 'Wrong length!'\n  , WRONG_INDEX    = 'Wrong index!'\n  , $ArrayBuffer   = global[ARRAY_BUFFER]\n  , $DataView      = global[DATA_VIEW]\n  , Math           = global.Math\n  , RangeError     = global.RangeError\n  , Infinity       = global.Infinity\n  , BaseBuffer     = $ArrayBuffer\n  , abs            = Math.abs\n  , pow            = Math.pow\n  , floor          = Math.floor\n  , log            = Math.log\n  , LN2            = Math.LN2\n  , BUFFER         = 'buffer'\n  , BYTE_LENGTH    = 'byteLength'\n  , BYTE_OFFSET    = 'byteOffset'\n  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER\n  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH\n  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;\n\n// IEEE754 conversions based on https://github.com/feross/ieee754\nvar packIEEE754 = function(value, mLen, nBytes){\n  var buffer = Array(nBytes)\n    , eLen   = nBytes * 8 - mLen - 1\n    , eMax   = (1 << eLen) - 1\n    , eBias  = eMax >> 1\n    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0\n    , i      = 0\n    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0\n    , e, m, c;\n  value = abs(value)\n  if(value != value || value === Infinity){\n    m = value != value ? 1 : 0;\n    e = eMax;\n  } else {\n    e = floor(log(value) / LN2);\n    if(value * (c = pow(2, -e)) < 1){\n      e--;\n      c *= 2;\n    }\n    if(e + eBias >= 1){\n      value += rt / c;\n    } else {\n      value += rt * pow(2, 1 - eBias);\n    }\n    if(value * c >= 2){\n      e++;\n      c /= 2;\n    }\n    if(e + eBias >= eMax){\n      m = 0;\n      e = eMax;\n    } else if(e + eBias >= 1){\n      m = (value * c - 1) * pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * pow(2, eBias - 1) * pow(2, mLen);\n      e = 0;\n    }\n  }\n  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);\n  e = e << mLen | m;\n  eLen += mLen;\n  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);\n  buffer[--i] |= s * 128;\n  return buffer;\n};\nvar unpackIEEE754 = function(buffer, mLen, nBytes){\n  var eLen  = nBytes * 8 - mLen - 1\n    , eMax  = (1 << eLen) - 1\n    , eBias = eMax >> 1\n    , nBits = eLen - 7\n    , i     = nBytes - 1\n    , s     = buffer[i--]\n    , e     = s & 127\n    , m;\n  s >>= 7;\n  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);\n  if(e === 0){\n    e = 1 - eBias;\n  } else if(e === eMax){\n    return m ? NaN : s ? -Infinity : Infinity;\n  } else {\n    m = m + pow(2, mLen);\n    e = e - eBias;\n  } return (s ? -1 : 1) * m * pow(2, e - mLen);\n};\n\nvar unpackI32 = function(bytes){\n  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];\n};\nvar packI8 = function(it){\n  return [it & 0xff];\n};\nvar packI16 = function(it){\n  return [it & 0xff, it >> 8 & 0xff];\n};\nvar packI32 = function(it){\n  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];\n};\nvar packF64 = function(it){\n  return packIEEE754(it, 52, 8);\n};\nvar packF32 = function(it){\n  return packIEEE754(it, 23, 4);\n};\n\nvar addGetter = function(C, key, internal){\n  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});\n};\n\nvar get = function(view, bytes, index, isLittleEndian){\n  var numIndex = +index\n    , intIndex = toInteger(numIndex);\n  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b\n    , start = intIndex + view[$OFFSET]\n    , pack  = store.slice(start, start + bytes);\n  return isLittleEndian ? pack : pack.reverse();\n};\nvar set = function(view, bytes, index, conversion, value, isLittleEndian){\n  var numIndex = +index\n    , intIndex = toInteger(numIndex);\n  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b\n    , start = intIndex + view[$OFFSET]\n    , pack  = conversion(+value);\n  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];\n};\n\nvar validateArrayBufferArguments = function(that, length){\n  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);\n  var numberLength = +length\n    , byteLength   = toLength(numberLength);\n  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);\n  return byteLength;\n};\n\nif(!$typed.ABV){\n  $ArrayBuffer = function ArrayBuffer(length){\n    var byteLength = validateArrayBufferArguments(this, length);\n    this._b       = arrayFill.call(Array(byteLength), 0);\n    this[$LENGTH] = byteLength;\n  };\n\n  $DataView = function DataView(buffer, byteOffset, byteLength){\n    anInstance(this, $DataView, DATA_VIEW);\n    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n    var bufferLength = buffer[$LENGTH]\n      , offset       = toInteger(byteOffset);\n    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);\n    this[$BUFFER] = buffer;\n    this[$OFFSET] = offset;\n    this[$LENGTH] = byteLength;\n  };\n\n  if(DESCRIPTORS){\n    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');\n    addGetter($DataView, BUFFER, '_b');\n    addGetter($DataView, BYTE_LENGTH, '_l');\n    addGetter($DataView, BYTE_OFFSET, '_o');\n  }\n\n  redefineAll($DataView[PROTOTYPE], {\n    getInt8: function getInt8(byteOffset){\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset){\n      return get(this, 1, byteOffset)[0];\n    },\n    getInt16: function getInt16(byteOffset /*, littleEndian */){\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset /*, littleEndian */){\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return bytes[1] << 8 | bytes[0];\n    },\n    getInt32: function getInt32(byteOffset /*, littleEndian */){\n      return unpackI32(get(this, 4, byteOffset, arguments[1]));\n    },\n    getUint32: function getUint32(byteOffset /*, littleEndian */){\n      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;\n    },\n    getFloat32: function getFloat32(byteOffset /*, littleEndian */){\n      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);\n    },\n    getFloat64: function getFloat64(byteOffset /*, littleEndian */){\n      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);\n    },\n    setInt8: function setInt8(byteOffset, value){\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setUint8: function setUint8(byteOffset, value){\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setInt16: function setInt16(byteOffset, value /*, littleEndian */){\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setUint16: function setUint16(byteOffset, value /*, littleEndian */){\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setInt32: function setInt32(byteOffset, value /*, littleEndian */){\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setUint32: function setUint32(byteOffset, value /*, littleEndian */){\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){\n      set(this, 4, byteOffset, packF32, value, arguments[2]);\n    },\n    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){\n      set(this, 8, byteOffset, packF64, value, arguments[2]);\n    }\n  });\n} else {\n  if(!fails(function(){\n    new $ArrayBuffer;     // eslint-disable-line no-new\n  }) || !fails(function(){\n    new $ArrayBuffer(.5); // eslint-disable-line no-new\n  })){\n    $ArrayBuffer = function ArrayBuffer(length){\n      return new BaseBuffer(validateArrayBufferArguments(this, length));\n    };\n    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];\n    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){\n      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);\n    };\n    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;\n  }\n  // iOS Safari 7.x bug\n  var view = new $DataView(new $ArrayBuffer(2))\n    , $setInt8 = $DataView[PROTOTYPE].setInt8;\n  view.setInt8(0, 2147483648);\n  view.setInt8(1, 2147483649);\n  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {\n    setInt8: function setInt8(byteOffset, value){\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    },\n    setUint8: function setUint8(byteOffset, value){\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    }\n  }, true);\n}\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\nsetToStringTag($DataView, DATA_VIEW);\nhide($DataView[PROTOTYPE], $typed.VIEW, true);\nexports[ARRAY_BUFFER] = $ArrayBuffer;\nexports[DATA_VIEW] = $DataView;","var global = require(38)\n  , hide   = require(40)\n  , uid    = require(114)\n  , TYPED  = uid('typed_array')\n  , VIEW   = uid('view')\n  , ABV    = !!(global.ArrayBuffer && global.DataView)\n  , CONSTR = ABV\n  , i = 0, l = 9, Typed;\n\nvar TypedArrayConstructors = (\n  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'\n).split(',');\n\nwhile(i < l){\n  if(Typed = global[TypedArrayConstructors[i++]]){\n    hide(Typed.prototype, TYPED, true);\n    hide(Typed.prototype, VIEW, true);\n  } else CONSTR = false;\n}\n\nmodule.exports = {\n  ABV:    ABV,\n  CONSTR: CONSTR,\n  TYPED:  TYPED,\n  VIEW:   VIEW\n};","var id = 0\n  , px = Math.random();\nmodule.exports = function(key){\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};","var global         = require(38)\n  , core           = require(23)\n  , LIBRARY        = require(58)\n  , wksExt         = require(116)\n  , defineProperty = require(67).f;\nmodule.exports = function(name){\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});\n};","exports.f = require(117);","var store      = require(94)('wks')\n  , uid        = require(114)\n  , Symbol     = require(38).Symbol\n  , USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function(name){\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;","var classof   = require(17)\n  , ITERATOR  = require(117)('iterator')\n  , Iterators = require(56);\nmodule.exports = require(23).getIteratorMethod = function(it){\n  if(it != undefined)return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};","// https://github.com/benjamingr/RexExp.escape\nvar $export = require(32)\n  , $re     = require(88)(/[\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});\n","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\nvar $export = require(32);\n\n$export($export.P, 'Array', {copyWithin: require(8)});\n\nrequire(5)('copyWithin');","'use strict';\nvar $export = require(32)\n  , $every  = require(12)(4);\n\n$export($export.P + $export.F * !require(96)([].every, true), 'Array', {\n  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])\n  every: function every(callbackfn /* , thisArg */){\n    return $every(this, callbackfn, arguments[1]);\n  }\n});","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require(32);\n\n$export($export.P, 'Array', {fill: require(9)});\n\nrequire(5)('fill');","'use strict';\nvar $export = require(32)\n  , $filter = require(12)(2);\n\n$export($export.P + $export.F * !require(96)([].filter, true), 'Array', {\n  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])\n  filter: function filter(callbackfn /* , thisArg */){\n    return $filter(this, callbackfn, arguments[1]);\n  }\n});","'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require(32)\n  , $find   = require(12)(6)\n  , KEY     = 'findIndex'\n  , forced  = true;\n// Shouldn't skip holes\nif(KEY in [])Array(1)[KEY](function(){ forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn/*, that = undefined */){\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire(5)(KEY);","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require(32)\n  , $find   = require(12)(5)\n  , KEY     = 'find'\n  , forced  = true;\n// Shouldn't skip holes\nif(KEY in [])Array(1)[KEY](function(){ forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn/*, that = undefined */){\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire(5)(KEY);","'use strict';\nvar $export  = require(32)\n  , $forEach = require(12)(0)\n  , STRICT   = require(96)([].forEach, true);\n\n$export($export.P + $export.F * !STRICT, 'Array', {\n  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])\n  forEach: function forEach(callbackfn /* , thisArg */){\n    return $forEach(this, callbackfn, arguments[1]);\n  }\n});","'use strict';\nvar ctx            = require(25)\n  , $export        = require(32)\n  , toObject       = require(109)\n  , call           = require(51)\n  , isArrayIter    = require(46)\n  , toLength       = require(108)\n  , createProperty = require(24)\n  , getIterFn      = require(118);\n\n$export($export.S + $export.F * !require(54)(function(iter){ Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){\n    var O       = toObject(arrayLike)\n      , C       = typeof this == 'function' ? this : Array\n      , aLen    = arguments.length\n      , mapfn   = aLen > 1 ? arguments[1] : undefined\n      , mapping = mapfn !== undefined\n      , index   = 0\n      , iterFn  = getIterFn(O)\n      , length, result, step, iterator;\n    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){\n      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for(result = new C(length); length > index; index++){\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n","'use strict';\nvar $export       = require(32)\n  , $indexOf      = require(11)(false)\n  , $native       = [].indexOf\n  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require(96)($native)), 'Array', {\n  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])\n  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? $native.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments[1]);\n  }\n});","// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\nvar $export = require(32);\n\n$export($export.S, 'Array', {isArray: require(47)});","'use strict';\nvar addToUnscopables = require(5)\n  , step             = require(55)\n  , Iterators        = require(56)\n  , toIObject        = require(107);\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require(53)(Array, 'Array', function(iterated, kind){\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , kind  = this._k\n    , index = this._i++;\n  if(!O || index >= O.length){\n    this._t = undefined;\n    return step(1);\n  }\n  if(kind == 'keys'  )return step(0, index);\n  if(kind == 'values')return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');","'use strict';\n// 22.1.3.13 Array.prototype.join(separator)\nvar $export   = require(32)\n  , toIObject = require(107)\n  , arrayJoin = [].join;\n\n// fallback for not array-like strings\n$export($export.P + $export.F * (require(45) != Object || !require(96)(arrayJoin)), 'Array', {\n  join: function join(separator){\n    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);\n  }\n});","'use strict';\nvar $export       = require(32)\n  , toIObject     = require(107)\n  , toInteger     = require(106)\n  , toLength      = require(108)\n  , $native       = [].lastIndexOf\n  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require(96)($native)), 'Array', {\n  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])\n  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){\n    // convert -0 to +0\n    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;\n    var O      = toIObject(this)\n      , length = toLength(O.length)\n      , index  = length - 1;\n    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));\n    if(index < 0)index = length + index;\n    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;\n    return -1;\n  }\n});","'use strict';\nvar $export = require(32)\n  , $map    = require(12)(1);\n\n$export($export.P + $export.F * !require(96)([].map, true), 'Array', {\n  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])\n  map: function map(callbackfn /* , thisArg */){\n    return $map(this, callbackfn, arguments[1]);\n  }\n});","'use strict';\nvar $export        = require(32)\n  , createProperty = require(24);\n\n// WebKit Array.of isn't generic\n$export($export.S + $export.F * require(34)(function(){\n  function F(){}\n  return !(Array.of.call(F) instanceof F);\n}), 'Array', {\n  // 22.1.2.3 Array.of( ...items)\n  of: function of(/* ...args */){\n    var index  = 0\n      , aLen   = arguments.length\n      , result = new (typeof this == 'function' ? this : Array)(aLen);\n    while(aLen > index)createProperty(result, index, arguments[index++]);\n    result.length = aLen;\n    return result;\n  }\n});","'use strict';\nvar $export = require(32)\n  , $reduce = require(13);\n\n$export($export.P + $export.F * !require(96)([].reduceRight, true), 'Array', {\n  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])\n  reduceRight: function reduceRight(callbackfn /* , initialValue */){\n    return $reduce(this, callbackfn, arguments.length, arguments[1], true);\n  }\n});","'use strict';\nvar $export = require(32)\n  , $reduce = require(13);\n\n$export($export.P + $export.F * !require(96)([].reduce, true), 'Array', {\n  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])\n  reduce: function reduce(callbackfn /* , initialValue */){\n    return $reduce(this, callbackfn, arguments.length, arguments[1], false);\n  }\n});","'use strict';\nvar $export    = require(32)\n  , html       = require(41)\n  , cof        = require(18)\n  , toIndex    = require(105)\n  , toLength   = require(108)\n  , arraySlice = [].slice;\n\n// fallback for not array-like ES3 strings and DOM objects\n$export($export.P + $export.F * require(34)(function(){\n  if(html)arraySlice.call(html);\n}), 'Array', {\n  slice: function slice(begin, end){\n    var len   = toLength(this.length)\n      , klass = cof(this);\n    end = end === undefined ? len : end;\n    if(klass == 'Array')return arraySlice.call(this, begin, end);\n    var start  = toIndex(begin, len)\n      , upTo   = toIndex(end, len)\n      , size   = toLength(upTo - start)\n      , cloned = Array(size)\n      , i      = 0;\n    for(; i < size; i++)cloned[i] = klass == 'String'\n      ? this.charAt(start + i)\n      : this[start + i];\n    return cloned;\n  }\n});","'use strict';\nvar $export = require(32)\n  , $some   = require(12)(3);\n\n$export($export.P + $export.F * !require(96)([].some, true), 'Array', {\n  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])\n  some: function some(callbackfn /* , thisArg */){\n    return $some(this, callbackfn, arguments[1]);\n  }\n});","'use strict';\nvar $export   = require(32)\n  , aFunction = require(3)\n  , toObject  = require(109)\n  , fails     = require(34)\n  , $sort     = [].sort\n  , test      = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function(){\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function(){\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !require(96)($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn){\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});","require(91)('Array');","// 20.3.3.1 / 15.9.4.4 Date.now()\nvar $export = require(32);\n\n$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});","'use strict';\n// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\nvar $export = require(32)\n  , fails   = require(34)\n  , getTime = Date.prototype.getTime;\n\nvar lz = function(num){\n  return num > 9 ? num : '0' + num;\n};\n\n// PhantomJS / old WebKit has a broken implementations\n$export($export.P + $export.F * (fails(function(){\n  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';\n}) || !fails(function(){\n  new Date(NaN).toISOString();\n})), 'Date', {\n  toISOString: function toISOString(){\n    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');\n    var d = this\n      , y = d.getUTCFullYear()\n      , m = d.getUTCMilliseconds()\n      , s = y < 0 ? '-' : y > 9999 ? '+' : '';\n    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +\n      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +\n      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +\n      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';\n  }\n});","'use strict';\nvar $export     = require(32)\n  , toObject    = require(109)\n  , toPrimitive = require(110);\n\n$export($export.P + $export.F * require(34)(function(){\n  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;\n}), 'Date', {\n  toJSON: function toJSON(key){\n    var O  = toObject(this)\n      , pv = toPrimitive(O);\n    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();\n  }\n});","var TO_PRIMITIVE = require(117)('toPrimitive')\n  , proto        = Date.prototype;\n\nif(!(TO_PRIMITIVE in proto))require(40)(proto, TO_PRIMITIVE, require(26));","var DateProto    = Date.prototype\n  , INVALID_DATE = 'Invalid Date'\n  , TO_STRING    = 'toString'\n  , $toString    = DateProto[TO_STRING]\n  , getTime      = DateProto.getTime;\nif(new Date(NaN) + '' != INVALID_DATE){\n  require(87)(DateProto, TO_STRING, function toString(){\n    var value = getTime.call(this);\n    return value === value ? $toString.call(this) : INVALID_DATE;\n  });\n}","// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)\nvar $export = require(32);\n\n$export($export.P, 'Function', {bind: require(16)});","'use strict';\nvar isObject       = require(49)\n  , getPrototypeOf = require(74)\n  , HAS_INSTANCE   = require(117)('hasInstance')\n  , FunctionProto  = Function.prototype;\n// 19.2.3.6 Function.prototype[@@hasInstance](V)\nif(!(HAS_INSTANCE in FunctionProto))require(67).f(FunctionProto, HAS_INSTANCE, {value: function(O){\n  if(typeof this != 'function' || !isObject(O))return false;\n  if(!isObject(this.prototype))return O instanceof this;\n  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:\n  while(O = getPrototypeOf(O))if(this.prototype === O)return true;\n  return false;\n}});","var dP         = require(67).f\n  , createDesc = require(85)\n  , has        = require(39)\n  , FProto     = Function.prototype\n  , nameRE     = /^\\s*function ([^ (]*)/\n  , NAME       = 'name';\n\nvar isExtensible = Object.isExtensible || function(){\n  return true;\n};\n\n// 19.2.4.2 name\nNAME in FProto || require(28) && dP(FProto, NAME, {\n  configurable: true,\n  get: function(){\n    try {\n      var that = this\n        , name = ('' + that).match(nameRE)[1];\n      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));\n      return name;\n    } catch(e){\n      return '';\n    }\n  }\n});","'use strict';\nvar strong = require(19);\n\n// 23.1 Map Objects\nmodule.exports = require(22)('Map', function(get){\n  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.1.3.6 Map.prototype.get(key)\n  get: function get(key){\n    var entry = strong.getEntry(this, key);\n    return entry && entry.v;\n  },\n  // 23.1.3.9 Map.prototype.set(key, value)\n  set: function set(key, value){\n    return strong.def(this, key === 0 ? 0 : key, value);\n  }\n}, strong, true);","// 20.2.2.3 Math.acosh(x)\nvar $export = require(32)\n  , log1p   = require(60)\n  , sqrt    = Math.sqrt\n  , $acosh  = Math.acosh;\n\n$export($export.S + $export.F * !($acosh\n  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509\n  && Math.floor($acosh(Number.MAX_VALUE)) == 710\n  // Tor Browser bug: Math.acosh(Infinity) -> NaN \n  && $acosh(Infinity) == Infinity\n), 'Math', {\n  acosh: function acosh(x){\n    return (x = +x) < 1 ? NaN : x > 94906265.62425156\n      ? Math.log(x) + Math.LN2\n      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));\n  }\n});","// 20.2.2.5 Math.asinh(x)\nvar $export = require(32)\n  , $asinh  = Math.asinh;\n\nfunction asinh(x){\n  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));\n}\n\n// Tor Browser bug: Math.asinh(0) -> -0 \n$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});","// 20.2.2.7 Math.atanh(x)\nvar $export = require(32)\n  , $atanh  = Math.atanh;\n\n// Tor Browser bug: Math.atanh(-0) -> 0 \n$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {\n  atanh: function atanh(x){\n    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;\n  }\n});","// 20.2.2.9 Math.cbrt(x)\nvar $export = require(32)\n  , sign    = require(61);\n\n$export($export.S, 'Math', {\n  cbrt: function cbrt(x){\n    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);\n  }\n});","// 20.2.2.11 Math.clz32(x)\nvar $export = require(32);\n\n$export($export.S, 'Math', {\n  clz32: function clz32(x){\n    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;\n  }\n});","// 20.2.2.12 Math.cosh(x)\nvar $export = require(32)\n  , exp     = Math.exp;\n\n$export($export.S, 'Math', {\n  cosh: function cosh(x){\n    return (exp(x = +x) + exp(-x)) / 2;\n  }\n});","// 20.2.2.14 Math.expm1(x)\nvar $export = require(32)\n  , $expm1  = require(59);\n\n$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});","// 20.2.2.16 Math.fround(x)\nvar $export   = require(32)\n  , sign      = require(61)\n  , pow       = Math.pow\n  , EPSILON   = pow(2, -52)\n  , EPSILON32 = pow(2, -23)\n  , MAX32     = pow(2, 127) * (2 - EPSILON32)\n  , MIN32     = pow(2, -126);\n\nvar roundTiesToEven = function(n){\n  return n + 1 / EPSILON - 1 / EPSILON;\n};\n\n\n$export($export.S, 'Math', {\n  fround: function fround(x){\n    var $abs  = Math.abs(x)\n      , $sign = sign(x)\n      , a, result;\n    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n    a = (1 + EPSILON32 / EPSILON) * $abs;\n    result = a - (a - $abs);\n    if(result > MAX32 || result != result)return $sign * Infinity;\n    return $sign * result;\n  }\n});","// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\nvar $export = require(32)\n  , abs     = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars\n    var sum  = 0\n      , i    = 0\n      , aLen = arguments.length\n      , larg = 0\n      , arg, div;\n    while(i < aLen){\n      arg = abs(arguments[i++]);\n      if(larg < arg){\n        div  = larg / arg;\n        sum  = sum * div * div + 1;\n        larg = arg;\n      } else if(arg > 0){\n        div  = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});","// 20.2.2.18 Math.imul(x, y)\nvar $export = require(32)\n  , $imul   = Math.imul;\n\n// some WebKit versions fails with big numbers, some has wrong arity\n$export($export.S + $export.F * require(34)(function(){\n  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;\n}), 'Math', {\n  imul: function imul(x, y){\n    var UINT16 = 0xffff\n      , xn = +x\n      , yn = +y\n      , xl = UINT16 & xn\n      , yl = UINT16 & yn;\n    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);\n  }\n});","// 20.2.2.21 Math.log10(x)\nvar $export = require(32);\n\n$export($export.S, 'Math', {\n  log10: function log10(x){\n    return Math.log(x) / Math.LN10;\n  }\n});","// 20.2.2.20 Math.log1p(x)\nvar $export = require(32);\n\n$export($export.S, 'Math', {log1p: require(60)});","// 20.2.2.22 Math.log2(x)\nvar $export = require(32);\n\n$export($export.S, 'Math', {\n  log2: function log2(x){\n    return Math.log(x) / Math.LN2;\n  }\n});","// 20.2.2.28 Math.sign(x)\nvar $export = require(32);\n\n$export($export.S, 'Math', {sign: require(61)});","// 20.2.2.30 Math.sinh(x)\nvar $export = require(32)\n  , expm1   = require(59)\n  , exp     = Math.exp;\n\n// V8 near Chromium 38 has a problem with very small numbers\n$export($export.S + $export.F * require(34)(function(){\n  return !Math.sinh(-2e-17) != -2e-17;\n}), 'Math', {\n  sinh: function sinh(x){\n    return Math.abs(x = +x) < 1\n      ? (expm1(x) - expm1(-x)) / 2\n      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);\n  }\n});","// 20.2.2.33 Math.tanh(x)\nvar $export = require(32)\n  , expm1   = require(59)\n  , exp     = Math.exp;\n\n$export($export.S, 'Math', {\n  tanh: function tanh(x){\n    var a = expm1(x = +x)\n      , b = expm1(-x);\n    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));\n  }\n});","// 20.2.2.34 Math.trunc(x)\nvar $export = require(32);\n\n$export($export.S, 'Math', {\n  trunc: function trunc(it){\n    return (it > 0 ? Math.floor : Math.ceil)(it);\n  }\n});","'use strict';\nvar global            = require(38)\n  , has               = require(39)\n  , cof               = require(18)\n  , inheritIfRequired = require(43)\n  , toPrimitive       = require(110)\n  , fails             = require(34)\n  , gOPN              = require(72).f\n  , gOPD              = require(70).f\n  , dP                = require(67).f\n  , $trim             = require(102).trim\n  , NUMBER            = 'Number'\n  , $Number           = global[NUMBER]\n  , Base              = $Number\n  , proto             = $Number.prototype\n  // Opera ~12 has broken Object#toString\n  , BROKEN_COF        = cof(require(66)(proto)) == NUMBER\n  , TRIM              = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function(argument){\n  var it = toPrimitive(argument, false);\n  if(typeof it == 'string' && it.length > 2){\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0)\n      , third, radix, maxCode;\n    if(first === 43 || first === 45){\n      third = it.charCodeAt(2);\n      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if(first === 48){\n      switch(it.charCodeAt(1)){\n        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default : return +it;\n      }\n      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if(code < 48 || code > maxCode)return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){\n  $Number = function Number(value){\n    var it = arguments.length < 1 ? 0 : value\n      , that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for(var keys = require(28) ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++){\n    if(has(Base, key = keys[j]) && !has($Number, key)){\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  require(87)(global, NUMBER, $Number);\n}","// 20.1.2.1 Number.EPSILON\nvar $export = require(32);\n\n$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});","// 20.1.2.2 Number.isFinite(number)\nvar $export   = require(32)\n  , _isFinite = require(38).isFinite;\n\n$export($export.S, 'Number', {\n  isFinite: function isFinite(it){\n    return typeof it == 'number' && _isFinite(it);\n  }\n});","// 20.1.2.3 Number.isInteger(number)\nvar $export = require(32);\n\n$export($export.S, 'Number', {isInteger: require(48)});","// 20.1.2.4 Number.isNaN(number)\nvar $export = require(32);\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number){\n    return number != number;\n  }\n});","// 20.1.2.5 Number.isSafeInteger(number)\nvar $export   = require(32)\n  , isInteger = require(48)\n  , abs       = Math.abs;\n\n$export($export.S, 'Number', {\n  isSafeInteger: function isSafeInteger(number){\n    return isInteger(number) && abs(number) <= 0x1fffffffffffff;\n  }\n});","// 20.1.2.6 Number.MAX_SAFE_INTEGER\nvar $export = require(32);\n\n$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});","// 20.1.2.10 Number.MIN_SAFE_INTEGER\nvar $export = require(32);\n\n$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});","var $export     = require(32)\n  , $parseFloat = require(81);\n// 20.1.2.12 Number.parseFloat(string)\n$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});","var $export   = require(32)\n  , $parseInt = require(82);\n// 20.1.2.13 Number.parseInt(string, radix)\n$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});","'use strict';\nvar $export      = require(32)\n  , toInteger    = require(106)\n  , aNumberValue = require(4)\n  , repeat       = require(101)\n  , $toFixed     = 1..toFixed\n  , floor        = Math.floor\n  , data         = [0, 0, 0, 0, 0, 0]\n  , ERROR        = 'Number.toFixed: incorrect invocation!'\n  , ZERO         = '0';\n\nvar multiply = function(n, c){\n  var i  = -1\n    , c2 = c;\n  while(++i < 6){\n    c2 += n * data[i];\n    data[i] = c2 % 1e7;\n    c2 = floor(c2 / 1e7);\n  }\n};\nvar divide = function(n){\n  var i = 6\n    , c = 0;\n  while(--i >= 0){\n    c += data[i];\n    data[i] = floor(c / n);\n    c = (c % n) * 1e7;\n  }\n};\nvar numToString = function(){\n  var i = 6\n    , s = '';\n  while(--i >= 0){\n    if(s !== '' || i === 0 || data[i] !== 0){\n      var t = String(data[i]);\n      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;\n    }\n  } return s;\n};\nvar pow = function(x, n, acc){\n  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n};\nvar log = function(x){\n  var n  = 0\n    , x2 = x;\n  while(x2 >= 4096){\n    n += 12;\n    x2 /= 4096;\n  }\n  while(x2 >= 2){\n    n  += 1;\n    x2 /= 2;\n  } return n;\n};\n\n$export($export.P + $export.F * (!!$toFixed && (\n  0.00008.toFixed(3) !== '0.000' ||\n  0.9.toFixed(0) !== '1' ||\n  1.255.toFixed(2) !== '1.25' ||\n  1000000000000000128..toFixed(0) !== '1000000000000000128'\n) || !require(34)(function(){\n  // V8 ~ Android 4.3-\n  $toFixed.call({});\n})), 'Number', {\n  toFixed: function toFixed(fractionDigits){\n    var x = aNumberValue(this, ERROR)\n      , f = toInteger(fractionDigits)\n      , s = ''\n      , m = ZERO\n      , e, z, j, k;\n    if(f < 0 || f > 20)throw RangeError(ERROR);\n    if(x != x)return 'NaN';\n    if(x <= -1e21 || x >= 1e21)return String(x);\n    if(x < 0){\n      s = '-';\n      x = -x;\n    }\n    if(x > 1e-21){\n      e = log(x * pow(2, 69, 1)) - 69;\n      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);\n      z *= 0x10000000000000;\n      e = 52 - e;\n      if(e > 0){\n        multiply(0, z);\n        j = f;\n        while(j >= 7){\n          multiply(1e7, 0);\n          j -= 7;\n        }\n        multiply(pow(10, j, 1), 0);\n        j = e - 1;\n        while(j >= 23){\n          divide(1 << 23);\n          j -= 23;\n        }\n        divide(1 << j);\n        multiply(1, 1);\n        divide(2);\n        m = numToString();\n      } else {\n        multiply(0, z);\n        multiply(1 << -e, 0);\n        m = numToString() + repeat.call(ZERO, f);\n      }\n    }\n    if(f > 0){\n      k = m.length;\n      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));\n    } else {\n      m = s + m;\n    } return m;\n  }\n});","'use strict';\nvar $export      = require(32)\n  , $fails       = require(34)\n  , aNumberValue = require(4)\n  , $toPrecision = 1..toPrecision;\n\n$export($export.P + $export.F * ($fails(function(){\n  // IE7-\n  return $toPrecision.call(1, undefined) !== '1';\n}) || !$fails(function(){\n  // V8 ~ Android 4.3-\n  $toPrecision.call({});\n})), 'Number', {\n  toPrecision: function toPrecision(precision){\n    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');\n    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); \n  }\n});","// 19.1.3.1 Object.assign(target, source)\nvar $export = require(32);\n\n$export($export.S + $export.F, 'Object', {assign: require(65)});","var $export = require(32)\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', {create: require(66)});","var $export = require(32);\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n$export($export.S + $export.F * !require(28), 'Object', {defineProperties: require(68)});","var $export = require(32);\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require(28), 'Object', {defineProperty: require(67).f});","// 19.1.2.5 Object.freeze(O)\nvar isObject = require(49)\n  , meta     = require(62).onFreeze;\n\nrequire(78)('freeze', function($freeze){\n  return function freeze(it){\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});","// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject                 = require(107)\n  , $getOwnPropertyDescriptor = require(70).f;\n\nrequire(78)('getOwnPropertyDescriptor', function(){\n  return function getOwnPropertyDescriptor(it, key){\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});","// 19.1.2.7 Object.getOwnPropertyNames(O)\nrequire(78)('getOwnPropertyNames', function(){\n  return require(71).f;\n});","// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject        = require(109)\n  , $getPrototypeOf = require(74);\n\nrequire(78)('getPrototypeOf', function(){\n  return function getPrototypeOf(it){\n    return $getPrototypeOf(toObject(it));\n  };\n});","// 19.1.2.11 Object.isExtensible(O)\nvar isObject = require(49);\n\nrequire(78)('isExtensible', function($isExtensible){\n  return function isExtensible(it){\n    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;\n  };\n});","// 19.1.2.12 Object.isFrozen(O)\nvar isObject = require(49);\n\nrequire(78)('isFrozen', function($isFrozen){\n  return function isFrozen(it){\n    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;\n  };\n});","// 19.1.2.13 Object.isSealed(O)\nvar isObject = require(49);\n\nrequire(78)('isSealed', function($isSealed){\n  return function isSealed(it){\n    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;\n  };\n});","// 19.1.3.10 Object.is(value1, value2)\nvar $export = require(32);\n$export($export.S, 'Object', {is: require(89)});","// 19.1.2.14 Object.keys(O)\nvar toObject = require(109)\n  , $keys    = require(76);\n\nrequire(78)('keys', function(){\n  return function keys(it){\n    return $keys(toObject(it));\n  };\n});","// 19.1.2.15 Object.preventExtensions(O)\nvar isObject = require(49)\n  , meta     = require(62).onFreeze;\n\nrequire(78)('preventExtensions', function($preventExtensions){\n  return function preventExtensions(it){\n    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;\n  };\n});","// 19.1.2.17 Object.seal(O)\nvar isObject = require(49)\n  , meta     = require(62).onFreeze;\n\nrequire(78)('seal', function($seal){\n  return function seal(it){\n    return $seal && isObject(it) ? $seal(meta(it)) : it;\n  };\n});","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require(32);\n$export($export.S, 'Object', {setPrototypeOf: require(90).set});","'use strict';\n// 19.1.3.6 Object.prototype.toString()\nvar classof = require(17)\n  , test    = {};\ntest[require(117)('toStringTag')] = 'z';\nif(test + '' != '[object z]'){\n  require(87)(Object.prototype, 'toString', function toString(){\n    return '[object ' + classof(this) + ']';\n  }, true);\n}","var $export     = require(32)\n  , $parseFloat = require(81);\n// 18.2.4 parseFloat(string)\n$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});","var $export   = require(32)\n  , $parseInt = require(82);\n// 18.2.5 parseInt(string, radix)\n$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});","'use strict';\nvar LIBRARY            = require(58)\n  , global             = require(38)\n  , ctx                = require(25)\n  , classof            = require(17)\n  , $export            = require(32)\n  , isObject           = require(49)\n  , aFunction          = require(3)\n  , anInstance         = require(6)\n  , forOf              = require(37)\n  , speciesConstructor = require(95)\n  , task               = require(104).set\n  , microtask          = require(64)()\n  , PROMISE            = 'Promise'\n  , TypeError          = global.TypeError\n  , process            = global.process\n  , $Promise           = global[PROMISE]\n  , process            = global.process\n  , isNode             = classof(process) == 'process'\n  , empty              = function(){ /* empty */ }\n  , Internal, GenericPromiseCapability, Wrapper;\n\nvar USE_NATIVE = !!function(){\n  try {\n    // correct subclassing with @@species support\n    var promise     = $Promise.resolve(1)\n      , FakePromise = (promise.constructor = {})[require(117)('species')] = function(exec){ exec(empty, empty); };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;\n  } catch(e){ /* empty */ }\n}();\n\n// helpers\nvar sameConstructor = function(a, b){\n  // with library wrapper special case\n  return a === b || a === $Promise && b === Wrapper;\n};\nvar isThenable = function(it){\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar newPromiseCapability = function(C){\n  return sameConstructor($Promise, C)\n    ? new PromiseCapability(C)\n    : new GenericPromiseCapability(C);\n};\nvar PromiseCapability = GenericPromiseCapability = function(C){\n  var resolve, reject;\n  this.promise = new C(function($$resolve, $$reject){\n    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject  = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject  = aFunction(reject);\n};\nvar perform = function(exec){\n  try {\n    exec();\n  } catch(e){\n    return {error: e};\n  }\n};\nvar notify = function(promise, isReject){\n  if(promise._n)return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function(){\n    var value = promise._v\n      , ok    = promise._s == 1\n      , i     = 0;\n    var run = function(reaction){\n      var handler = ok ? reaction.ok : reaction.fail\n        , resolve = reaction.resolve\n        , reject  = reaction.reject\n        , domain  = reaction.domain\n        , result, then;\n      try {\n        if(handler){\n          if(!ok){\n            if(promise._h == 2)onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if(handler === true)result = value;\n          else {\n            if(domain)domain.enter();\n            result = handler(value);\n            if(domain)domain.exit();\n          }\n          if(result === reaction.promise){\n            reject(TypeError('Promise-chain cycle'));\n          } else if(then = isThenable(result)){\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch(e){\n        reject(e);\n      }\n    };\n    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if(isReject && !promise._h)onUnhandled(promise);\n  });\n};\nvar onUnhandled = function(promise){\n  task.call(global, function(){\n    var value = promise._v\n      , abrupt, handler, console;\n    if(isUnhandled(promise)){\n      abrupt = perform(function(){\n        if(isNode){\n          process.emit('unhandledRejection', value, promise);\n        } else if(handler = global.onunhandledrejection){\n          handler({promise: promise, reason: value});\n        } else if((console = global.console) && console.error){\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if(abrupt)throw abrupt.error;\n  });\n};\nvar isUnhandled = function(promise){\n  if(promise._h == 1)return false;\n  var chain = promise._a || promise._c\n    , i     = 0\n    , reaction;\n  while(chain.length > i){\n    reaction = chain[i++];\n    if(reaction.fail || !isUnhandled(reaction.promise))return false;\n  } return true;\n};\nvar onHandleUnhandled = function(promise){\n  task.call(global, function(){\n    var handler;\n    if(isNode){\n      process.emit('rejectionHandled', promise);\n    } else if(handler = global.onrejectionhandled){\n      handler({promise: promise, reason: promise._v});\n    }\n  });\n};\nvar $reject = function(value){\n  var promise = this;\n  if(promise._d)return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if(!promise._a)promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function(value){\n  var promise = this\n    , then;\n  if(promise._d)return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if(promise === value)throw TypeError(\"Promise can't be resolved itself\");\n    if(then = isThenable(value)){\n      microtask(function(){\n        var wrapper = {_w: promise, _d: false}; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch(e){\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch(e){\n    $reject.call({_w: promise, _d: false}, e); // wrap\n  }\n};\n\n// constructor polyfill\nif(!USE_NATIVE){\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor){\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch(err){\n      $reject.call(this, err);\n    }\n  };\n  Internal = function Promise(executor){\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require(86)($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected){\n      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail   = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if(this._a)this._a.push(reaction);\n      if(this._s)notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function(onRejected){\n      return this.then(undefined, onRejected);\n    }\n  });\n  PromiseCapability = function(){\n    var promise  = new Internal;\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject  = ctx($reject, promise, 1);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});\nrequire(92)($Promise, PROMISE);\nrequire(91)(PROMISE);\nWrapper = require(23)[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r){\n    var capability = newPromiseCapability(this)\n      , $$reject   = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x){\n    // instanceof instead of internal slot check because we should fix it without replacement native Promise core\n    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;\n    var capability = newPromiseCapability(this)\n      , $$resolve  = capability.resolve;\n    $$resolve(x);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require(54)(function(iter){\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable){\n    var C          = this\n      , capability = newPromiseCapability(C)\n      , resolve    = capability.resolve\n      , reject     = capability.reject;\n    var abrupt = perform(function(){\n      var values    = []\n        , index     = 0\n        , remaining = 1;\n      forOf(iterable, false, function(promise){\n        var $index        = index++\n          , alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function(value){\n          if(alreadyCalled)return;\n          alreadyCalled  = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable){\n    var C          = this\n      , capability = newPromiseCapability(C)\n      , reject     = capability.reject;\n    var abrupt = perform(function(){\n      forOf(iterable, false, function(promise){\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  }\n});","// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)\nvar $export   = require(32)\n  , aFunction = require(3)\n  , anObject  = require(7)\n  , rApply    = (require(38).Reflect || {}).apply\n  , fApply    = Function.apply;\n// MS Edge argumentsList argument is optional\n$export($export.S + $export.F * !require(34)(function(){\n  rApply(function(){});\n}), 'Reflect', {\n  apply: function apply(target, thisArgument, argumentsList){\n    var T = aFunction(target)\n      , L = anObject(argumentsList);\n    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);\n  }\n});","// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export    = require(32)\n  , create     = require(66)\n  , aFunction  = require(3)\n  , anObject   = require(7)\n  , isObject   = require(49)\n  , fails      = require(34)\n  , bind       = require(16)\n  , rConstruct = (require(38).Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function(){\n  function F(){}\n  return !(rConstruct(function(){}, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function(){\n  rConstruct(function(){});\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /*, newTarget*/){\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if(ARGS_BUG && !NEW_TARGET_BUG)return rConstruct(Target, args, newTarget);\n    if(Target == newTarget){\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch(args.length){\n        case 0: return new Target;\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args));\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto    = newTarget.prototype\n      , instance = create(isObject(proto) ? proto : Object.prototype)\n      , result   = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});","// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)\nvar dP          = require(67)\n  , $export     = require(32)\n  , anObject    = require(7)\n  , toPrimitive = require(110);\n\n// MS Edge has broken Reflect.defineProperty - throwing instead of returning false\n$export($export.S + $export.F * require(34)(function(){\n  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});\n}), 'Reflect', {\n  defineProperty: function defineProperty(target, propertyKey, attributes){\n    anObject(target);\n    propertyKey = toPrimitive(propertyKey, true);\n    anObject(attributes);\n    try {\n      dP.f(target, propertyKey, attributes);\n      return true;\n    } catch(e){\n      return false;\n    }\n  }\n});","// 26.1.4 Reflect.deleteProperty(target, propertyKey)\nvar $export  = require(32)\n  , gOPD     = require(70).f\n  , anObject = require(7);\n\n$export($export.S, 'Reflect', {\n  deleteProperty: function deleteProperty(target, propertyKey){\n    var desc = gOPD(anObject(target), propertyKey);\n    return desc && !desc.configurable ? false : delete target[propertyKey];\n  }\n});","'use strict';\n// 26.1.5 Reflect.enumerate(target)\nvar $export  = require(32)\n  , anObject = require(7);\nvar Enumerate = function(iterated){\n  this._t = anObject(iterated); // target\n  this._i = 0;                  // next index\n  var keys = this._k = []       // keys\n    , key;\n  for(key in iterated)keys.push(key);\n};\nrequire(52)(Enumerate, 'Object', function(){\n  var that = this\n    , keys = that._k\n    , key;\n  do {\n    if(that._i >= keys.length)return {value: undefined, done: true};\n  } while(!((key = keys[that._i++]) in that._t));\n  return {value: key, done: false};\n});\n\n$export($export.S, 'Reflect', {\n  enumerate: function enumerate(target){\n    return new Enumerate(target);\n  }\n});","// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)\nvar gOPD     = require(70)\n  , $export  = require(32)\n  , anObject = require(7);\n\n$export($export.S, 'Reflect', {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){\n    return gOPD.f(anObject(target), propertyKey);\n  }\n});","// 26.1.8 Reflect.getPrototypeOf(target)\nvar $export  = require(32)\n  , getProto = require(74)\n  , anObject = require(7);\n\n$export($export.S, 'Reflect', {\n  getPrototypeOf: function getPrototypeOf(target){\n    return getProto(anObject(target));\n  }\n});","// 26.1.6 Reflect.get(target, propertyKey [, receiver])\nvar gOPD           = require(70)\n  , getPrototypeOf = require(74)\n  , has            = require(39)\n  , $export        = require(32)\n  , isObject       = require(49)\n  , anObject       = require(7);\n\nfunction get(target, propertyKey/*, receiver*/){\n  var receiver = arguments.length < 3 ? target : arguments[2]\n    , desc, proto;\n  if(anObject(target) === receiver)return target[propertyKey];\n  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')\n    ? desc.value\n    : desc.get !== undefined\n      ? desc.get.call(receiver)\n      : undefined;\n  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);\n}\n\n$export($export.S, 'Reflect', {get: get});","// 26.1.9 Reflect.has(target, propertyKey)\nvar $export = require(32);\n\n$export($export.S, 'Reflect', {\n  has: function has(target, propertyKey){\n    return propertyKey in target;\n  }\n});","// 26.1.10 Reflect.isExtensible(target)\nvar $export       = require(32)\n  , anObject      = require(7)\n  , $isExtensible = Object.isExtensible;\n\n$export($export.S, 'Reflect', {\n  isExtensible: function isExtensible(target){\n    anObject(target);\n    return $isExtensible ? $isExtensible(target) : true;\n  }\n});","// 26.1.11 Reflect.ownKeys(target)\nvar $export = require(32);\n\n$export($export.S, 'Reflect', {ownKeys: require(80)});","// 26.1.12 Reflect.preventExtensions(target)\nvar $export            = require(32)\n  , anObject           = require(7)\n  , $preventExtensions = Object.preventExtensions;\n\n$export($export.S, 'Reflect', {\n  preventExtensions: function preventExtensions(target){\n    anObject(target);\n    try {\n      if($preventExtensions)$preventExtensions(target);\n      return true;\n    } catch(e){\n      return false;\n    }\n  }\n});","// 26.1.14 Reflect.setPrototypeOf(target, proto)\nvar $export  = require(32)\n  , setProto = require(90);\n\nif(setProto)$export($export.S, 'Reflect', {\n  setPrototypeOf: function setPrototypeOf(target, proto){\n    setProto.check(target, proto);\n    try {\n      setProto.set(target, proto);\n      return true;\n    } catch(e){\n      return false;\n    }\n  }\n});","// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])\nvar dP             = require(67)\n  , gOPD           = require(70)\n  , getPrototypeOf = require(74)\n  , has            = require(39)\n  , $export        = require(32)\n  , createDesc     = require(85)\n  , anObject       = require(7)\n  , isObject       = require(49);\n\nfunction set(target, propertyKey, V/*, receiver*/){\n  var receiver = arguments.length < 4 ? target : arguments[3]\n    , ownDesc  = gOPD.f(anObject(target), propertyKey)\n    , existingDescriptor, proto;\n  if(!ownDesc){\n    if(isObject(proto = getPrototypeOf(target))){\n      return set(proto, propertyKey, V, receiver);\n    }\n    ownDesc = createDesc(0);\n  }\n  if(has(ownDesc, 'value')){\n    if(ownDesc.writable === false || !isObject(receiver))return false;\n    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);\n    existingDescriptor.value = V;\n    dP.f(receiver, propertyKey, existingDescriptor);\n    return true;\n  }\n  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);\n}\n\n$export($export.S, 'Reflect', {set: set});","var global            = require(38)\n  , inheritIfRequired = require(43)\n  , dP                = require(67).f\n  , gOPN              = require(72).f\n  , isRegExp          = require(50)\n  , $flags            = require(36)\n  , $RegExp           = global.RegExp\n  , Base              = $RegExp\n  , proto             = $RegExp.prototype\n  , re1               = /a/g\n  , re2               = /a/g\n  // \"new\" creates a new object, old webkit buggy here\n  , CORRECT_NEW       = new $RegExp(re1) !== re1;\n\nif(require(28) && (!CORRECT_NEW || require(34)(function(){\n  re2[require(117)('match')] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))){\n  $RegExp = function RegExp(p, f){\n    var tiRE = this instanceof $RegExp\n      , piRE = isRegExp(p)\n      , fiU  = f === undefined;\n    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p\n      : inheritIfRequired(CORRECT_NEW\n        ? new Base(piRE && !fiU ? p.source : p, f)\n        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)\n      , tiRE ? this : proto, $RegExp);\n  };\n  var proxy = function(key){\n    key in $RegExp || dP($RegExp, key, {\n      configurable: true,\n      get: function(){ return Base[key]; },\n      set: function(it){ Base[key] = it; }\n    });\n  };\n  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n  require(87)(global, 'RegExp', $RegExp);\n}\n\nrequire(91)('RegExp');","// 21.2.5.3 get RegExp.prototype.flags()\nif(require(28) && /./g.flags != 'g')require(67).f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require(36)\n});","// @@match logic\nrequire(35)('match', 1, function(defined, MATCH, $match){\n  // 21.1.3.11 String.prototype.match(regexp)\n  return [function match(regexp){\n    'use strict';\n    var O  = defined(this)\n      , fn = regexp == undefined ? undefined : regexp[MATCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n  }, $match];\n});","// @@replace logic\nrequire(35)('replace', 2, function(defined, REPLACE, $replace){\n  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)\n  return [function replace(searchValue, replaceValue){\n    'use strict';\n    var O  = defined(this)\n      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n    return fn !== undefined\n      ? fn.call(searchValue, O, replaceValue)\n      : $replace.call(String(O), searchValue, replaceValue);\n  }, $replace];\n});","// @@search logic\nrequire(35)('search', 1, function(defined, SEARCH, $search){\n  // 21.1.3.15 String.prototype.search(regexp)\n  return [function search(regexp){\n    'use strict';\n    var O  = defined(this)\n      , fn = regexp == undefined ? undefined : regexp[SEARCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n  }, $search];\n});","// @@split logic\nrequire(35)('split', 2, function(defined, SPLIT, $split){\n  'use strict';\n  var isRegExp   = require(50)\n    , _split     = $split\n    , $push      = [].push\n    , $SPLIT     = 'split'\n    , LENGTH     = 'length'\n    , LAST_INDEX = 'lastIndex';\n  if(\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ){\n    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group\n    // based on es5-shim implementation, need to rework it\n    $split = function(separator, limit){\n      var string = String(this);\n      if(separator === undefined && limit === 0)return [];\n      // If `separator` is not a regex, use native split\n      if(!isRegExp(separator))return _split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var separator2, match, lastIndex, lastLength, i;\n      // Doesn't need flags gy, but they don't hurt\n      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\\\s)', flags);\n      while(match = separatorCopy.exec(string)){\n        // `separatorCopy.lastIndex` is not reliable cross-browser\n        lastIndex = match.index + match[0][LENGTH];\n        if(lastIndex > lastLastIndex){\n          output.push(string.slice(lastLastIndex, match.index));\n          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG\n          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){\n            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;\n          });\n          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if(output[LENGTH] >= splitLimit)break;\n        }\n        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if(lastLastIndex === string[LENGTH]){\n        if(lastLength || !separatorCopy.test(''))output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){\n    $split = function(separator, limit){\n      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);\n    };\n  }\n  // 21.1.3.17 String.prototype.split(separator, limit)\n  return [function split(separator, limit){\n    var O  = defined(this)\n      , fn = separator == undefined ? undefined : separator[SPLIT];\n    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);\n  }, $split];\n});","'use strict';\nrequire(214);\nvar anObject    = require(7)\n  , $flags      = require(36)\n  , DESCRIPTORS = require(28)\n  , TO_STRING   = 'toString'\n  , $toString   = /./[TO_STRING];\n\nvar define = function(fn){\n  require(87)(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif(require(34)(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){\n  define(function toString(){\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if($toString.name != TO_STRING){\n  define(function toString(){\n    return $toString.call(this);\n  });\n}","'use strict';\nvar strong = require(19);\n\n// 23.2 Set Objects\nmodule.exports = require(22)('Set', function(get){\n  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.2.3.1 Set.prototype.add(value)\n  add: function add(value){\n    return strong.def(this, value = value === 0 ? 0 : value, value);\n  }\n}, strong);","'use strict';\n// B.2.3.2 String.prototype.anchor(name)\nrequire(99)('anchor', function(createHTML){\n  return function anchor(name){\n    return createHTML(this, 'a', 'name', name);\n  }\n});","'use strict';\n// B.2.3.3 String.prototype.big()\nrequire(99)('big', function(createHTML){\n  return function big(){\n    return createHTML(this, 'big', '', '');\n  }\n});","'use strict';\n// B.2.3.4 String.prototype.blink()\nrequire(99)('blink', function(createHTML){\n  return function blink(){\n    return createHTML(this, 'blink', '', '');\n  }\n});","'use strict';\n// B.2.3.5 String.prototype.bold()\nrequire(99)('bold', function(createHTML){\n  return function bold(){\n    return createHTML(this, 'b', '', '');\n  }\n});","'use strict';\nvar $export = require(32)\n  , $at     = require(97)(false);\n$export($export.P, 'String', {\n  // 21.1.3.3 String.prototype.codePointAt(pos)\n  codePointAt: function codePointAt(pos){\n    return $at(this, pos);\n  }\n});","// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])\n'use strict';\nvar $export   = require(32)\n  , toLength  = require(108)\n  , context   = require(98)\n  , ENDS_WITH = 'endsWith'\n  , $endsWith = ''[ENDS_WITH];\n\n$export($export.P + $export.F * require(33)(ENDS_WITH), 'String', {\n  endsWith: function endsWith(searchString /*, endPosition = @length */){\n    var that = context(this, searchString, ENDS_WITH)\n      , endPosition = arguments.length > 1 ? arguments[1] : undefined\n      , len    = toLength(that.length)\n      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)\n      , search = String(searchString);\n    return $endsWith\n      ? $endsWith.call(that, search, end)\n      : that.slice(end - search.length, end) === search;\n  }\n});","'use strict';\n// B.2.3.6 String.prototype.fixed()\nrequire(99)('fixed', function(createHTML){\n  return function fixed(){\n    return createHTML(this, 'tt', '', '');\n  }\n});","'use strict';\n// B.2.3.7 String.prototype.fontcolor(color)\nrequire(99)('fontcolor', function(createHTML){\n  return function fontcolor(color){\n    return createHTML(this, 'font', 'color', color);\n  }\n});","'use strict';\n// B.2.3.8 String.prototype.fontsize(size)\nrequire(99)('fontsize', function(createHTML){\n  return function fontsize(size){\n    return createHTML(this, 'font', 'size', size);\n  }\n});","var $export        = require(32)\n  , toIndex        = require(105)\n  , fromCharCode   = String.fromCharCode\n  , $fromCodePoint = String.fromCodePoint;\n\n// length should be 1, old FF problem\n$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n  // 21.1.2.2 String.fromCodePoint(...codePoints)\n  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars\n    var res  = []\n      , aLen = arguments.length\n      , i    = 0\n      , code;\n    while(aLen > i){\n      code = +arguments[i++];\n      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');\n      res.push(code < 0x10000\n        ? fromCharCode(code)\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n      );\n    } return res.join('');\n  }\n});","// 21.1.3.7 String.prototype.includes(searchString, position = 0)\n'use strict';\nvar $export  = require(32)\n  , context  = require(98)\n  , INCLUDES = 'includes';\n\n$export($export.P + $export.F * require(33)(INCLUDES), 'String', {\n  includes: function includes(searchString /*, position = 0 */){\n    return !!~context(this, searchString, INCLUDES)\n      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});","'use strict';\n// B.2.3.9 String.prototype.italics()\nrequire(99)('italics', function(createHTML){\n  return function italics(){\n    return createHTML(this, 'i', '', '');\n  }\n});","'use strict';\nvar $at  = require(97)(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire(53)(String, 'String', function(iterated){\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , index = this._i\n    , point;\n  if(index >= O.length)return {value: undefined, done: true};\n  point = $at(O, index);\n  this._i += point.length;\n  return {value: point, done: false};\n});","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire(99)('link', function(createHTML){\n  return function link(url){\n    return createHTML(this, 'a', 'href', url);\n  }\n});","var $export   = require(32)\n  , toIObject = require(107)\n  , toLength  = require(108);\n\n$export($export.S, 'String', {\n  // 21.1.2.4 String.raw(callSite, ...substitutions)\n  raw: function raw(callSite){\n    var tpl  = toIObject(callSite.raw)\n      , len  = toLength(tpl.length)\n      , aLen = arguments.length\n      , res  = []\n      , i    = 0;\n    while(len > i){\n      res.push(String(tpl[i++]));\n      if(i < aLen)res.push(String(arguments[i]));\n    } return res.join('');\n  }\n});","var $export = require(32);\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require(101)\n});","'use strict';\n// B.2.3.11 String.prototype.small()\nrequire(99)('small', function(createHTML){\n  return function small(){\n    return createHTML(this, 'small', '', '');\n  }\n});","// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export     = require(32)\n  , toLength    = require(108)\n  , context     = require(98)\n  , STARTS_WITH = 'startsWith'\n  , $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require(33)(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /*, position = 0 */){\n    var that   = context(this, searchString, STARTS_WITH)\n      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))\n      , search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});","'use strict';\n// B.2.3.12 String.prototype.strike()\nrequire(99)('strike', function(createHTML){\n  return function strike(){\n    return createHTML(this, 'strike', '', '');\n  }\n});","'use strict';\n// B.2.3.13 String.prototype.sub()\nrequire(99)('sub', function(createHTML){\n  return function sub(){\n    return createHTML(this, 'sub', '', '');\n  }\n});","'use strict';\n// B.2.3.14 String.prototype.sup()\nrequire(99)('sup', function(createHTML){\n  return function sup(){\n    return createHTML(this, 'sup', '', '');\n  }\n});","'use strict';\n// 21.1.3.25 String.prototype.trim()\nrequire(102)('trim', function($trim){\n  return function trim(){\n    return $trim(this, 3);\n  };\n});","'use strict';\n// ECMAScript 6 symbols shim\nvar global         = require(38)\n  , has            = require(39)\n  , DESCRIPTORS    = require(28)\n  , $export        = require(32)\n  , redefine       = require(87)\n  , META           = require(62).KEY\n  , $fails         = require(34)\n  , shared         = require(94)\n  , setToStringTag = require(92)\n  , uid            = require(114)\n  , wks            = require(117)\n  , wksExt         = require(116)\n  , wksDefine      = require(115)\n  , keyOf          = require(57)\n  , enumKeys       = require(31)\n  , isArray        = require(47)\n  , anObject       = require(7)\n  , toIObject      = require(107)\n  , toPrimitive    = require(110)\n  , createDesc     = require(85)\n  , _create        = require(66)\n  , gOPNExt        = require(71)\n  , $GOPD          = require(70)\n  , $DP            = require(67)\n  , $keys          = require(76)\n  , gOPD           = $GOPD.f\n  , dP             = $DP.f\n  , gOPN           = gOPNExt.f\n  , $Symbol        = global.Symbol\n  , $JSON          = global.JSON\n  , _stringify     = $JSON && $JSON.stringify\n  , PROTOTYPE      = 'prototype'\n  , HIDDEN         = wks('_hidden')\n  , TO_PRIMITIVE   = wks('toPrimitive')\n  , isEnum         = {}.propertyIsEnumerable\n  , SymbolRegistry = shared('symbol-registry')\n  , AllSymbols     = shared('symbols')\n  , OPSymbols      = shared('op-symbols')\n  , ObjectProto    = Object[PROTOTYPE]\n  , USE_NATIVE     = typeof $Symbol == 'function'\n  , QObject        = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function(){\n  return _create(dP({}, 'a', {\n    get: function(){ return dP(this, 'a', {value: 7}).a; }\n  })).a != 7;\n}) ? function(it, key, D){\n  var protoDesc = gOPD(ObjectProto, key);\n  if(protoDesc)delete ObjectProto[key];\n  dP(it, key, D);\n  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function(tag){\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){\n  return typeof it == 'symbol';\n} : function(it){\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D){\n  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if(has(AllSymbols, key)){\n    if(!D.enumerable){\n      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;\n      D = _create(D, {enumerable: createDesc(0, false)});\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P){\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P))\n    , i    = 0\n    , l = keys.length\n    , key;\n  while(l > i)$defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P){\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key){\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){\n  it  = toIObject(it);\n  key = toPrimitive(key, true);\n  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;\n  var D = gOPD(it, key);\n  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it){\n  var names  = gOPN(toIObject(it))\n    , result = []\n    , i      = 0\n    , key;\n  while(names.length > i){\n    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it){\n  var IS_OP  = it === ObjectProto\n    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))\n    , result = []\n    , i      = 0\n    , key;\n  while(names.length > i){\n    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif(!USE_NATIVE){\n  $Symbol = function Symbol(){\n    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function(value){\n      if(this === ObjectProto)$set.call(OPSymbols, value);\n      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString(){\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f   = $defineProperty;\n  require(72).f = gOPNExt.f = $getOwnPropertyNames;\n  require(77).f  = $propertyIsEnumerable;\n  require(73).f = $getOwnPropertySymbols;\n\n  if(DESCRIPTORS && !require(58)){\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function(name){\n    return wrap(wks(name));\n  }\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});\n\nfor(var symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);\n\nfor(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function(key){\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(key){\n    if(isSymbol(key))return keyOf(SymbolRegistry, key);\n    throw TypeError(key + ' is not a symbol!');\n  },\n  useSetter: function(){ setter = true; },\n  useSimple: function(){ setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it){\n    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined\n    var args = [it]\n      , i    = 1\n      , replacer, $replacer;\n    while(arguments.length > i)args.push(arguments[i++]);\n    replacer = args[1];\n    if(typeof replacer == 'function')$replacer = replacer;\n    if($replacer || !isArray(replacer))replacer = function(key, value){\n      if($replacer)value = $replacer.call(this, key, value);\n      if(!isSymbol(value))return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require(40)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);","'use strict';\nvar $export      = require(32)\n  , $typed       = require(113)\n  , buffer       = require(112)\n  , anObject     = require(7)\n  , toIndex      = require(105)\n  , toLength     = require(108)\n  , isObject     = require(49)\n  , ArrayBuffer  = require(38).ArrayBuffer\n  , speciesConstructor = require(95)\n  , $ArrayBuffer = buffer.ArrayBuffer\n  , $DataView    = buffer.DataView\n  , $isView      = $typed.ABV && ArrayBuffer.isView\n  , $slice       = $ArrayBuffer.prototype.slice\n  , VIEW         = $typed.VIEW\n  , ARRAY_BUFFER = 'ArrayBuffer';\n\n$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});\n\n$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {\n  // 24.1.3.1 ArrayBuffer.isView(arg)\n  isView: function isView(it){\n    return $isView && $isView(it) || isObject(it) && VIEW in it;\n  }\n});\n\n$export($export.P + $export.U + $export.F * require(34)(function(){\n  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;\n}), ARRAY_BUFFER, {\n  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)\n  slice: function slice(start, end){\n    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix\n    var len    = anObject(this).byteLength\n      , first  = toIndex(start, len)\n      , final  = toIndex(end === undefined ? len : end, len)\n      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))\n      , viewS  = new $DataView(this)\n      , viewT  = new $DataView(result)\n      , index  = 0;\n    while(first < final){\n      viewT.setUint8(index++, viewS.getUint8(first++));\n    } return result;\n  }\n});\n\nrequire(91)(ARRAY_BUFFER);","var $export = require(32);\n$export($export.G + $export.W + $export.F * !require(113).ABV, {\n  DataView: require(112).DataView\n});","require(111)('Float32', 4, function(init){\n  return function Float32Array(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n});","require(111)('Float64', 8, function(init){\n  return function Float64Array(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n});","require(111)('Int16', 2, function(init){\n  return function Int16Array(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n});","require(111)('Int32', 4, function(init){\n  return function Int32Array(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n});","require(111)('Int8', 1, function(init){\n  return function Int8Array(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n});","require(111)('Uint16', 2, function(init){\n  return function Uint16Array(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n});","require(111)('Uint32', 4, function(init){\n  return function Uint32Array(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n});","require(111)('Uint8', 1, function(init){\n  return function Uint8Array(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n});","require(111)('Uint8', 1, function(init){\n  return function Uint8ClampedArray(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n}, true);","'use strict';\nvar each         = require(12)(0)\n  , redefine     = require(87)\n  , meta         = require(62)\n  , assign       = require(65)\n  , weak         = require(21)\n  , isObject     = require(49)\n  , getWeak      = meta.getWeak\n  , isExtensible = Object.isExtensible\n  , uncaughtFrozenStore = weak.ufstore\n  , tmp          = {}\n  , InternalMap;\n\nvar wrapper = function(get){\n  return function WeakMap(){\n    return get(this, arguments.length > 0 ? arguments[0] : undefined);\n  };\n};\n\nvar methods = {\n  // 23.3.3.3 WeakMap.prototype.get(key)\n  get: function get(key){\n    if(isObject(key)){\n      var data = getWeak(key);\n      if(data === true)return uncaughtFrozenStore(this).get(key);\n      return data ? data[this._i] : undefined;\n    }\n  },\n  // 23.3.3.5 WeakMap.prototype.set(key, value)\n  set: function set(key, value){\n    return weak.def(this, key, value);\n  }\n};\n\n// 23.3 WeakMap Objects\nvar $WeakMap = module.exports = require(22)('WeakMap', wrapper, methods, weak, true, true);\n\n// IE11 WeakMap frozen keys fix\nif(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){\n  InternalMap = weak.getConstructor(wrapper);\n  assign(InternalMap.prototype, methods);\n  meta.NEED = true;\n  each(['delete', 'has', 'get', 'set'], function(key){\n    var proto  = $WeakMap.prototype\n      , method = proto[key];\n    redefine(proto, key, function(a, b){\n      // store frozen objects on internal weakmap shim\n      if(isObject(a) && !isExtensible(a)){\n        if(!this._f)this._f = new InternalMap;\n        var result = this._f[key](a, b);\n        return key == 'set' ? this : result;\n      // store all the rest on native weakmap\n      } return method.call(this, a, b);\n    });\n  });\n}","'use strict';\nvar weak = require(21);\n\n// 23.4 WeakSet Objects\nrequire(22)('WeakSet', function(get){\n  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.4.3.1 WeakSet.prototype.add(value)\n  add: function add(value){\n    return weak.def(this, value, true);\n  }\n}, weak, false, true);","'use strict';\n// https://github.com/tc39/Array.prototype.includes\nvar $export   = require(32)\n  , $includes = require(11)(true);\n\n$export($export.P, 'Array', {\n  includes: function includes(el /*, fromIndex = 0 */){\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nrequire(5)('includes');","// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask\nvar $export   = require(32)\n  , microtask = require(64)()\n  , process   = require(38).process\n  , isNode    = require(18)(process) == 'process';\n\n$export($export.G, {\n  asap: function asap(fn){\n    var domain = isNode && process.domain;\n    microtask(domain ? domain.bind(fn) : fn);\n  }\n});","// https://github.com/ljharb/proposal-is-error\nvar $export = require(32)\n  , cof     = require(18);\n\n$export($export.S, 'Error', {\n  isError: function isError(it){\n    return cof(it) === 'Error';\n  }\n});","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export  = require(32);\n\n$export($export.P + $export.R, 'Map', {toJSON: require(20)('Map')});","// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require(32);\n\n$export($export.S, 'Math', {\n  iaddh: function iaddh(x0, x1, y0, y1){\n    var $x0 = x0 >>> 0\n      , $x1 = x1 >>> 0\n      , $y0 = y0 >>> 0;\n    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;\n  }\n});","// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require(32);\n\n$export($export.S, 'Math', {\n  imulh: function imulh(u, v){\n    var UINT16 = 0xffff\n      , $u = +u\n      , $v = +v\n      , u0 = $u & UINT16\n      , v0 = $v & UINT16\n      , u1 = $u >> 16\n      , v1 = $v >> 16\n      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);\n  }\n});","// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require(32);\n\n$export($export.S, 'Math', {\n  isubh: function isubh(x0, x1, y0, y1){\n    var $x0 = x0 >>> 0\n      , $x1 = x1 >>> 0\n      , $y0 = y0 >>> 0;\n    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;\n  }\n});","// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require(32);\n\n$export($export.S, 'Math', {\n  umulh: function umulh(u, v){\n    var UINT16 = 0xffff\n      , $u = +u\n      , $v = +v\n      , u0 = $u & UINT16\n      , v0 = $v & UINT16\n      , u1 = $u >>> 16\n      , v1 = $v >>> 16\n      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);\n  }\n});","'use strict';\nvar $export         = require(32)\n  , toObject        = require(109)\n  , aFunction       = require(3)\n  , $defineProperty = require(67);\n\n// B.2.2.2 Object.prototype.__defineGetter__(P, getter)\nrequire(28) && $export($export.P + require(69), 'Object', {\n  __defineGetter__: function __defineGetter__(P, getter){\n    $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});\n  }\n});","'use strict';\nvar $export         = require(32)\n  , toObject        = require(109)\n  , aFunction       = require(3)\n  , $defineProperty = require(67);\n\n// B.2.2.3 Object.prototype.__defineSetter__(P, setter)\nrequire(28) && $export($export.P + require(69), 'Object', {\n  __defineSetter__: function __defineSetter__(P, setter){\n    $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});\n  }\n});","// https://github.com/tc39/proposal-object-values-entries\nvar $export  = require(32)\n  , $entries = require(79)(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it){\n    return $entries(it);\n  }\n});","// https://github.com/tc39/proposal-object-getownpropertydescriptors\nvar $export        = require(32)\n  , ownKeys        = require(80)\n  , toIObject      = require(107)\n  , gOPD           = require(70)\n  , createProperty = require(24);\n\n$export($export.S, 'Object', {\n  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){\n    var O       = toIObject(object)\n      , getDesc = gOPD.f\n      , keys    = ownKeys(O)\n      , result  = {}\n      , i       = 0\n      , key;\n    while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));\n    return result;\n  }\n});","'use strict';\nvar $export                  = require(32)\n  , toObject                 = require(109)\n  , toPrimitive              = require(110)\n  , getPrototypeOf           = require(74)\n  , getOwnPropertyDescriptor = require(70).f;\n\n// B.2.2.4 Object.prototype.__lookupGetter__(P)\nrequire(28) && $export($export.P + require(69), 'Object', {\n  __lookupGetter__: function __lookupGetter__(P){\n    var O = toObject(this)\n      , K = toPrimitive(P, true)\n      , D;\n    do {\n      if(D = getOwnPropertyDescriptor(O, K))return D.get;\n    } while(O = getPrototypeOf(O));\n  }\n});","'use strict';\nvar $export                  = require(32)\n  , toObject                 = require(109)\n  , toPrimitive              = require(110)\n  , getPrototypeOf           = require(74)\n  , getOwnPropertyDescriptor = require(70).f;\n\n// B.2.2.5 Object.prototype.__lookupSetter__(P)\nrequire(28) && $export($export.P + require(69), 'Object', {\n  __lookupSetter__: function __lookupSetter__(P){\n    var O = toObject(this)\n      , K = toPrimitive(P, true)\n      , D;\n    do {\n      if(D = getOwnPropertyDescriptor(O, K))return D.set;\n    } while(O = getPrototypeOf(O));\n  }\n});","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require(32)\n  , $values = require(79)(false);\n\n$export($export.S, 'Object', {\n  values: function values(it){\n    return $values(it);\n  }\n});","'use strict';\n// https://github.com/zenparsing/es-observable\nvar $export     = require(32)\n  , global      = require(38)\n  , core        = require(23)\n  , microtask   = require(64)()\n  , OBSERVABLE  = require(117)('observable')\n  , aFunction   = require(3)\n  , anObject    = require(7)\n  , anInstance  = require(6)\n  , redefineAll = require(86)\n  , hide        = require(40)\n  , forOf       = require(37)\n  , RETURN      = forOf.RETURN;\n\nvar getMethod = function(fn){\n  return fn == null ? undefined : aFunction(fn);\n};\n\nvar cleanupSubscription = function(subscription){\n  var cleanup = subscription._c;\n  if(cleanup){\n    subscription._c = undefined;\n    cleanup();\n  }\n};\n\nvar subscriptionClosed = function(subscription){\n  return subscription._o === undefined;\n};\n\nvar closeSubscription = function(subscription){\n  if(!subscriptionClosed(subscription)){\n    subscription._o = undefined;\n    cleanupSubscription(subscription);\n  }\n};\n\nvar Subscription = function(observer, subscriber){\n  anObject(observer);\n  this._c = undefined;\n  this._o = observer;\n  observer = new SubscriptionObserver(this);\n  try {\n    var cleanup      = subscriber(observer)\n      , subscription = cleanup;\n    if(cleanup != null){\n      if(typeof cleanup.unsubscribe === 'function')cleanup = function(){ subscription.unsubscribe(); };\n      else aFunction(cleanup);\n      this._c = cleanup;\n    }\n  } catch(e){\n    observer.error(e);\n    return;\n  } if(subscriptionClosed(this))cleanupSubscription(this);\n};\n\nSubscription.prototype = redefineAll({}, {\n  unsubscribe: function unsubscribe(){ closeSubscription(this); }\n});\n\nvar SubscriptionObserver = function(subscription){\n  this._s = subscription;\n};\n\nSubscriptionObserver.prototype = redefineAll({}, {\n  next: function next(value){\n    var subscription = this._s;\n    if(!subscriptionClosed(subscription)){\n      var observer = subscription._o;\n      try {\n        var m = getMethod(observer.next);\n        if(m)return m.call(observer, value);\n      } catch(e){\n        try {\n          closeSubscription(subscription);\n        } finally {\n          throw e;\n        }\n      }\n    }\n  },\n  error: function error(value){\n    var subscription = this._s;\n    if(subscriptionClosed(subscription))throw value;\n    var observer = subscription._o;\n    subscription._o = undefined;\n    try {\n      var m = getMethod(observer.error);\n      if(!m)throw value;\n      value = m.call(observer, value);\n    } catch(e){\n      try {\n        cleanupSubscription(subscription);\n      } finally {\n        throw e;\n      }\n    } cleanupSubscription(subscription);\n    return value;\n  },\n  complete: function complete(value){\n    var subscription = this._s;\n    if(!subscriptionClosed(subscription)){\n      var observer = subscription._o;\n      subscription._o = undefined;\n      try {\n        var m = getMethod(observer.complete);\n        value = m ? m.call(observer, value) : undefined;\n      } catch(e){\n        try {\n          cleanupSubscription(subscription);\n        } finally {\n          throw e;\n        }\n      } cleanupSubscription(subscription);\n      return value;\n    }\n  }\n});\n\nvar $Observable = function Observable(subscriber){\n  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);\n};\n\nredefineAll($Observable.prototype, {\n  subscribe: function subscribe(observer){\n    return new Subscription(observer, this._f);\n  },\n  forEach: function forEach(fn){\n    var that = this;\n    return new (core.Promise || global.Promise)(function(resolve, reject){\n      aFunction(fn);\n      var subscription = that.subscribe({\n        next : function(value){\n          try {\n            return fn(value);\n          } catch(e){\n            reject(e);\n            subscription.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve\n      });\n    });\n  }\n});\n\nredefineAll($Observable, {\n  from: function from(x){\n    var C = typeof this === 'function' ? this : $Observable;\n    var method = getMethod(anObject(x)[OBSERVABLE]);\n    if(method){\n      var observable = anObject(method.call(x));\n      return observable.constructor === C ? observable : new C(function(observer){\n        return observable.subscribe(observer);\n      });\n    }\n    return new C(function(observer){\n      var done = false;\n      microtask(function(){\n        if(!done){\n          try {\n            if(forOf(x, false, function(it){\n              observer.next(it);\n              if(done)return RETURN;\n            }) === RETURN)return;\n          } catch(e){\n            if(done)throw e;\n            observer.error(e);\n            return;\n          } observer.complete();\n        }\n      });\n      return function(){ done = true; };\n    });\n  },\n  of: function of(){\n    for(var i = 0, l = arguments.length, items = Array(l); i < l;)items[i] = arguments[i++];\n    return new (typeof this === 'function' ? this : $Observable)(function(observer){\n      var done = false;\n      microtask(function(){\n        if(!done){\n          for(var i = 0; i < items.length; ++i){\n            observer.next(items[i]);\n            if(done)return;\n          } observer.complete();\n        }\n      });\n      return function(){ done = true; };\n    });\n  }\n});\n\nhide($Observable.prototype, OBSERVABLE, function(){ return this; });\n\n$export($export.G, {Observable: $Observable});\n\nrequire(91)('Observable');","var metadata                  = require(63)\n  , anObject                  = require(7)\n  , toMetaKey                 = metadata.key\n  , ordinaryDefineOwnMetadata = metadata.set;\n\nmetadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){\n  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));\n}});","var metadata               = require(63)\n  , anObject               = require(7)\n  , toMetaKey              = metadata.key\n  , getOrCreateMetadataMap = metadata.map\n  , store                  = metadata.store;\n\nmetadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){\n  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])\n    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);\n  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;\n  if(metadataMap.size)return true;\n  var targetMetadata = store.get(target);\n  targetMetadata['delete'](targetKey);\n  return !!targetMetadata.size || store['delete'](target);\n}});","var Set                     = require(220)\n  , from                    = require(10)\n  , metadata                = require(63)\n  , anObject                = require(7)\n  , getPrototypeOf          = require(74)\n  , ordinaryOwnMetadataKeys = metadata.keys\n  , toMetaKey               = metadata.key;\n\nvar ordinaryMetadataKeys = function(O, P){\n  var oKeys  = ordinaryOwnMetadataKeys(O, P)\n    , parent = getPrototypeOf(O);\n  if(parent === null)return oKeys;\n  var pKeys  = ordinaryMetadataKeys(parent, P);\n  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;\n};\n\nmetadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){\n  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));\n}});","var metadata               = require(63)\n  , anObject               = require(7)\n  , getPrototypeOf         = require(74)\n  , ordinaryHasOwnMetadata = metadata.has\n  , ordinaryGetOwnMetadata = metadata.get\n  , toMetaKey              = metadata.key;\n\nvar ordinaryGetMetadata = function(MetadataKey, O, P){\n  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);\n  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);\n  var parent = getPrototypeOf(O);\n  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;\n};\n\nmetadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){\n  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n}});","var metadata                = require(63)\n  , anObject                = require(7)\n  , ordinaryOwnMetadataKeys = metadata.keys\n  , toMetaKey               = metadata.key;\n\nmetadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){\n  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));\n}});","var metadata               = require(63)\n  , anObject               = require(7)\n  , ordinaryGetOwnMetadata = metadata.get\n  , toMetaKey              = metadata.key;\n\nmetadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){\n  return ordinaryGetOwnMetadata(metadataKey, anObject(target)\n    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n}});","var metadata               = require(63)\n  , anObject               = require(7)\n  , getPrototypeOf         = require(74)\n  , ordinaryHasOwnMetadata = metadata.has\n  , toMetaKey              = metadata.key;\n\nvar ordinaryHasMetadata = function(MetadataKey, O, P){\n  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);\n  if(hasOwn)return true;\n  var parent = getPrototypeOf(O);\n  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;\n};\n\nmetadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){\n  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n}});","var metadata               = require(63)\n  , anObject               = require(7)\n  , ordinaryHasOwnMetadata = metadata.has\n  , toMetaKey              = metadata.key;\n\nmetadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){\n  return ordinaryHasOwnMetadata(metadataKey, anObject(target)\n    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n}});","var metadata                  = require(63)\n  , anObject                  = require(7)\n  , aFunction                 = require(3)\n  , toMetaKey                 = metadata.key\n  , ordinaryDefineOwnMetadata = metadata.set;\n\nmetadata.exp({metadata: function metadata(metadataKey, metadataValue){\n  return function decorator(target, targetKey){\n    ordinaryDefineOwnMetadata(\n      metadataKey, metadataValue,\n      (targetKey !== undefined ? anObject : aFunction)(target),\n      toMetaKey(targetKey)\n    );\n  };\n}});","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export  = require(32);\n\n$export($export.P + $export.R, 'Set', {toJSON: require(20)('Set')});","'use strict';\n// https://github.com/mathiasbynens/String.prototype.at\nvar $export = require(32)\n  , $at     = require(97)(true);\n\n$export($export.P, 'String', {\n  at: function at(pos){\n    return $at(this, pos);\n  }\n});","'use strict';\n// https://tc39.github.io/String.prototype.matchAll/\nvar $export     = require(32)\n  , defined     = require(27)\n  , toLength    = require(108)\n  , isRegExp    = require(50)\n  , getFlags    = require(36)\n  , RegExpProto = RegExp.prototype;\n\nvar $RegExpStringIterator = function(regexp, string){\n  this._r = regexp;\n  this._s = string;\n};\n\nrequire(52)($RegExpStringIterator, 'RegExp String', function next(){\n  var match = this._r.exec(this._s);\n  return {value: match, done: match === null};\n});\n\n$export($export.P, 'String', {\n  matchAll: function matchAll(regexp){\n    defined(this);\n    if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');\n    var S     = String(this)\n      , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)\n      , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);\n    rx.lastIndex = toLength(regexp.lastIndex);\n    return new $RegExpStringIterator(rx, S);\n  }\n});","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require(32)\n  , $pad    = require(100);\n\n$export($export.P, 'String', {\n  padEnd: function padEnd(maxLength /*, fillString = ' ' */){\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\n  }\n});","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require(32)\n  , $pad    = require(100);\n\n$export($export.P, 'String', {\n  padStart: function padStart(maxLength /*, fillString = ' ' */){\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n  }\n});","'use strict';\n// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\nrequire(102)('trimLeft', function($trim){\n  return function trimLeft(){\n    return $trim(this, 1);\n  };\n}, 'trimStart');","'use strict';\n// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\nrequire(102)('trimRight', function($trim){\n  return function trimRight(){\n    return $trim(this, 2);\n  };\n}, 'trimEnd');","require(115)('asyncIterator');","require(115)('observable');","// https://github.com/ljharb/proposal-global\nvar $export = require(32);\n\n$export($export.S, 'System', {global: require(38)});","var $iterators    = require(130)\n  , redefine      = require(87)\n  , global        = require(38)\n  , hide          = require(40)\n  , Iterators     = require(56)\n  , wks           = require(117)\n  , ITERATOR      = wks('iterator')\n  , TO_STRING_TAG = wks('toStringTag')\n  , ArrayValues   = Iterators.Array;\n\nfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\n  var NAME       = collections[i]\n    , Collection = global[NAME]\n    , proto      = Collection && Collection.prototype\n    , key;\n  if(proto){\n    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);\n    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);\n  }\n}","var $export = require(32)\n  , $task   = require(104);\n$export($export.G + $export.B, {\n  setImmediate:   $task.set,\n  clearImmediate: $task.clear\n});","// ie9- setTimeout & setInterval additional parameters fix\nvar global     = require(38)\n  , $export    = require(32)\n  , invoke     = require(44)\n  , partial    = require(83)\n  , navigator  = global.navigator\n  , MSIE       = !!navigator && /MSIE .\\./.test(navigator.userAgent); // <- dirty ie9- check\nvar wrap = function(set){\n  return MSIE ? function(fn, time /*, ...args */){\n    return set(invoke(\n      partial,\n      [].slice.call(arguments, 2),\n      typeof fn == 'function' ? fn : Function(fn)\n    ), time);\n  } : set;\n};\n$export($export.G + $export.B + $export.F * MSIE, {\n  setTimeout:  wrap(global.setTimeout),\n  setInterval: wrap(global.setInterval)\n});","require(243);\nrequire(180);\nrequire(182);\nrequire(181);\nrequire(184);\nrequire(186);\nrequire(191);\nrequire(185);\nrequire(183);\nrequire(193);\nrequire(192);\nrequire(188);\nrequire(189);\nrequire(187);\nrequire(179);\nrequire(190);\nrequire(194);\nrequire(195);\nrequire(146);\nrequire(148);\nrequire(147);\nrequire(197);\nrequire(196);\nrequire(167);\nrequire(177);\nrequire(178);\nrequire(168);\nrequire(169);\nrequire(170);\nrequire(171);\nrequire(172);\nrequire(173);\nrequire(174);\nrequire(175);\nrequire(176);\nrequire(150);\nrequire(151);\nrequire(152);\nrequire(153);\nrequire(154);\nrequire(155);\nrequire(156);\nrequire(157);\nrequire(158);\nrequire(159);\nrequire(160);\nrequire(161);\nrequire(162);\nrequire(163);\nrequire(164);\nrequire(165);\nrequire(166);\nrequire(230);\nrequire(235);\nrequire(242);\nrequire(233);\nrequire(225);\nrequire(226);\nrequire(231);\nrequire(236);\nrequire(238);\nrequire(221);\nrequire(222);\nrequire(223);\nrequire(224);\nrequire(227);\nrequire(228);\nrequire(229);\nrequire(232);\nrequire(234);\nrequire(237);\nrequire(239);\nrequire(240);\nrequire(241);\nrequire(141);\nrequire(143);\nrequire(142);\nrequire(145);\nrequire(144);\nrequire(129);\nrequire(127);\nrequire(134);\nrequire(131);\nrequire(137);\nrequire(139);\nrequire(126);\nrequire(133);\nrequire(123);\nrequire(138);\nrequire(121);\nrequire(136);\nrequire(135);\nrequire(128);\nrequire(132);\nrequire(120);\nrequire(122);\nrequire(125);\nrequire(124);\nrequire(140);\nrequire(130);\nrequire(213);\nrequire(219);\nrequire(214);\nrequire(215);\nrequire(216);\nrequire(217);\nrequire(218);\nrequire(198);\nrequire(149);\nrequire(220);\nrequire(255);\nrequire(256);\nrequire(244);\nrequire(245);\nrequire(250);\nrequire(253);\nrequire(254);\nrequire(248);\nrequire(251);\nrequire(249);\nrequire(252);\nrequire(246);\nrequire(247);\nrequire(199);\nrequire(200);\nrequire(201);\nrequire(202);\nrequire(203);\nrequire(206);\nrequire(204);\nrequire(205);\nrequire(207);\nrequire(208);\nrequire(209);\nrequire(210);\nrequire(212);\nrequire(211);\nrequire(257);\nrequire(283);\nrequire(286);\nrequire(285);\nrequire(287);\nrequire(288);\nrequire(284);\nrequire(289);\nrequire(290);\nrequire(268);\nrequire(271);\nrequire(267);\nrequire(265);\nrequire(266);\nrequire(269);\nrequire(270);\nrequire(260);\nrequire(282);\nrequire(291);\nrequire(259);\nrequire(261);\nrequire(263);\nrequire(262);\nrequire(264);\nrequire(273);\nrequire(274);\nrequire(276);\nrequire(275);\nrequire(278);\nrequire(277);\nrequire(279);\nrequire(280);\nrequire(281);\nrequire(258);\nrequire(272);\nrequire(294);\nrequire(293);\nrequire(292);\nmodule.exports = require(23);","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    if (typeof global.process === \"object\" && global.process.domain) {\n      invoke = global.process.domain.bind(invoke);\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n","module.exports = (a, b) => b.filter(item => a.indexOf(item) === -1);\n","// Array find\n// Returns the first non undefined response\n// If the response is (Boolean) True, then the value of that array item is returned instead...\nmodule.exports = (arr, callback, thisArg = null) => {\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst value = callback.call(thisArg, arr[i]);\n\t\tif (value !== undefined) {\n\t\t\treturn value === true ? arr[i] : value;\n\t\t}\n\t}\n};\n","module.exports = obj => Array.prototype.slice.call(obj);\n","module.exports = a => {\n\tif (!Array.isArray(a)) {\n\t\treturn [];\n\t}\n\n\t// Is this the first location of item\n\treturn a.filter((item, index) => a.indexOf(item) === index);\n};\n","const jsonParse = require('../../string/jsonParse.js');\nconst extend = require('../../object/extend.js');\n\n// Return handler\nmodule.exports = Storage;\n\nfunction Storage(method) {\n\n\tthis.native = method;\n\n\treturn extend(this.api.bind(this), this);\n}\n\nStorage.prototype.api = function(name, value) {\n\t// recursive\n\tif (typeof name === 'object') {\n\t\tfor (const x in name) {\n\t\t\tthis.api(x, name[x]);\n\t\t}\n\t}\n\n\t// Local storage\n\telse if (!name) {\n\t\tthrow 'agent/store must have a valid name';\n\t}\n\telse if (value === undefined) {\n\t\treturn this.getItem(name);\n\t}\n\telse if (value === null) {\n\t\tthis.removeItem(name);\n\t}\n\telse {\n\t\tthis.setItem(name, value);\n\t}\n};\n\nStorage.prototype.getItem = function(name) {\n\treturn jsonParse(this.native.getItem(name));\n};\n\nStorage.prototype.setItem = function(name, value) {\n\tthis.native.setItem(name, JSON.stringify(value));\n};\n\nStorage.prototype.removeItem = function(name) {\n\tthis.native.removeItem(name);\n};\n","// Provide an API for setting and retrieving cookies\nconst arrayFind = require('../../array/find.js');\nconst Storage = require('./Storage.js');\n\n// Emulate localStorage using cookies\nmodule.exports = new Storage({\n\tgetItem: name => {\n\t\tconst key = `${name }=`;\n\t\tconst m = document.cookie.split(';');\n\t\treturn arrayFind(m, item => {\n\t\t\titem = item.replace(/(^\\s+|\\s+$)/, '');\n\t\t\tif (item && item.indexOf(key) === 0) {\n\t\t\t\treturn item.substr(key.length);\n\t\t\t}\n\t\t}) || null;\n\n\t},\n\n\tsetItem: (name, value) => {\n\t\tdocument.cookie = `${name }=${ value}`;\n\t},\n\n\tremoveItem: name => {\n\t\tdocument.cookie = `${name }=; expires=Thu, 01 Jan 1970 00:00:01 GMT;`;\n\t}\n});\n","// sessionStorage\n// Shimmed up sessionStorage\n\nconst sessionStorage = require('./sessionStorage.js');\nconst Storage = require('./Storage.js');\n\n// Test the environment\ntry {\n\tconst temp = '__tricks_temp__';\n\t// In Chrome with cookies blocked, calling localStorage throws an error\n\tconst storage = window.localStorage;\n\tstorage.setItem(temp, 1);\n\tstorage.removeItem(temp);\n\tmodule.exports = new Storage(storage);\n\n}\ncatch (e) {\n\tmodule.exports = sessionStorage;\n}\n","// sessionStorage\n// Shimmed up sessionStorage\n\nconst cookieStorage = require('./cookieStorage.js');\nconst Storage = require('./Storage.js');\n\n// Test the environment\ntry {\n\tconst temp = '__tricks_temp__';\n\t// In Chrome with cookies blocked, calling localStorage throws an error\n\tconst storage = window.sessionStorage;\n\tstorage.setItem(temp, 1);\n\tstorage.removeItem(temp);\n\tmodule.exports = new Storage(storage);\n\n}\ncatch (e) {\n\tmodule.exports = cookieStorage;\n}\n","// Post\n// Send information to a remote location using the post mechanism\n// @param string uri path\n// @param object data, key value data to send\n// @param function callback, function to execute in response\n\nconst append = require('../../dom/append.js');\nconst attr = require('../../dom/attr.js');\nconst domInstance = require('../../dom/domInstance.js');\nconst createElement = require('../../dom/createElement.js');\nconst globalCallback = require('../../events/globalCallback.js');\nconst toArray = require('../../array/toArray.js');\nconst instanceOf = require('../../object/instanceOf.js');\nconst on = require('../../events/on.js');\nconst emit = require('../../events/emit.js');\nconst setImmediate = require('../../time/setImmediate.js');\n\nmodule.exports = (url, data, options, callback, callback_name, timeout = 60000) => {\n\n\tlet timer;\n\tlet bool = 0;\n\tconst cb = r => {\n\t\tif (!(bool++)) {\n\t\t\tif (timer) {\n\t\t\t\tclearTimeout(timer);\n\t\t\t\ttimer = null;\n\t\t\t}\n\t\t\tcallback(r);\n\n\t\t\t// Trigger onsubmit on the form.\n\t\t\t// Typically this isn't activated until afterwards\n\t\t\temit(form, 'submit');\n\n\t\t\t// The setImmediate fixes the test runner in phantomjs\n\t\t\tsetImmediate(() => frame.parentNode.removeChild(frame));\n\t\t}\n\n\t\treturn true;\n\t};\n\n\t// What is the name of the callback to contain\n\t// We'll also use this to name the iframe\n\tcallback_name = globalCallback(cb, callback_name);\n\n\t/////////////////////\n\t// Create the FRAME\n\t/////////////////////\n\n\tconst frame = createFrame(callback_name);\n\n\t// Override callback mechanism. Triggger a response onload/onerror\n\tif (options && options.callbackonload) {\n\n\t\t// Onload is being fired twice\n\t\tframe.onload = cb.bind(null, {\n\t\t\tresponse: 'posted',\n\t\t\tmessage: 'Content was posted'\n\t\t});\n\t}\n\n\n\t/////////////////////\n\t// Set a timeout\n\t/////////////////////\n\n\tif (timeout) {\n\t\ttimer = setTimeout(cb.bind(null, new Error('timeout')), timeout);\n\t}\n\n\n\t/////////////////////\n\t// Create a form\n\t/////////////////////\n\n\tconst form = createFormFromData(data);\n\n\t// The URL is a function for some cases and as such\n\t// Determine its value with a callback containing the new parameters of this function.\n\turl = url.replace(new RegExp('=\\\\?(&|$)'), `=${ callback_name }$1`);\n\n\t// Set the target of the form\n\tattr(form, {\n\t\tmethod: 'POST',\n\t\ttarget: callback_name,\n\t\taction: url\n\t});\n\n\tform.target = callback_name;\n\n\t// Submit the form\n\t// Some reason this needs to be offset from the current window execution\n\tsetTimeout(() => {\n\t\tform.submit();\n\t}, 100);\n};\n\n\nfunction createFrame(callback_name) {\n\tlet frame;\n\n\ttry {\n\t\t// IE7 hack, only lets us define the name here, not later.\n\t\tframe = createElement(`<iframe name=\"${ callback_name }\">`);\n\t}\n\tcatch (e) {\n\t\tframe = createElement('iframe');\n\t}\n\n\t// Attach the frame with the following attributes to the document body.\n\tattr(frame, {\n\t\tname: callback_name,\n\t\tid: callback_name,\n\t\tstyle: 'display:none;'\n\t});\n\n\tdocument.body.appendChild(frame);\n\n\treturn frame;\n}\n\n\nfunction createFormFromData(data) {\n\n\t// This hack needs a form\n\tlet form = null;\n\tconst reenableAfterSubmit = [];\n\tlet i = 0;\n\tlet x = null;\n\n\n\t// If we are just posting a single item\n\tif (domInstance('input', data)) {\n\t\t// Get the parent form\n\t\tform = data.form;\n\n\t\t// Loop through and disable all of its siblings\n\t\ttoArray(form.elements).forEach(input => {\n\t\t\tif (input !== data) {\n\t\t\t\tinput.setAttribute('disabled', true);\n\t\t\t}\n\t\t});\n\n\t\t// Move the focus to the form\n\t\tdata = form;\n\t}\n\n\t// Posting a form\n\tif (domInstance('form', data)) {\n\t\t// This is a form element\n\t\tform = data;\n\n\t\t// Does this form need to be a multipart form?\n\t\ttoArray(form.elements).forEach(input => {\n\t\t\tif (!input.disabled && input.type === 'file') {\n\t\t\t\tform.encoding = form.enctype = 'multipart/form-data';\n\t\t\t\tinput.setAttribute('name', 'file');\n\t\t\t}\n\t\t});\n\t}\n\telse {\n\t\t// Its not a form element,\n\t\t// Therefore it must be a JSON object of Key=>Value or Key=>Element\n\t\t// If anyone of those values are a input type=file we shall shall insert its siblings into the form for which it belongs.\n\t\tfor (x in data) if (data.hasOwnProperty(x)) {\n\t\t\t// Is this an input Element?\n\t\t\tif (domInstance('input', data[x]) && data[x].type === 'file') {\n\t\t\t\tform = data[x].form;\n\t\t\t\tform.encoding = form.enctype = 'multipart/form-data';\n\t\t\t}\n\t\t}\n\n\t\t// Do If there is no defined form element, lets create one.\n\t\tif (!form) {\n\t\t\t// Build form\n\t\t\tform = append('form');\n\n\t\t\t// Bind the removal of the form\n\t\t\ton(form, 'submit', () => {\n\t\t\t\tsetImmediate(() => {\n\t\t\t\t\tform.parentNode.removeChild(form);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\t// Bind the clean up of the existing form.\n\t\t\ton(form, 'submit', () => {\n\t\t\t\tsetImmediate(() => {\n\t\t\t\t\treenableAfterSubmit.forEach(input => {\n\t\t\t\t\t\tif (input) {\n\t\t\t\t\t\t\tinput.setAttribute('disabled', false);\n\t\t\t\t\t\t\tinput.disabled = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Reset, incase this is called again.\n\t\t\t\t\treenableAfterSubmit.length = 0;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tlet input;\n\n\t\t// Add elements to the form if they dont exist\n\t\tfor (x in data) if (data.hasOwnProperty(x)) {\n\n\t\t\t// Is this an element?\n\t\t\tconst el = (domInstance('input', data[x]) || domInstance('textArea', data[x]) || domInstance('select', data[x]));\n\n\t\t\t// Is this not an input element, or one that exists outside the form.\n\t\t\tif (!el || data[x].form !== form) {\n\n\t\t\t\t// Does an element have the same name?\n\t\t\t\tlet inputs = form.elements[x];\n\t\t\t\tif (input) {\n\t\t\t\t\t// Remove it.\n\t\t\t\t\tif (!instanceOf(inputs, window.NodeList)) {\n\t\t\t\t\t\tinputs = [inputs];\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (i = 0; i < inputs.length; i++) {\n\t\t\t\t\t\tinputs[i].parentNode.removeChild(inputs[i]);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Create an input element\n\t\t\t\tinput = append('input', {\n\t\t\t\t\ttype: 'hidden',\n\t\t\t\t\tname: x\n\t\t\t\t}, form);\n\n\t\t\t\t// Does it have a value attribute?\n\t\t\t\tif (el) {\n\t\t\t\t\tinput.value = data[x].value;\n\t\t\t\t}\n\t\t\t\telse if (domInstance(null, data[x])) {\n\t\t\t\t\tinput.value = data[x].innerHTML || data[x].innerText;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tinput.value = data[x];\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// It is an element, which exists within the form, but the name is wrong\n\t\t\telse if (el && data[x].name !== x) {\n\t\t\t\tdata[x].setAttribute('name', x);\n\t\t\t\tdata[x].name = x;\n\t\t\t}\n\t\t}\n\n\t\t// Disable elements from within the form if they weren't specified\n\t\ttoArray(form.elements).forEach(input => {\n\n\t\t\t// Does the same name and value exist in the parent\n\t\t\tif (!(input.name in data) && input.getAttribute('disabled') !== true) {\n\t\t\t\t// Disable\n\t\t\t\tinput.setAttribute('disabled', true);\n\n\t\t\t\t// Add re-enable to callback\n\t\t\t\treenableAfterSubmit.push(input);\n\t\t\t}\n\t\t});\n\t}\n\n\treturn form;\n}\n","const createElement = require('../../dom/createElement.js');\nconst createEvent = require('../../events/createEvent.js');\n\nmodule.exports = (url, callback, timeout = 0) => {\n\n\t// Inject a script tag\n\tlet bool = 0;\n\tlet timer;\n\tconst head = document.getElementsByTagName('script')[0].parentNode;\n\tconst cb = e => {\n\t\tif (!(bool++) && callback) {\n\t\t\tcallback(e);\n\t\t}\n\t\tif (timer) {\n\t\t\tclearTimeout(timer);\n\t\t}\n\t};\n\n\t// Add timeout\n\tif (timeout) {\n\t\ttimer = window.setTimeout(() => {\n\t\t\tcb(createEvent('timeout'));\n\t\t}, timeout);\n\t}\n\n\t// Build script tag\n\tconst script = createElement('script', {\n\t\tsrc: url,\n\t\tonerror: cb,\n\t\tonload: cb,\n\t\tonreadystatechange: () => {\n\t\t\tif (/loaded|complete/i.test(script.readyState)) {\n\t\t\t\tcb(createEvent('load'));\n\t\t\t}\n\t\t}\n\t});\n\n\t// Set Async\n\tscript.async = true;\n\n\t// Inject script tag into the head element\n\thead.insertBefore(script, head.firstChild);\n\n\treturn script;\n};\n","// JSONP\nconst globalCallback = require('../../events/globalCallback.js');\nconst getScript = require('./getScript.js');\n\nconst MATCH_CALLBACK_PLACEHOLDER = /=\\?(&|$)/;\n\nmodule.exports = (url, callback, callback_name, timeout = 60000) => {\n\n\t// Change the name of the callback\n\tlet result;\n\n\t// Add callback to the window object\n\tcallback_name = globalCallback(json => {\n\t\tresult = json;\n\t\treturn true; // this ensure the window reference is removed\n\t}, callback_name);\n\n\t// The URL is a function for some cases and as such\n\t// Determine its value with a callback containing the new parameters of this function.\n\turl = url.replace(MATCH_CALLBACK_PLACEHOLDER, `=${ callback_name }$1`);\n\n\tconst script = getScript(url, () => {\n\t\tcallback(result);\n\t\tscript.parentNode.removeChild(script);\n\t}, timeout);\n\n\treturn script;\n};\n","// Request\n// Makes an REST request given an object which describes how (aka, xhr, jsonp, formpost)\nconst jsonp = require('./jsonp.js');\nconst xhr = require('./xhr.js');\nconst formpost = require('./formpost.js');\nconst SupportCORS = require('../../support/cors.js');\nconst globalCallback = require('../../events/globalCallback.js');\nconst createUrl = require('../../string/createUrl.js');\nconst extend = require('../../object/extend.js');\n\nmodule.exports = (p, callback) => {\n\n\tif (typeof p === 'string') {\n\t\tp = {\n\t\t\turl: p\n\t\t};\n\t}\n\n\t// Use interchangeably\n\tp.url = p.url || p.uri;\n\n\t// Set defaults\n\tp.query = p.query || p.qs || {};\n\n\t// Default method\n\tp.method = (p.method || 'get').toLowerCase();\n\n\t// Default proxy response\n\tp.proxyHandler = p.proxyHandler || ((p, cb) => {\n\t\tcb();\n\t});\n\n\t// CORS\n\tif (SupportCORS && (typeof (p.xhr) === 'function' ? p.xhr(p, p.query) : p.xhr !== false)) {\n\n\t\t// Pass the selected request through a proxy\n\t\tp.proxyHandler(p, () => {\n\t\t\t// The agent and the provider support CORS\n\t\t\tconst url = createUrl(p.url, p.query);\n\t\t\tconst x = xhr(p.method, url, p.responseType, p.headers, p.data, callback);\n\t\t\tx.onprogress = p.onprogress || null;\n\n\t\t\t// Feature detect, not available on all implementations of XMLHttpRequest\n\t\t\tif (x.upload && p.onuploadprogress) {\n\t\t\t\tx.upload.onprogress = p.onuploadprogress;\n\t\t\t}\n\t\t});\n\n\t\treturn;\n\t}\n\n\t// Apply a globalCallback\n\tp.callbackID = p.query.callback = globalCallback(callback);\n\n\t// JSONP\n\tif (p.jsonp !== false) {\n\n\t\t// Call p.jsonp handler\n\t\tif (typeof (p.jsonp) === 'function') {\n\t\t\t// Format the request via JSONP\n\t\t\tp.jsonp(p, p.query);\n\t\t}\n\n\t\t// Lets use JSONP if the method is 'get'\n\t\tif (p.method === 'get') {\n\n\t\t\tp.proxyHandler(p, () => {\n\t\t\t\tconst url = createUrl(p.url, extend(p.query, p.data || {}));\n\t\t\t\tjsonp(url, callback, p.callbackID, p.timeout);\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// Otherwise we're on to the old school, iframe hacks and JSONP\n\tif (p.form !== false) {\n\n\t\t// Add some additional query parameters to the URL\n\t\t// We're pretty stuffed if the endpoint doesn't like these\n\t\tp.query.redirect_uri = p.redirect_uri;\n\t\tp.query.state = JSON.stringify({callback: p.callbackID});\n\t\tdelete p.query.callback;\n\n\t\tlet opts;\n\n\t\tif (typeof (p.form) === 'function') {\n\n\t\t\t// Format the request\n\t\t\topts = p.form(p, p.query);\n\t\t}\n\n\t\tif (p.method === 'post' && opts !== false) {\n\n\t\t\tp.proxyHandler(p, () => {\n\t\t\t\tconst url = createUrl(p.url, p.query);\n\t\t\t\tformpost(url, p.data, opts, callback, p.callbackID, p.timeout);\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\t}\n\n\tcallback({error: 'invalid_request'});\n};\n","// XHR: uses CORS to make requests\nconst instanceOf = require('../../object/instanceOf.js');\nconst extract = require('../../string/extract.js');\nconst jsonParse = require('../../string/jsonParse.js');\nconst tryCatch = require('../../object/tryCatch.js');\nconst rewire = require('../../object/rewire.js');\n\nconst match_headers = /([a-z0-9\\-]+):\\s*(.*);?/gi;\n\nmodule.exports = rewire(xhr);\n\nfunction xhr(method, url, responseType, headers, data, callback) {\n\n\tconst r = new XMLHttpRequest();\n\n\t// Make it CAPITAL\n\tmethod = method.toUpperCase();\n\n\t// Define the callback function\n\tr.onload = () => {\n\t\t// Response\n\t\tlet response = r.response;\n\n\t\t// Was this text\n\t\tif (!response && (r.responseType === '' || r.responseType === 'text')) {\n\t\t\tresponse = r.responseText;\n\t\t}\n\n\t\t// Is this json?\n\t\tif (typeof(response) === 'string' && responseType === 'json') {\n\n\t\t\t// Set this to the json response\n\t\t\t// Fallback if the browser did not defined responseJSON...\n\t\t\tresponse = r.responseJSON || jsonParse(r.responseText || r.response);\n\t\t}\n\n\t\tconst headers = extract(r.getAllResponseHeaders(), match_headers);\n\t\theaders.statusCode = r.status;\n\n\t\tcallback(response, headers);\n\t};\n\n\tr.onerror = r.onload;\n\n\t// Should we add the query to the URL?\n\tif (method === 'GET' || method === 'DELETE') {\n\t\tdata = null;\n\t}\n\telse if (data && typeof (data) !== 'string' &&\n\t\t!instanceOf(data, window.FormData) &&\n\t\t!instanceOf(data, window.File) &&\n\t\t!instanceOf(data, window.Blob))\t{\n\t\t// Loop through and add formData\n\t\tdata = toFormData(data);\n\t}\n\n\t// Open the path, async\n\tr.open(method, url, true);\n\n\t// Set responseType if supported\n\tif ('responseType' in r) {\n\n\t\ttryCatch(() => {\n\t\t\t// Setting this to an unsupported value can result in a \"SYNTAX_ERR: DOM Exception 12\"\n\t\t\tr.responseType = responseType;\n\t\t});\n\t}\n\telse if (responseType === 'blob') {\n\t\tr.overrideMimeType('text/plain; charset=x-user-defined');\n\t}\n\n\t// Set any bespoke headers\n\tif (headers) {\n\t\tfor (const x in headers) {\n\t\t\tr.setRequestHeader(x, headers[x]);\n\t\t}\n\t}\n\n\tr.send(data);\n\n\treturn r;\n}\n\n\nfunction toFormData(data) {\n\tconst f = new FormData();\n\tfor (const x in data) {\n\t\tif (data.hasOwnProperty(x)) {\n\t\t\tif (instanceOf(data[x], window.HTMLInputElement) && 'files' in data[x]) {\n\t\t\t\tif (data[x].files.length > 0) {\n\t\t\t\t\tf.append(x, data[x].files[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (instanceOf(data[x], window.Blob)) {\n\t\t\t\tf.append(x, data[x], data.name);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tf.append(x, data[x]);\n\t\t\t}\n\t\t}\n\t}\n\treturn f;\n}\n","const createElement = require('./createElement.js');\n\nmodule.exports = (tagName, prop, parent = document.body) => {\n\tconst elm = createElement(tagName, prop);\n\tparent.appendChild(elm);\n\treturn elm;\n};\n","const each = require('./each.js');\n\nmodule.exports = (elements, props) =>\n\teach(elements, element => {\n\t\tfor (const x in props) {\n\t\t\tconst prop = props[x];\n\t\t\tif (typeof prop === 'function') {\n\t\t\t\telement[x] = prop;\n\t\t\t}\n\t\t\telse {\n\t\t\t\telement.setAttribute(x, prop);\n\t\t\t}\n\t\t}\n\t});\n","const attr = require('./attr.js');\n\nmodule.exports = (tagName, attrs) => {\n\tconst elm = document.createElement(tagName);\n\tattr(elm, attrs);\n\treturn elm;\n};\n","const instanceOf = require('../object/instanceOf.js');\n\nmodule.exports = (type, data) => {\n\tconst test = `HTML${ (type || '').replace(\n\t\t/^[a-z]/,\n\t\tm => m.toUpperCase()\n\t)}Element`;\n\n\tif (!data) {\n\t\treturn false;\n\t}\n\n\tif (window[test]) {\n\t\treturn instanceOf(data, window[test]);\n\t}\n\telse if (window.Element) {\n\t\treturn instanceOf(data, window.Element) && (!type || (data.tagName && data.tagName.toLowerCase() === type));\n\t}\n\telse {\n\t\treturn (!(instanceOf(data, Object) || instanceOf(data, Array) || instanceOf(data, String) || instanceOf(data, Number)) && data.tagName && data.tagName.toLowerCase() === type);\n\t}\n};\n","const isDom = require('./isDom.js');\nconst instanceOf = require('../object/instanceOf.js');\nconst toArray = require('../array/toArray.js');\n\nmodule.exports = (matches, callback = () => {}) => {\n\n\tif (isDom(matches)) {\n\t\tmatches = [matches];\n\t}\n\telse if (typeof(matches) === 'string') {\n\t\tmatches = document.querySelectorAll(matches);\n\t}\n\n\tif (!instanceOf(matches, Array)) {\n\t\tmatches = toArray(matches);\n\t}\n\n\tif (callback) {\n\t\tmatches.forEach(callback);\n\t}\n\n\treturn matches;\n};\n","const append = require('./append.js');\nconst param = require('../string/param.js');\n\nmodule.exports = src => {\n\n\tconst style = param({\n\t\tposition: 'absolute',\n\t\tleft: '-1000px',\n\t\tbottom: 0,\n\t\theight: '1px',\n\t\twidth: '1px'\n\t}, ';', ':');\n\n\treturn append('iframe', {src, style});\n};\n","const instanceOf = require('../object/instanceOf.js');\n\nconst _HTMLElement = typeof HTMLElement !== 'undefined' ? HTMLElement : Element;\nconst _HTMLDocument = typeof HTMLDocument !== 'undefined' ? HTMLDocument : Document;\nconst _Window = window.constructor;\n\nmodule.exports = test =>\n\tinstanceOf(test, _HTMLElement) ||\n\t\tinstanceOf(test, _HTMLDocument) ||\n\t\tinstanceOf(test, _Window)\n;\n","// IE does not support `new Event()`\n// See https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events for details\nconst dict = {bubbles: true, cancelable: true};\n\nlet createEvent = (eventname, options = dict) =>\n\tnew Event(eventname, options);\n\ntry {\n\tcreateEvent('test');\n}\ncatch (e) {\n\tcreateEvent = (eventname, options = dict) => {\n\t\tconst e = document.createEvent('Event');\n\t\te.initEvent(eventname, !!options.bubbles, !!options.cancelable);\n\t\treturn e;\n\t};\n}\n\nmodule.exports = createEvent;\n","// on.js\n// Listen to events, this is a wrapper for addEventListener\nconst each = require('../dom/each.js');\nconst createEvent = require('./createEvent.js');\n\n// Return\nmodule.exports = (elements, eventname) => each(elements, el => el.dispatchEvent(createEvent(eventname)));\n\n","// Global Events\n// Attach the callback to the window object\n// Return its unique reference\nconst random = require('../string/random.js');\n\nmodule.exports = (callback, guid, prefix = '_tricks_') => {\n\n\t// If the guid has not been supplied then create a new one.\n\tguid = guid || prefix + random();\n\n\t// Define the callback function\n\twindow[guid] = handle.bind(null, guid, callback);\n\n\treturn guid;\n};\n\nfunction handle(guid, callback, ...args) {\n\tcallback(...args) && delete window[guid];\n}\n","// on.js\n// Listen to events, this is a wrapper for addEventListener\n\nconst each = require('../dom/each.js');\nconst SEPERATOR = /[\\s\\,]+/;\n\n// See https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection\nlet supportsPassive = false;\ntry {\n\tconst opts = Object.defineProperty({}, 'passive', {\n\t\tget() {\n\t\t\tsupportsPassive = true;\n\t\t}\n\t});\n\twindow.addEventListener('test', null, opts);\n}\ncatch (e) {\n\t// Continue\n}\n\n\nmodule.exports = (elements, eventnames, callback, options = false) => {\n\n\tif (typeof options === 'object' && options.passive && !supportsPassive) {\n\t\t// Override the passive mark\n\t\toptions = false;\n\t}\n\n\teventnames = eventnames.split(SEPERATOR);\n\treturn each(elements, el => eventnames.forEach(eventname => el.addEventListener(eventname, callback, options)));\n};\n","// Makes it easier to assign parameters, where some are optional\n// @param o object\n// @param a arguments\nmodule.exports = (o, args) => {\n\n\tconst p = {};\n\tlet i = 0;\n\tlet t = null;\n\tlet x = null;\n\n\t// 'x' is the first key in the list of object parameters\n\tfor (x in o) {\n\t\tif (o.hasOwnProperty(x)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Passing in hash object of arguments?\n\t// Where the first argument can't be an object\n\tif ((args.length === 1) && (typeof (args[0]) === 'object') && o[x] !== 'o!') {\n\n\t\t// Could this object still belong to a property?\n\t\t// Check the object keys if they match any of the property keys\n\t\tfor (x in args[0]) {\n\t\t\tif (o.hasOwnProperty(x)) {\n\t\t\t\t// Does this key exist in the property list?\n\t\t\t\tif (x in o) {\n\t\t\t\t\t// Yes this key does exist so its most likely this function has been invoked with an object parameter\n\t\t\t\t\t// Return first argument as the hash of all arguments\n\t\t\t\t\treturn args[0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Else loop through and account for the missing ones.\n\tfor (x in o) {\n\t\tif (o.hasOwnProperty(x)) {\n\n\t\t\tt = typeof (args[i]);\n\n\t\t\tif ((typeof (o[x]) === 'function' && o[x].test(args[i])) || (typeof (o[x]) === 'string' && (\n\t\t\t\t(o[x].indexOf('s') > -1 && t === 'string') ||\n\t\t\t\t(o[x].indexOf('o') > -1 && t === 'object') ||\n\t\t\t\t(o[x].indexOf('i') > -1 && t === 'number') ||\n\t\t\t\t(o[x].indexOf('a') > -1 && t === 'object') ||\n\t\t\t\t(o[x].indexOf('f') > -1 && t === 'function')\n\t\t\t\t))\n\t\t\t\t) {\n\t\t\t\tp[x] = args[i++];\n\t\t\t}\n\n\t\t\telse if (typeof (o[x]) === 'string' && o[x].indexOf('!') > -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn p;\n};\n","const isBinary = require('./isBinary.js');\n\n// Create a clone of an object\nmodule.exports = function clone(obj) {\n\t// Does not clone DOM elements, nor Binary data, e.g. Blobs, Filelists\n\tif (obj === null || typeof (obj) !== 'object' || obj instanceof Date || 'nodeName' in obj || isBinary(obj) || (typeof FormData === 'function' && obj instanceof FormData)) {\n\t\treturn obj;\n\t}\n\n\tif (Array.isArray(obj)) {\n\t\t// Clone each item in the array\n\t\treturn obj.map(clone.bind(this));\n\t}\n\n\t// But does clone everything else.\n\tconst _clone = {};\n\tfor (const x in obj) {\n\t\t_clone[x] = clone(obj[x]);\n\t}\n\n\treturn _clone;\n};\n","// Return all the properties in 'a' which aren't in 'b';\nmodule.exports = (a, b) => {\n\tif (a || !b) {\n\t\tconst r = {};\n\t\tfor (const x in a) {\n\t\t\t// is this a custom property?\n\t\t\tif (!(x in b)) {\n\t\t\t\tr[x] = a[x];\n\t\t\t}\n\t\t}\n\t\treturn r;\n\t}\n\treturn a;\n};\n","const instanceOf = require('./instanceOf.js');\n\nmodule.exports = function extend(r, ...args) {\n\targs.forEach(o => {\n\t\tif (Array.isArray(r) && Array.isArray(o)) {\n\t\t\tArray.prototype.push.apply(r, o);\n\t\t}\n\t\telse if (instanceOf(r, Object) && instanceOf(o, Object) && r !== o) {\n\t\t\tfor (const x in o) {\n\t\t\t\tr[x] = extend(r[x], o[x]);\n\t\t\t}\n\t\t}\n\t\telse if (Array.isArray(o)) {\n\t\t\t// Clone it\n\t\t\tr = o.slice(0);\n\t\t}\n\t\telse {\n\t\t\tr = o;\n\t\t}\n\t});\n\treturn r;\n};\n","const isBinary = require('./isBinary.js');\n\n// Some of the providers require that only multipart is used with non-binary forms.\n// This function checks whether the form contains binary data\nmodule.exports = data => {\n\tfor (const x in data) {\n\t\tif (data.hasOwnProperty(x)) {\n\t\t\tif (isBinary(data[x])) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n};\n\n","module.exports = (test, root) => root && test instanceof root;\n","const instanceOf = require('./instanceOf.js');\n\nmodule.exports = data =>\n\tinstanceOf(data, Object) && (\n\t(instanceOf(data, typeof HTMLInputElement !== 'undefined' ? HTMLInputElement : undefined) && data.type === 'file') ||\n\t(instanceOf(data, typeof HTMLInput !== 'undefined' ? HTMLInput : undefined) && data.type === 'file') ||\n\tinstanceOf(data, typeof FileList !== 'undefined' ? FileList : undefined) ||\n\tinstanceOf(data, typeof File !== 'undefined' ? File : undefined) ||\n\tinstanceOf(data, typeof Blob !== 'undefined' ? Blob : undefined));\n","module.exports = obj => {\n\n\t// Scalar\n\tif (!obj)\n\t\treturn true;\n\n\t// Array\n\tif (Array.isArray(obj)) {\n\t\treturn !obj.length;\n\t}\n\telse if (typeof (obj) === 'object') {\n\t\t// Object\n\t\tfor (const key in obj) {\n\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n};\n","// Extend an object\nconst extend = require('./extend.js');\n\nmodule.exports = (...args) => {\n\targs.unshift({});\n\treturn extend(...args);\n};\n","// Pubsub extension\n// A contructor superclass for adding event menthods, on, off, emit.\nconst setImmediate = require('../time/setImmediate.js');\n\nconst separator = /[\\s\\,]+/;\n\nmodule.exports = function() {\n\n\t// If this doesn't support getPrototype then we can't get prototype.events of the parent\n\t// So lets get the current instance events, and add those to a parent property\n\tthis.parent = {\n\t\tevents: this.events,\n\t\tfindEvents: this.findEvents,\n\t\tparent: this.parent,\n\t\tutils: this.utils\n\t};\n\n\tthis.events = {};\n\n\tthis.off = off;\n\tthis.on = on;\n\tthis.emit = emit;\n\tthis.emitAfter = emitAfter;\n\tthis.findEvents = findEvents;\n\n\treturn this;\n};\n\n\n// On, subscribe to events\n// @param evt   string\n// @param callback  function\nfunction on(evt, callback) {\n\n\tif (callback && typeof (callback) === 'function') {\n\t\tevt.split(separator).forEach(name => {\n\t\t\t// Has this event already been fired on this instance?\n\t\t\tthis.events[name] = [callback].concat(this.events[name] || []);\n\t\t});\n\t}\n\n\treturn this;\n}\n\n\n// Off, unsubscribe to events\n// @param evt   string\n// @param callback  function\nfunction off(evt, callback) {\n\n\tthis.findEvents(evt, function(name, index) {\n\t\tif (!callback || this.events[name][index] === callback) {\n\t\t\tthis.events[name][index] = null;\n\t\t}\n\t});\n\n\treturn this;\n}\n\n// Emit\n// Triggers any subscribed events\nfunction emit(evt, ...args) {\n\n\t// Append the eventname to the end of the arguments\n\targs.push(evt);\n\n\t// Handler\n\tconst handler = function(name, index) {\n\n\t\t// Replace the last property with the event name\n\t\targs[args.length - 1] = (name === '*' ? evt : name);\n\n\t\t// Trigger\n\t\tthis.events[name][index].apply(this, args);\n\t};\n\n\t// Find the callbacks which match the condition and call\n\tlet _this = this;\n\twhile (_this && _this.findEvents) {\n\n\t\t// Find events which match\n\t\t_this.findEvents(`${evt },*`, handler);\n\t\t_this = _this.parent;\n\t}\n\n\treturn this;\n}\n\n// Easy functions\nfunction emitAfter(...args) {\n\n\tsetImmediate(() => {\n\t\tthis.emit(...args);\n\t});\n\n\treturn this;\n}\n\nfunction findEvents(evt, callback) {\n\n\tconst a = evt.split(separator);\n\n\tfor (const name in this.events) {\n\t\tif (this.events.hasOwnProperty(name)) {\n\n\t\t\tif (a.indexOf(name) > -1) {\n\n\t\t\t\tthis.events[name].forEach(triggerCallback.bind(this, name, callback));\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction triggerCallback(name, callback, handler, i) {\n\t// Does the event handler exist?\n\tif (handler) {\n\t\t// Emit on the local instance of this\n\t\tcallback.call(this, name, i);\n\t}\n}\n","// Rewire functions\nmodule.exports = fn => {\n\tconst f = (...args) => f.fn.apply(null, args);\n\tf.fn = fn;\n\treturn f;\n};\n","// Convert Data-URI to Blob string\n\nconst reg = /^data\\:([^;,]+(\\;charset=[^;,]+)?)(\\;base64)?,/i;\n\nmodule.exports = dataURI => {\n\tconst m = dataURI.match(reg);\n\tif (!m) {\n\t\treturn dataURI;\n\t}\n\n\tconst binary = atob(dataURI.replace(reg, ''));\n\tconst len = binary.length;\n\tconst arr = new Uint8Array(len);\n\n\tfor (let i = 0; i < len; i++) {\n\t\tarr[i] = binary.charCodeAt(i);\n\t}\n\n\treturn new Blob([arr], {type: m[1]});\n};\n","module.exports = fn => {\n\ttry {\n\t\treturn fn.call(null);\n\t}\n\tcatch (e) {\n\t\t// Continue\n\t}\n};\n","const querystringify = require('./querystringify.js');\nconst isEmpty = require('../object/isEmpty.js');\n\nmodule.exports = (url, params, formatFunction) => {\n\n\tlet reg;\n\n\tif (params) {\n\t\t// Set default formatting function\n\t\tformatFunction = formatFunction || encodeURIComponent;\n\n\t\t// Override the items in the URL which already exist\n\t\tfor (const x in params) {\n\t\t\tconst str = `([\\\\?\\\\&])${ x }=[^\\\\&]*`;\n\t\t\treg = new RegExp(str);\n\t\t\tif (url.match(reg)) {\n\t\t\t\turl = url.replace(reg, `$1${ x }=${ formatFunction(params[x])}`);\n\t\t\t\tdelete params[x];\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!isEmpty(params)) {\n\t\treturn url + (url.indexOf('?') > -1 ? '&' : '?') + querystringify(params, formatFunction);\n\t}\n\n\treturn url;\n};\n","// Extract\n// Extract the parameters of an URL string\n// @param string s, string to decode\n\nmodule.exports = (str, match_params, formatFunction = x => x) => {\n\tconst a = {};\n\tlet m;\n\twhile ((m = match_params.exec(str))) {\n\t\ta[m[1]] = formatFunction(m[2]);\n\t}\n\treturn a;\n};\n","const tryCatch = require('../object/tryCatch.js');\nmodule.exports = str => tryCatch(() => JSON.parse(str));\n","// Param\n// Explode/encode the parameters of an URL string/object\n// @param string s, string to decode\nmodule.exports = (hash, delimiter = '&', seperator = '=', formatFunction = o => o) =>\n\tObject.keys(hash).map(name => {\n\t\tconst value = formatFunction(hash[name]);\n\t\treturn name + (value !== null ? seperator + value : '');\n\t}).join(delimiter)\n;\n","// Create a Query string\nconst extract = require('./extract.js');\n\nconst trim_left = /^[\\#\\?]/;\nconst match_params = /([^=\\/\\&]+)=([^\\&]+)/g;\n\nmodule.exports = (str, formatFunction = decodeURIComponent) => {\n\tstr = str.replace(trim_left, '');\n\treturn extract(str, match_params, formatFunction);\n};\n","// Create a Query string\nconst param = require('./param.js');\nconst fn = value => (value === '?' ? '?' : encodeURIComponent(value));\n\nmodule.exports = (o, formatter = fn) => param(o, '&', '=', formatter);\n","module.exports = () => parseInt(Math.random() * 1e12, 10).toString(36);\n","module.exports = ('withCredentials' in new XMLHttpRequest());\n","module.exports = typeof setImmediate === 'function' ? setImmediate : (cb => setTimeout(cb, 0));\n","// Close a window\nmodule.exports = window => {\n\n\t// Is this window within an Iframe?\n\tif (window.frameElement) {\n\t\twindow.parent.document.body.removeChild(window.frameElement);\n\t}\n\telse {\n\t\t// Close this current window\n\t\ttry {\n\t\t\twindow.close();\n\t\t}\n\t\tcatch (e) {\n\t\t\t// Continue\n\t\t}\n\n\t\t// IOS bug wont let us close a popup if still loading\n\t\tif (window.addEventListener) {\n\t\t\twindow.addEventListener('load', () => window.close());\n\t\t}\n\t}\n};\n","// popup\n// Easy options as a hash\nconst param = require('../string/param.js');\n\nconst documentElement = document.documentElement;\nconst dimensions = [['Top', 'Height'], ['Left', 'Width']];\n\nmodule.exports = (url, target, options = {}) => {\n\n\t// centers the popup correctly to the current display of a multi-screen display.\n\tdimensions.forEach(generatePosition.bind(options));\n\n\t// Open\n\treturn window.open(url, target, param(options, ','));\n};\n\nfunction generatePosition ([Position, Dimension]) {\n\tconst position = Position.toLowerCase();\n\tconst dimension = Dimension.toLowerCase();\n\tif (this[dimension] && !(position in this)) {\n\t\tconst dualScreenPos = window[`screen${ Position}`] !== undefined ? window[`screen${ Position}`] : screen[position];\n\t\tconst d = screen[dimension] || window[`inner${ Dimension}`] || documentElement[`client${ Dimension}`];\n\t\tthis[position] = parseInt((d - this[dimension]) / 2, 10) + dualScreenPos;\n\t}\n}\n","module.exports = path => {\n\n\t// If the path is empty\n\tif (!path) {\n\t\treturn window.location;\n\t}\n\n\t// Chrome and FireFox support new URL() to extract URL objects\n\telse if (window.URL && URL instanceof Function && URL.length !== 0) {\n\t\treturn new URL(path, window.location);\n\t}\n\n\t// Ugly shim, it works!\n\telse {\n\t\tconst a = document.createElement('a');\n\t\ta.href = path;\n\t\t// Return clone for IE compatibility view.\n\t\treturn a.cloneNode(false);\n\t}\n};\n","require('babel-polyfill');\n\n// Services\nrequire('./modules/dropbox.js');\nrequire('./modules/facebook.js');\nrequire('./modules/flickr.js');\nrequire('./modules/foursquare.js');\nrequire('./modules/github.js');\nrequire('./modules/google.js');\nrequire('./modules/instagram.js');\nrequire('./modules/joinme.js');\nrequire('./modules/linkedin.js');\nrequire('./modules/soundcloud.js');\nrequire('./modules/twitter.js');\nrequire('./modules/vk.js');\nrequire('./modules/windows.js');\nrequire('./modules/yahoo.js');\n\n// Environment tweaks\nrequire('./hello.phonegap.js');\nrequire('./hello.chromeapp.js');\n\n// Export HelloJS\nmodule.exports = require('./hello.js');\n","/* global chrome */\n// Script to support ChromeApps\n// This overides the hello.utils.popup method to support chrome.identity.launchWebAuthFlow\n// See https://developer.chrome.com/apps/app_identity#non\n\nconst URL = require('tricks/window/url');\nconst hello = require('./hello');\n\n// Is this a chrome app?\nif (typeof chrome === 'object' && typeof chrome.identity === 'object' && chrome.identity.launchWebAuthFlow) {\n\n\t// Swap the popup method\n\thello.utils.popup = function(url) {\n\n\t\treturn _open(url, true);\n\n\t};\n\n\t// Swap the hidden iframe method\n\thello.utils.iframe = function(url) {\n\n\t\t_open(url, false);\n\n\t};\n\n\t// Swap the request_cors method\n\thello.utils.request_cors = function(callback) {\n\n\t\tcallback();\n\n\t\t// Always run as CORS\n\n\t\treturn true;\n\t};\n\n\t// Swap the storage method\n\tlet _cache = {};\n\tchrome.storage.local.get('hello', r => {\n\t\t// Update the cache\n\t\t_cache = r.hello || {};\n\t});\n\n\thello.utils.store = function(name, value) {\n\n\t\t// Get all\n\t\tif (arguments.length === 0) {\n\t\t\treturn _cache;\n\t\t}\n\n\t\t// Get\n\t\tif (arguments.length === 1) {\n\t\t\treturn _cache[name] || null;\n\t\t}\n\n\t\t// Set\n\t\tif (value) {\n\t\t\t_cache[name] = value;\n\t\t\tchrome.storage.local.set({hello: _cache});\n\t\t\treturn value;\n\t\t}\n\n\t\t// Delete\n\t\tif (value === null) {\n\t\t\tdelete _cache[name];\n\t\t\tchrome.storage.local.set({hello: _cache});\n\t\t\treturn null;\n\t\t}\n\t};\n}\n\n// Open function\nfunction _open(url, interactive) {\n\n\t// Launch\n\tconst ref = {\n\t\tclosed: false\n\t};\n\n\t\t// Launch the webAuthFlow\n\tchrome.identity.launchWebAuthFlow({\n\t\turl,\n\t\tinteractive\n\t}, responseUrl => {\n\n\t\t// Did the user cancel this prematurely\n\t\tif (responseUrl === undefined) {\n\t\t\tref.closed = true;\n\t\t\treturn;\n\t\t}\n\n\t\t// Split appart the URL\n\t\tconst a = URL(responseUrl);\n\n\t\t// The location can be augmented in to a location object like so...\n\t\t// We dont have window operations on the popup so lets create some\n\t\tconst _popup = {\n\t\t\tlocation: {\n\n\t\t\t\t// Change the location of the popup\n\t\t\t\tassign(url) {\n\n\t\t\t\t\t// If there is a secondary reassign\n\t\t\t\t\t// In the case of OAuth1\n\t\t\t\t\t// Trigger this in non-interactive mode.\n\t\t\t\t\t_open(url, false);\n\t\t\t\t},\n\n\t\t\t\tsearch: a.search,\n\t\t\t\thash: a.hash,\n\t\t\t\thref: a.href\n\t\t\t},\n\t\t\tclose() {}\n\t\t};\n\n\t\t\t// Then this URL contains information which HelloJS must process\n\t\t\t// URL string\n\t\t\t// Window - any action such as window relocation goes here\n\t\t\t// Opener - the parent window which opened this, aka this script\n\n\t\thello.utils.responseHandler(_popup, window);\n\t});\n\n\t// Return the reference\n\treturn ref;\n}\n","/**\n * @hello.js\n *\n * HelloJS is a client side Javascript SDK for making OAuth2 logins and subsequent REST calls.\n *\n * @author Andrew Dodson\n * @website https://adodson.com/hello.js/\n\n * @copyright Andrew Dodson, 2012 - 2015\n * @license MIT: You are free to use and modify this code for any use, on the condition that this copyright notice remains.\n */\n\nconst argmap = require('tricks/object/args');\nconst clone = require('tricks/object/clone');\nconst closeWindow = require('tricks/window/close');\nconst createUrl = require('tricks/string/createUrl');\nconst diffKey = require('tricks/object/diffKey');\nconst diff = require('tricks/array/diff');\nconst extend = require('tricks/object/extend');\nconst globalCallback = require('tricks/events/globalCallback');\nconst iframe = require('tricks/dom/hiddenFrame');\nconst isEmpty = require('tricks/object/isEmpty');\nconst merge = require('tricks/object/merge');\nconst param = require('tricks/string/queryparse');\nconst popup = require('tricks/window/popup');\nconst pubsub = require('tricks/object/pubsub');\nconst random = require('tricks/string/random');\nconst request = require('tricks/http/request');\nconst store = require('tricks/browser/agent/localStorage');\nconst unique = require('tricks/array/unique');\nconst Url = require('tricks/window/url');\n\nconst hello = function(name) {\n\treturn hello.use(name);\n};\n\nmodule.exports = hello;\n\nextend(hello, {\n\n\tsettings: {\n\n\t\t// OAuth2 authentication defaults\n\t\tredirect_uri: (typeof location !== 'undefined' ? location.href.split('#')[0] : null),\n\t\tresponse_type: 'token',\n\t\tdisplay: 'popup',\n\t\tstate: '',\n\n\t\t// OAuth1 shim\n\t\t// The path to the OAuth1 server for signing user requests\n\t\t// Want to recreate your own? Checkout https://github.com/MrSwitch/node-oauth-shim\n\t\toauth_proxy: 'https://auth-server.herokuapp.com/proxy',\n\n\t\t// API timeout in milliseconds\n\t\ttimeout: 20000,\n\n\t\t// Popup Options\n\t\tpopup: {\n\t\t\tresizable: 1,\n\t\t\tscrollbars: 1,\n\t\t\twidth: 500,\n\t\t\theight: 550\n\t\t},\n\n\t\t// Default scope\n\t\t// Many services require atleast a profile scope,\n\t\t// HelloJS automatially includes the value of provider.scope_map.basic\n\t\t// If that's not required it can be removed via hello.settings.scope.length = 0;\n\t\tscope: ['basic'],\n\n\t\t// Scope Maps\n\t\t// This is the default module scope, these are the defaults which each service is mapped too.\n\t\t// By including them here it prevents the scope from being applied accidentally\n\t\tscope_map: {\n\t\t\tbasic: ''\n\t\t},\n\n\t\t// Default service / network\n\t\tdefault_service: null,\n\n\t\t// Force authentication\n\t\t// When hello.login is fired.\n\t\t// (null): ignore current session expiry and continue with login\n\t\t// (true): ignore current session expiry and continue with login, ask for user to reauthenticate\n\t\t// (false): if the current session looks good for the request scopes return the current session.\n\t\tforce: null,\n\n\t\t// Page URL\n\t\t// When 'display=page' this property defines where the users page should end up after redirect_uri\n\t\t// Ths could be problematic if the redirect_uri is indeed the final place,\n\t\t// Typically this circumvents the problem of the redirect_url being a dumb relay page.\n\t\tpage_uri: (typeof location !== 'undefined' ? location.href : null)\n\t},\n\n\t// Service configuration objects\n\tservices: {},\n\n\t// Use\n\t// Define a new instance of the HelloJS library with a default service\n\tuse(service) {\n\n\t\t// Create self, which inherits from its parent\n\t\tconst self = Object.create(this);\n\n\t\t// Inherit the prototype from its parent\n\t\tself.settings = Object.create(this.settings);\n\n\t\t// Define the default service\n\t\tif (service) {\n\t\t\tself.settings.default_service = service;\n\t\t}\n\n\t\t// Create an instance of Events\n\t\tpubsub.call(self);\n\n\t\treturn self;\n\t},\n\n\t// Initialize\n\t// Define the client_ids for the endpoint services\n\t// @param object o, contains a key value pair, service => clientId\n\t// @param object opts, contains a key value pair of options used for defining the authentication defaults\n\t// @param number timeout, timeout in seconds\n\tinit(services, options) {\n\n\t\tif (!services) {\n\t\t\treturn this.services;\n\t\t}\n\n\t\t// Define provider credentials\n\t\t// Reformat the ID field\n\t\tfor (const x in services) {\n\t\t\tif (services.hasOwnProperty(x)) {\n\t\t\t\tif (typeof (services[x]) !== 'object') {\n\t\t\t\t\tservices[x] = {id: services[x]};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Merge services if there already exists some\n\t\textend(this.services, services);\n\n\t\t// Update the default settings with this one.\n\t\tif (options) {\n\t\t\textend(this.settings, options);\n\n\t\t\t// Do this immediatly incase the browser changes the current path.\n\t\t\tif ('redirect_uri' in options) {\n\t\t\t\tthis.settings.redirect_uri = Url(options.redirect_uri).href;\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t// Login\n\t// Using the endpoint\n\t// @param network stringify       name to connect to\n\t// @param options object    (optional)  {display mode, is either none|popup(default)|page, scope: email,birthday,publish, .. }\n\t// @param callback  function  (optional)  fired on signin\n\tasync login(...args) {\n\n\t\tconst utils = this.utils;\n\t\t// Get parameters\n\t\tconst p = argmap({network: 's', options: 'o', callback: 'f'}, args);\n\n\t\t// Local vars\n\t\tlet url;\n\n\t\t// Get all the custom options and store to be appended to the querystring\n\t\tconst qs = diffKey(p.options, this.settings);\n\n\t\t// Merge/override options with app defaults\n\t\tconst opts = p.options = merge(this.settings, p.options || {});\n\n\t\t// Merge/override options with app defaults\n\t\topts.popup = merge(this.settings.popup, p.options.popup || {});\n\n\t\t// Network\n\t\tp.network = p.network || this.settings.default_service;\n\n\t\t// Is our service valid?\n\t\tif (typeof (p.network) !== 'string' || !(p.network in this.services)) {\n\t\t\t// Trigger the default login.\n\t\t\t// Ahh we dont have one.\n\t\t\tthrow error('invalid_network', 'The provided network was not recognized');\n\t\t}\n\n\t\tconst provider = this.services[p.network];\n\n\t\t// Create a global listener to capture events triggered out of scope\n\t\tconst callbackId = `_hellojs_${random()}`;\n\n\t\tconst prs = [];\n\n\t\tprs.push(new Promise((accept, reject) => {\n\t\t\tglobalCallback(str => {\n\n\t\t\t\t// The responseHandler returns a string, lets save this locally\n\t\t\t\tlet obj;\n\n\t\t\t\tif (str) {\n\t\t\t\t\tobj = JSON.parse(str);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tobj = error('cancelled', 'The authentication was not completed');\n\t\t\t\t}\n\n\t\t\t\t// Handle these response using the local\n\t\t\t\t// Trigger on the parent\n\t\t\t\tif (!obj.error) {\n\n\t\t\t\t\t// Save on the parent window the new credentials\n\t\t\t\t\t// This fixes an IE10 bug i think... atleast it does for me.\n\t\t\t\t\tutils.store(obj.network, obj);\n\n\t\t\t\t\t// Fulfill a successful login\n\t\t\t\t\taccept({\n\t\t\t\t\t\tnetwork: obj.network,\n\t\t\t\t\t\tauthResponse: obj\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Reject a successful login\n\t\t\t\t\treject(obj);\n\t\t\t\t}\n\t\t\t}, callbackId);\n\t\t}));\n\n\t\tconst redirectUri = Url(opts.redirect_uri).href;\n\n\t\t// May be a space-delimited list of multiple, complementary types\n\t\tlet responseType = provider.oauth.response_type || opts.response_type;\n\n\t\t// Fallback to token if the module hasn't defined a grant url\n\t\tif (/\\bcode\\b/.test(responseType) && !provider.oauth.grant) {\n\t\t\tresponseType = responseType.replace(/\\bcode\\b/, 'token');\n\t\t}\n\n\t\t// Query string parameters, we may pass our own arguments to form the querystring\n\t\tp.qs = merge(qs, {\n\t\t\tclient_id: encodeURIComponent(provider.id),\n\t\t\tresponse_type: encodeURIComponent(responseType),\n\t\t\tredirect_uri: encodeURIComponent(redirectUri),\n\t\t\tstate: {\n\t\t\t\tclient_id: provider.id,\n\t\t\t\tnetwork: p.network,\n\t\t\t\tdisplay: opts.display,\n\t\t\t\tcallback: callbackId,\n\t\t\t\tstate: opts.state,\n\t\t\t\tredirect_uri: redirectUri\n\t\t\t}\n\t\t});\n\n\t\t// Get current session for merging scopes, and for quick auth response\n\t\tconst session = utils.store(p.network);\n\n\t\t// Scopes (authentication permisions)\n\t\t// Ensure this is a string - IE has a problem moving Arrays between windows\n\t\t// Append the setup scope\n\t\tconst SCOPE_SPLIT = /[,\\s]+/;\n\n\t\t// Include default scope settings (cloned).\n\t\tlet scope = this.settings.scope ? [this.settings.scope.toString()] : [];\n\n\t\t// Extend the providers scope list with the default\n\t\tconst scopeMap = merge(this.settings.scope_map, provider.scope || {});\n\n\t\t// Add user defined scopes...\n\t\tif (opts.scope) {\n\t\t\tscope.push(opts.scope.toString());\n\t\t}\n\n\t\t// Append scopes from a previous session.\n\t\t// This helps keep app credentials constant,\n\t\t// Avoiding having to keep tabs on what scopes are authorized\n\t\tif (session && 'scope' in session && session.scope instanceof String) {\n\t\t\tscope.push(session.scope);\n\t\t}\n\n\t\t// Join and Split again\n\t\tscope = scope.join(',').split(SCOPE_SPLIT);\n\n\t\t// Format remove duplicates and empty values\n\t\tscope = unique(scope).filter(filterEmpty);\n\n\t\t// Save the the scopes to the state with the names that they were requested with.\n\t\tp.qs.state.scope = scope.join(',');\n\n\t\t// Map scopes to the providers naming convention\n\t\t// Does this have a mapping?\n\t\tscope = scope.map(item => ((item in scopeMap) ? scopeMap[item] : item));\n\n\t\t// Stringify and Arrayify so that double mapped scopes are given the chance to be formatted\n\t\tscope = scope.join(',').split(SCOPE_SPLIT);\n\n\t\t// Again...\n\t\t// Format remove duplicates and empty values\n\t\tscope = unique(scope).filter(filterEmpty);\n\n\t\t// Join with the expected scope delimiter into a string\n\t\tp.qs.scope = scope.join(provider.scope_delim || ',');\n\n\t\t// Is the user already signed in with the appropriate scopes, valid access_token?\n\t\tif (opts.force === false) {\n\n\t\t\tif (session && 'access_token' in session && session.access_token && 'expires' in session && session.expires > ((new Date()).getTime() / 1e3)) {\n\t\t\t\t// What is different about the scopes in the session vs the scopes in the new login?\n\t\t\t\tconst a = diff((session.scope || '').split(SCOPE_SPLIT), (p.qs.state.scope || '').split(SCOPE_SPLIT));\n\t\t\t\tif (a.length === 0) {\n\n\t\t\t\t\t// OK trigger the callback\n\t\t\t\t\treturn {\n\t\t\t\t\t\tunchanged: true,\n\t\t\t\t\t\tnetwork: p.network,\n\t\t\t\t\t\tauthResponse: session\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Page URL\n\t\tif (opts.display === 'page' && opts.page_uri) {\n\t\t\t// Add a page location, place to endup after session has authenticated\n\t\t\tp.qs.state.page_uri = Url(opts.page_uri).href;\n\t\t}\n\n\t\t// Bespoke\n\t\t// Override login querystrings from auth_options\n\t\tif ('login' in provider && typeof (provider.login) === 'function') {\n\t\t\t// Format the paramaters according to the providers formatting function\n\t\t\tprovider.login(p);\n\t\t}\n\n\t\t// Add OAuth to state\n\t\t// Where the service is going to take advantage of the oauth_proxy\n\t\tif (!/\\btoken\\b/.test(responseType) ||\n\t\tparseInt(provider.oauth.version, 10) < 2 ||\n\t\t(opts.display === 'none' && provider.oauth.grant && session && session.refresh_token)) {\n\n\t\t\t// Add the oauth endpoints\n\t\t\tp.qs.state.oauth = provider.oauth;\n\n\t\t\t// Add the proxy url\n\t\t\tp.qs.state.oauth_proxy = opts.oauth_proxy;\n\n\t\t}\n\n\t\t// Convert state to a string\n\t\tp.qs.state = encodeURIComponent(JSON.stringify(p.qs.state));\n\n\t\t// URL\n\t\tif (parseInt(provider.oauth.version, 10) === 1) {\n\n\t\t\t// Turn the request to the OAuth Proxy for 3-legged auth\n\t\t\turl = createUrl(opts.oauth_proxy, p.qs, encodeFunction);\n\t\t}\n\n\t\t// Refresh token\n\t\telse if (opts.display === 'none' && provider.oauth.grant && session && session.refresh_token) {\n\n\t\t\t// Add the refresh_token to the request\n\t\t\tp.qs.refresh_token = session.refresh_token;\n\n\t\t\t// Define the request path\n\t\t\turl = createUrl(opts.oauth_proxy, p.qs, encodeFunction);\n\t\t}\n\t\telse {\n\t\t\turl = createUrl(provider.oauth.auth, p.qs, encodeFunction);\n\t\t}\n\n\t\t// Broadcast this event as an auth:init\n\t\temit('auth.init', p);\n\n\t\t// Execute\n\t\t// Trigger how we want self displayed\n\t\tif (opts.display === 'none') {\n\t\t\t// Sign-in in the background, iframe\n\t\t\tutils.iframe(url, redirectUri);\n\t\t}\n\n\t\t// Triggering popup?\n\t\telse if (opts.display === 'popup') {\n\n\t\t\tconst win = utils.popup(url, redirectUri, opts.popup);\n\n\t\t\tprs.push(new Promise((accept, reject) => {\n\n\t\t\t\tconst timer = setInterval(() => {\n\t\t\t\t\tif (!win || win.closed) {\n\t\t\t\t\t\tclearInterval(timer);\n\n\t\t\t\t\t\tlet response = error('cancelled', 'Login has been cancelled');\n\n\t\t\t\t\t\tif (!popup) {\n\t\t\t\t\t\t\tresponse = error('blocked', 'Popup was blocked');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponse.network = p.network;\n\n\t\t\t\t\t\treject(response);\n\t\t\t\t\t}\n\t\t\t\t}, 100);\n\n\t\t\t}));\n\t\t}\n\n\t\telse {\n\t\t\twindow.location = url;\n\t\t}\n\n\t\tfunction encodeFunction(s) {\n\t\t\treturn s;\n\t\t}\n\n\t\tfunction filterEmpty(s) {\n\t\t\treturn !!s;\n\t\t}\n\n\t\t// Return the first success or failure...\n\t\tconst promise = Promise.race(prs);\n\n\t\t// Bind callback to both reject and fulfill states\n\t\tpromise.then(p.callback, p.callback);\n\n\t\t// Trigger an event on the global listener\n\t\tfunction emit(s, value) {\n\t\t\thello.emit(s, value);\n\t\t}\n\n\t\tpromise.then(emit.bind(this, 'auth.login auth'), emit.bind(this, 'auth.failed auth'));\n\n\t\treturn promise;\n\t},\n\n\t// Remove any data associated with a given service\n\t// @param string name of the service\n\t// @param function callback\n\tasync logout(...args) {\n\n\t\tconst utils = this.utils;\n\n\t\tconst p = argmap({name: 's', options: 'o', callback: 'f'}, args);\n\n\t\tconst prs = [];\n\n\t\tp.options = p.options || {};\n\n\t\t// Network\n\t\tp.name = p.name || this.settings.default_service;\n\t\tp.authResponse = utils.store(p.name);\n\n\t\tif (p.name && !(p.name in this.services)) {\n\n\t\t\tthrow error('invalid_network', 'The network was unrecognized');\n\n\t\t}\n\t\telse if (p.name && p.authResponse) {\n\n\t\t\tconst promiseLogout = new Promise(accept => {\n\t\t\t\t// Run an async operation to remove the users session\n\t\t\t\tconst _opts = {};\n\n\t\t\t\tif (p.options.force) {\n\t\t\t\t\tlet logout = this.services[p.name].logout;\n\t\t\t\t\tif (logout) {\n\t\t\t\t\t\t// Convert logout to URL string,\n\t\t\t\t\t\t// If no string is returned, then this function will handle the logout async style\n\t\t\t\t\t\tif (typeof (logout) === 'function') {\n\t\t\t\t\t\t\tlogout = logout(accept, p);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If logout is a string then assume URL and open in iframe.\n\t\t\t\t\t\tif (typeof (logout) === 'string') {\n\t\t\t\t\t\t\tutils.iframe(logout);\n\t\t\t\t\t\t\t_opts.force = null;\n\t\t\t\t\t\t\t_opts.message = 'Logout success on providers site was indeterminate';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (logout === undefined) {\n\t\t\t\t\t\t\t// The callback function will handle the response.\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\taccept(_opts);\n\t\t\t})\n\t\t\t\t.then(opts => {\n\n\t\t\t\t\t// Remove from the store\n\t\t\t\t\tutils.store(p.name, null);\n\n\t\t\t\t\t// Emit events by default\n\t\t\t\t\treturn merge({\n\t\t\t\t\t\tnetwork: p.name\n\t\t\t\t\t}, opts || {});\n\t\t\t\t});\n\n\t\t\tprs.push(promiseLogout);\n\n\t\t}\n\t\telse {\n\t\t\tthrow error('invalid_session', 'There was no session to remove');\n\t\t}\n\n\t\t// Promse\n\t\tconst promise = Promise.race(prs);\n\n\t\t// Add callback to events\n\t\tpromise.then(p.callback, p.callback);\n\n\t\t// Trigger an event on the global listener\n\t\tpromise.then(\n\t\t\tvalue => hello.emit('auth.logout auth', value),\n\t\t\terr => hello.emit('error', err)\n\t\t);\n\n\t\treturn promise;\n\t},\n\n\t// Returns all the sessions that are subscribed too\n\t// @param string optional, name of the service to get information about.\n\tgetAuthResponse(service) {\n\n\t\t// If the service doesn't exist\n\t\tservice = service || this.settings.default_service;\n\n\t\tif (!service || !(service in this.services)) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.utils.store(service) || null;\n\t},\n\n\t// Events: placeholder for the events\n\tevents: {}\n});\n\nfunction error(code, message) {\n\treturn {\n\t\terror: {\n\t\t\tcode,\n\t\t\tmessage\n\t\t}\n\t};\n}\n\nhello.utils = {\n\tiframe,\n\tpopup,\n\trequest,\n\tstore\n};\n\n// Core utilities\nextend(hello.utils, {\n\n\t// OAuth and API response handler\n\tresponseHandler(window, parent) {\n\t\tconst utils = this;\n\n\t\tlet p;\n\t\tconst location = window.location;\n\n\t\tconst redirect = (location.assign && location.assign.bind(location)) || (url => {\n\t\t\twindow.location = url;\n\t\t});\n\n\t\t// Is this an auth relay message which needs to call the proxy?\n\t\tp = param(location.search);\n\n\t\t// OAuth2 or OAuth1 server response?\n\t\tif (p && p.state && (p.code || p.oauth_token)) {\n\n\t\t\tconst state = JSON.parse(p.state);\n\n\t\t\t// Add this path as the redirect_uri\n\t\t\tp.redirect_uri = state.redirect_uri || location.href.replace(/[?#].*$/, '');\n\n\t\t\t// Redirect to the host\n\t\t\tconst path = `${state.oauth_proxy}?${param(p)}`;\n\n\t\t\tredirect(path);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Save session, from redirected authentication\n\t\t// #access_token has come in?\n\t\t//\n\t\t// FACEBOOK is returning auth errors within as a query_string... thats a stickler for consistency.\n\t\t// SoundCloud is the state in the querystring and the token in the hashtag, so we'll mix the two together\n\n\t\tp = merge(param(location.search || ''), param(location.hash || ''));\n\n\t\t// If p.state\n\t\tif (p && 'state' in p) {\n\n\t\t\t// Remove any addition information\n\t\t\t// E.g. p.state = 'facebook.page';\n\t\t\ttry {\n\t\t\t\tconst a = JSON.parse(p.state);\n\t\t\t\textend(p, a);\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\thello.emit('error', 'Could not decode state parameter');\n\t\t\t}\n\n\t\t\t// Access_token?\n\t\t\tif (('access_token' in p && p.access_token) && p.network) {\n\n\t\t\t\tif (!p.expires_in || parseInt(p.expires_in, 10) === 0) {\n\t\t\t\t\t// If p.expires_in is unset, set to 0\n\t\t\t\t\tp.expires_in = 0;\n\t\t\t\t}\n\n\t\t\t\tp.expires_in = parseInt(p.expires_in, 10);\n\t\t\t\tp.expires = ((new Date()).getTime() / 1e3) + (p.expires_in || (60 * 60 * 24 * 365));\n\n\t\t\t\t// Lets use the \"state\" to assign it to one of our networks\n\t\t\t\tauthCallback(p, window, parent);\n\t\t\t}\n\n\t\t\t// Error=?\n\t\t\t// &error_description=?\n\t\t\t// &state=?\n\t\t\telse if (('error' in p && p.error) && p.network) {\n\n\t\t\t\tp.error = {\n\t\t\t\t\tcode: p.error,\n\t\t\t\t\tmessage: p.error_message || p.error_description\n\t\t\t\t};\n\n\t\t\t\t// Let the state handler handle it\n\t\t\t\tauthCallback(p, window, parent);\n\t\t\t}\n\n\t\t\t// API call, or a cancelled login\n\t\t\t// Result is serialized JSON string\n\t\t\telse if (p.callback && p.callback in parent) {\n\n\t\t\t\t// Trigger a function in the parent\n\t\t\t\tconst res = 'result' in p && p.result ? JSON.parse(p.result) : false;\n\n\t\t\t\t// Trigger the callback on the parent\n\t\t\t\tcallback(parent, p.callback)(res);\n\t\t\t\tcloseWindow(window);\n\t\t\t}\n\n\t\t\t// If this page is still open\n\t\t\tif (p.page_uri) {\n\t\t\t\tredirect(p.page_uri);\n\t\t\t}\n\t\t}\n\n\t\t// OAuth redirect, fixes URI fragments from being lost in Safari\n\t\t// (URI Fragments within 302 Location URI are lost over HTTPS)\n\t\t// Loading the redirect.html before triggering the OAuth Flow seems to fix it.\n\t\telse if ('oauth_redirect' in p) {\n\n\t\t\tredirect(decodeURIComponent(p.oauth_redirect));\n\t\t\treturn;\n\t\t}\n\n\t\t// Trigger a callback to authenticate\n\t\tfunction authCallback(obj, window, parent) {\n\n\t\t\tconst cb = obj.callback;\n\t\t\tconst network = obj.network;\n\n\t\t\t// Trigger the callback on the parent\n\t\t\tutils.store(network, obj);\n\n\t\t\t// If this is a page request it has no parent or opener window to handle callbacks\n\t\t\tif (('display' in obj) && obj.display === 'page') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Remove from session object\n\t\t\tif (parent && cb && cb in parent) {\n\n\t\t\t\ttry {\n\t\t\t\t\tdelete obj.callback;\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\t// continue\n\t\t\t\t}\n\n\t\t\t\t// Update store\n\t\t\t\tutils.store(network, obj);\n\n\t\t\t\t// Call the globalEvent function on the parent\n\t\t\t\t// It's safer to pass back a string to the parent,\n\t\t\t\t// Rather than an object/array (better for IE8)\n\t\t\t\tconst str = JSON.stringify(obj);\n\n\t\t\t\ttry {\n\t\t\t\t\tcallback(parent, cb)(str);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\t// Error thrown whilst executing parent callback\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcloseWindow(window);\n\t\t}\n\n\t\tfunction callback(parent, callbackID) {\n\t\t\tif (callbackID.indexOf('_hellojs_') !== 0) {\n\t\t\t\treturn function() {\n\t\t\t\t\tthrow `Could not execute callback ${callbackID}`;\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn parent[callbackID];\n\t\t}\n\t}\n});\n\n\n// Events\n// Extend the hello object with its own event instance\npubsub.call(hello);\n\n///////////////////////////////////\n// Monitoring session state\n// Check for session changes\n///////////////////////////////////\n\n(function(hello) {\n\n\t// Monitor for a change in state and fire\n\tconst oldSessions = {};\n\n\t// Hash of expired tokens\n\tconst expired = {};\n\n\t// Listen to other triggers to Auth events, use these to update this\n\thello.on('auth.login, auth.logout', auth => {\n\t\tif (auth && typeof (auth) === 'object' && auth.network) {\n\t\t\toldSessions[auth.network] = hello.utils.store(auth.network) || {};\n\t\t}\n\t});\n\n\t(function self() {\n\n\t\tconst CURRENT_TIME = ((new Date()).getTime() / 1e3);\n\n\t\t// Loop through the services\n\t\tfor (const name in hello.services) {\n\t\t\tif (hello.services.hasOwnProperty(name)) {\n\n\t\t\t\tif (!hello.services[name].id) {\n\t\t\t\t// We haven't attached an ID so dont listen.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Get session\n\t\t\t\tconst session = hello.utils.store(name) || {};\n\t\t\t\tconst provider = hello.services[name];\n\t\t\t\tconst oldSess = oldSessions[name] || {};\n\n\t\t\t\tconst emit = function(eventName) {\n\t\t\t\t\thello.emit(`auth.${eventName}`, {\n\t\t\t\t\t\tnetwork: name,\n\t\t\t\t\t\tauthResponse: session\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\t// Listen for globalEvents that did not get triggered from the child\n\t\t\t\tif (session && 'callback' in session) {\n\n\t\t\t\t\t// To do remove from session object...\n\t\t\t\t\tconst cb = session.callback;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdelete session.callback;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\t// Continue\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update store\n\t\t\t\t\t// Removing the callback\n\t\t\t\t\thello.utils.store(name, session);\n\n\t\t\t\t\t// Emit global events\n\t\t\t\t\ttry {\n\t\t\t\t\t\twindow[cb](session);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\t// Continue\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Refresh token\n\t\t\t\tif (session && ('expires' in session) && session.expires < CURRENT_TIME) {\n\n\t\t\t\t\t// If auto refresh is possible\n\t\t\t\t\t// Either the browser supports\n\t\t\t\t\tconst refresh = provider.refresh || session.refresh_token;\n\n\t\t\t\t\t// Has the refresh been run recently?\n\t\t\t\t\tif (refresh && (!(name in expired) || expired[name] < CURRENT_TIME)) {\n\t\t\t\t\t\t// Try to resignin\n\t\t\t\t\t\thello.emit('notice', `${name} has expired trying to resignin`);\n\t\t\t\t\t\thello.login(name, {display: 'none', force: false});\n\n\t\t\t\t\t\t// Update expired, every 10 minutes\n\t\t\t\t\t\texpired[name] = CURRENT_TIME + 600;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Does this provider not support refresh\n\t\t\t\t\telse if (!refresh && !(name in expired)) {\n\t\t\t\t\t// Label the event\n\t\t\t\t\t\temit('expired');\n\t\t\t\t\t\texpired[name] = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If session has expired then we dont want to store its value until it can be established that its been updated\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Has session changed?\n\t\t\t\telse if (oldSess.access_token === session.access_token &&\n\t\t\toldSess.expires === session.expires) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Access_token has been removed\n\t\t\t\telse if (!session.access_token && oldSess.access_token) {\n\t\t\t\t\temit('logout');\n\t\t\t\t}\n\n\t\t\t\t// Access_token has been created\n\t\t\t\telse if (session.access_token && !oldSess.access_token) {\n\t\t\t\t\temit('login');\n\t\t\t\t}\n\n\t\t\t\t// Access_token has been updated\n\t\t\t\telse if (session.expires !== oldSess.expires) {\n\t\t\t\t\temit('update');\n\t\t\t\t}\n\n\t\t\t\t// Updated stored session\n\t\t\t\toldSessions[name] = session;\n\n\t\t\t\t// Remove the expired flags\n\t\t\t\tif (name in expired) {\n\t\t\t\t\tdelete expired[name];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check error events\n\t\tsetTimeout(self, 1000);\n\t})();\n\n})(hello);\n\n// EOF CORE lib\n//////////////////////////////////\n\n/////////////////////////////////////////\n// API\n// @param path    string\n// @param query   object (optional)\n// @param method  string (optional)\n// @param data    object (optional)\n// @param timeout integer (optional)\n// @param callback  function (optional)\n\nhello.api = async function(...args) {\n\n\t// Arguments\n\tconst p = argmap({path: 's!', query: 'o', method: 's', data: 'o', timeout: 'i', callback: 'f'}, args);\n\n\t// Remove the network from path, e.g. facebook:/me/friends\n\t// Results in { network : facebook, path : me/friends }\n\tif (!p || !p.path) {\n\t\tthrow error('invalid_path', 'Missing the path parameter from the request');\n\t}\n\n\t// Method\n\tp.method = (p.method || 'get').toLowerCase();\n\n\t// Headers\n\tp.headers = p.headers || {};\n\n\t// Response format\n\tp.responseType = p.responseType || 'json';\n\n\t// Query\n\tp.query = p.query || {};\n\n\t// If get, put all parameters into query\n\tif (p.method === 'get' || p.method === 'delete') {\n\t\textend(p.query, p.data);\n\t\tp.data = {};\n\t}\n\n\tconst data = p.data = p.data || {};\n\n\tp.path = p.path.replace(/^\\/+/, '');\n\tconst a = (p.path.split(/[/:]/, 2) || [])[0].toLowerCase();\n\n\tif (a in this.services) {\n\t\tp.network = a;\n\t\tconst reg = new RegExp(`^${a}:?/?`);\n\t\tp.path = p.path.replace(reg, '');\n\t}\n\n\t// Network & Provider\n\t// Define the network that this request is made for\n\tp.network = this.settings.default_service = p.network || this.settings.default_service;\n\tconst o = this.services[p.network];\n\n\t// INVALID\n\t// Is there no service by the given network name?\n\tif (!o) {\n\t\tthrow error('invalid_network', `Could not match the service requested: ${  p.network}`);\n\t}\n\n\t// PATH\n\t// As long as the path isn't flagged as unavaiable, e.g. path == false\n\n\tif (!(!(p.method in o) || !(p.path in o[p.method]) || o[p.method][p.path] !== false)) {\n\t\tthrow error('invalid_path', 'The provided path is not available on the selected network');\n\t}\n\n\t// PROXY\n\t// OAuth1 calls always need a proxy\n\n\tif (!p.oauth_proxy) {\n\t\tp.oauth_proxy = this.settings.oauth_proxy;\n\t}\n\n\tif (!('proxy' in p)) {\n\t\tp.proxy = p.oauth_proxy && o.oauth && parseInt(o.oauth.version, 10) === 1;\n\t}\n\n\t// TIMEOUT\n\t// Adopt timeout from global settings by default\n\n\tif (!('timeout' in p)) {\n\t\tp.timeout = this.settings.timeout;\n\t}\n\n\t// Format response\n\t// Whether to run the raw response through post processing.\n\tif (!('formatResponse' in p)) {\n\t\tp.formatResponse = true;\n\t}\n\n\t// Get the current session\n\t// Append the access_token to the query\n\tp.authResponse = this.getAuthResponse(p.network);\n\tif (p.authResponse && p.authResponse.access_token) {\n\t\tp.query.access_token = p.authResponse.access_token;\n\t}\n\n\tlet url = p.path;\n\tlet m;\n\n\t// Store the query as options\n\t// This is used to populate the request object before the data is augmented by the prewrap handlers.\n\tp.options = clone(p.query);\n\n\t// Clone the data object\n\t// Prevent this script overwriting the data of the incoming object.\n\t// Ensure that everytime we run an iteration the callbacks haven't removed some data\n\tp.data = clone(data);\n\n\t// URL Mapping\n\t// Is there a map for the given URL?\n\tconst actions = o[{delete: 'del'}[p.method] || p.method] || {};\n\n\t// Extrapolate the QueryString\n\t// Provide a clean path\n\t// Move the querystring into the data\n\tif (p.method === 'get') {\n\n\t\tconst query = url.split(/[?#]/)[1];\n\t\tif (query) {\n\t\t\textend(p.query, param(query));\n\n\t\t\t// Remove the query part from the URL\n\t\t\turl = url.replace(/\\?.*?(#|$)/, '$1');\n\t\t}\n\t}\n\n\t// Is the hash fragment defined\n\tif ((m = url.match(/#(.+)/, ''))) {\n\t\turl = url.split('#')[0];\n\t\tp.path = m[1];\n\t}\n\telse if (url in actions) {\n\t\tp.path = url;\n\t\turl = actions[url];\n\t}\n\telse if ('default' in actions) {\n\t\turl = actions.default;\n\t}\n\n\t// Redirect Handler\n\t// This defines for the Form+Iframe+Hash hack where to return the results too.\n\tp.redirect_uri = this.settings.redirect_uri;\n\n\t// Define FormatHandler\n\t// The request can be procesed in a multitude of ways\n\t// Here's the options - depending on the browser and endpoint\n\tp.xhr = o.xhr;\n\tp.jsonp = o.jsonp;\n\tp.form = o.form;\n\n\t// Define Proxy handler\n\tp.proxyHandler = (p, callback) => {\n\n\t\t// Are we signing the request?\n\t\tlet sign;\n\n\t\t// OAuth1\n\t\t// Remove the token from the query before signing\n\t\tif (p.authResponse && p.authResponse.oauth && parseInt(p.authResponse.oauth.version, 10) === 1) {\n\n\t\t\t// OAUTH SIGNING PROXY\n\t\t\tsign = p.query.access_token;\n\n\t\t\t// Remove the access_token\n\t\t\tdelete p.query.access_token;\n\n\t\t\t// Enfore use of Proxy\n\t\t\tp.proxy = true;\n\t\t}\n\n\t\t// POST body to querystring\n\t\tif (p.data && (p.method === 'get' || p.method === 'delete')) {\n\t\t\t// Attach the p.data to the querystring.\n\t\t\textend(p.query, p.data);\n\t\t\tp.data = null;\n\t\t}\n\n\t\t// Construct the path\n\t\tlet path = createUrl(p.url, p.query);\n\n\t\t// Proxy the request through a server\n\t\t// Used for signing OAuth1\n\t\t// And circumventing services without Access-Control Headers\n\t\tif (p.proxy) {\n\t\t\t// Use the proxy as a path\n\t\t\tpath = createUrl(p.oauth_proxy, {\n\t\t\t\tpath,\n\t\t\t\taccess_token: sign || '',\n\n\t\t\t\t// This will prompt the request to be signed as though it is OAuth1\n\t\t\t\tthen: p.proxy_response_type || (p.method.toLowerCase() === 'get' ? 'redirect' : 'proxy'),\n\t\t\t\tmethod: p.method.toLowerCase(),\n\t\t\t\tsuppress_response_codes: true\n\t\t\t});\n\t\t}\n\n\t\tcallback(path);\n\t};\n\n\n\t// If url needs a base\n\t// Wrap everything in\n\n\tlet promise;\n\n\t// Make request\n\tif (typeof (url) === 'function') {\n\t\t// Does self have its own callback?\n\t\tpromise = new Promise(accept => url(p, accept));\n\t}\n\telse {\n\t\t// Else the URL is a string\n\t\tpromise = Promise.resolve(url);\n\t}\n\n\t// Handle the url...\n\tpromise = promise.then(url => {\n\n\t\t// Format the string if it needs it\n\t\turl = url.replace(/@\\{([a-z_-]+)(\\|.*?)?\\}/gi, (m, key, defaults) => {\n\t\t\tlet val = defaults ? defaults.replace(/^\\|/, '') : '';\n\t\t\tif (key in p.query) {\n\t\t\t\tval = p.query[key];\n\t\t\t\tdelete p.query[key];\n\t\t\t}\n\t\t\telse if (p.data && key in p.data) {\n\t\t\t\tval = p.data[key];\n\t\t\t\tdelete p.data[key];\n\t\t\t}\n\t\t\telse if (!defaults) {\n\t\t\t\tthrow error('missing_attribute', `The attribute ${  key  } is missing from the request`);\n\t\t\t}\n\n\t\t\treturn val;\n\t\t});\n\n\t\t// Add base\n\t\tif (!url.match(/^https?:\\/\\//)) {\n\t\t\turl = o.base + url;\n\t\t}\n\n\t\t// Define the request URL\n\t\tp.url = url;\n\n\t\t// Make the HTTP request with the curated request object\n\t\t// CALLBACK HANDLER\n\t\t// @ response object\n\t\t// @ statusCode integer if available\n\t\treturn new Promise(accept => this.utils.request(p, (data, headers) => accept({data, headers})));\n\n\t})\n\t\t.then(resp => {\n\n\t\t\tlet {data} = resp;\n\t\t\tconst {headers} = resp;\n\n\t\t\t// Is this a raw response?\n\t\t\tif (!p.formatResponse) {\n\t\t\t\t// Bad request? error statusCode or otherwise contains an error response vis JSONP?\n\t\t\t\tif (typeof headers === 'object' ? (headers.statusCode >= 400) : (typeof r === 'object' && 'error' in data)) {\n\t\t\t\t\tthrow data;\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// Should this be an object\n\t\t\tif (data === true) {\n\t\t\t\tdata = {success: true};\n\t\t\t}\n\n\t\t\t// The delete callback needs a better response\n\t\t\tif (p.method === 'delete') {\n\t\t\t\tdata = (!data || isEmpty(data)) ? {success: true} : data;\n\t\t\t}\n\n\t\t\t// FORMAT RESPONSE?\n\t\t\t// Does self request have a corresponding formatter\n\t\t\tif (o.wrap && ((p.path in o.wrap) || ('default' in o.wrap))) {\n\t\t\t\tconst wrap = (p.path in o.wrap ? p.path : 'default');\n\n\t\t\t\t// FORMAT RESPONSE\n\t\t\t\tconst b = o.wrap[wrap](data, headers, p);\n\n\t\t\t\t// Has the response been utterly overwritten?\n\t\t\t\t// Typically self augments the existing object.. but for those rare occassions\n\t\t\t\tif (b) {\n\t\t\t\t\tdata = b;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Is there a next_page defined in the response?\n\t\t\tif (data && 'paging' in data && data.paging.next) {\n\n\t\t\t\t// Add the relative path if it is missing from the paging/next path\n\t\t\t\tif (data.paging.next[0] === '?') {\n\t\t\t\t\tdata.paging.next = p.path + data.paging.next;\n\t\t\t\t}\n\n\t\t\t\t// The relative path has been defined, lets markup the handler in the HashFragment\n\t\t\t\telse {\n\t\t\t\t\tdata.paging.next += `#${  p.path}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Dispatch to listeners\n\t\t\t// Emit events which pertain to the formatted response\n\t\t\tif (!data || 'error' in data) {\n\t\t\t\tthrow data;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t});\n\n\t// Completed event callback\n\tpromise.then(p.callback, p.callback);\n\n\treturn promise;\n};\n\n\n/////////////////////////////////////\n//\n// Save any access token that is in the current page URL\n// Handle any response solicited through iframe hash tag following an API request\n//\n/////////////////////////////////////\n\nhello.utils.responseHandler(window, window.opener || window.parent);\n\nmodule.exports = hello;","// Override's for phonegap environment\nconst URL = require('tricks/window/url');\nconst hello = require('./hello');\n\n// Is this a phonegap implementation?\nif (/^file:\\/{3}[^/]/.test(window.location.href) && window.cordova) {\n\n\t// Augment the hidden iframe method\n\thello.utils.iframe = function(url, redirectUri) {\n\t\thello.utils.popup(url, redirectUri, {hidden: 'yes'});\n\t};\n\n\t// Augment the popup\n\tconst utilPopup = hello.utils.popup;\n\n\t// Replace popup\n\thello.utils.popup = function(url, redirectUri, options) {\n\n\t\t// Run the standard\n\t\tconst popup = utilPopup.call(this, url, redirectUri, options);\n\n\t\t// Create a function for reopening the popup, and assigning events to the new popup object\n\t\t// PhoneGap support\n\t\t// Add an event listener to listen to the change in the popup windows URL\n\t\t// This must appear before popup.focus();\n\t\ttry {\n\t\t\tif (popup && popup.addEventListener) {\n\n\t\t\t\t// Get the origin of the redirect URI\n\n\t\t\t\tconst a = URL(redirectUri);\n\t\t\t\tconst redirectUriOrigin = a.origin || `${a.protocol}//{a.hostname}`;\n\n\t\t\t\t// Listen to changes in the InAppBrowser window\n\n\t\t\t\tpopup.addEventListener('loadstart', e => {\n\n\t\t\t\t\tconst url = e.url;\n\n\t\t\t\t\t// Is this the path, as given by the redirectUri?\n\t\t\t\t\t// Check the new URL agains the redirectUriOrigin.\n\t\t\t\t\t// According to #63 a user could click 'cancel' in some dialog boxes ....\n\t\t\t\t\t// The popup redirects to another page with the same origin, yet we still wish it to close.\n\n\t\t\t\t\tif (url.indexOf(redirectUriOrigin) !== 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Split appart the URL\n\t\t\t\t\tconst a = URL(url);\n\n\t\t\t\t\t// We dont have window operations on the popup so lets create some\n\t\t\t\t\t// The location can be augmented in to a location object like so...\n\n\t\t\t\t\tconst _popup = {\n\t\t\t\t\t\tlocation: {\n\t\t\t\t\t\t\t// Change the location of the popup\n\t\t\t\t\t\t\tassign(location) {\n\n\t\t\t\t\t\t\t\t// Unfourtunatly an app is may not change the location of a InAppBrowser window.\n\t\t\t\t\t\t\t\t// So to shim this, just open a new one.\n\t\t\t\t\t\t\t\tpopup.executeScript({code: `${window.location.href} = \"${location};\"`});\n\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\tsearch: a.search,\n\t\t\t\t\t\t\thash: a.hash,\n\t\t\t\t\t\t\thref: a.href\n\t\t\t\t\t\t},\n\t\t\t\t\t\tclose() {\n\t\t\t\t\t\t\tif (popup.close) {\n\t\t\t\t\t\t\t\tpopup.close();\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tpopup.closed = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcatch (_e) {\n\t\t\t\t\t\t\t\t\t// Continue\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Then this URL contains information which HelloJS must process\n\t\t\t\t\t// URL string\n\t\t\t\t\t// Window - any action such as window relocation goes here\n\t\t\t\t\t// Opener - the parent window which opened this, aka this script\n\n\t\t\t\t\thello.utils.responseHandler(_popup, window);\n\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tcatch (e) {\n\t\t\t// Continue\n\t\t}\n\n\t\treturn popup;\n\t};\n\n}\n","const hello = require('../hello.js');\nconst toBlob = require('tricks/object/toBlob');\nconst querystringify = require('tricks/string/querystringify');\n\n{\n\n\t// OAuth1\n\tconst OAuth1Settings = {\n\t\tversion: '1.0',\n\t\tauth: 'https://www.dropbox.com/1/oauth/authorize',\n\t\trequest: 'https://api.dropbox.com/1/oauth/request_token',\n\t\ttoken: 'https://api.dropbox.com/1/oauth/access_token'\n\t};\n\n\t// OAuth2 Settings\n\tconst OAuth2Settings = {\n\t\tversion: 2,\n\t\tauth: 'https://www.dropbox.com/1/oauth2/authorize',\n\t\tgrant: 'https://api.dropbox.com/1/oauth2/token'\n\t};\n\n\t// Initiate the Dropbox module\n\thello.init({\n\n\t\tdropbox: {\n\n\t\t\tname: 'Dropbox',\n\n\t\t\toauth: OAuth2Settings,\n\n\t\t\tlogin(p) {\n\t\t\t\t// OAuth2 non-standard adjustments\n\t\t\t\tp.qs.scope = '';\n\n\t\t\t\t// Should this be run as OAuth1?\n\t\t\t\t// If the redirect_uri is is HTTP (non-secure) then its required to revert to the OAuth1 endpoints\n\t\t\t\tconst redirect = decodeURIComponent(p.qs.redirect_uri);\n\t\t\t\tif (redirect.indexOf('http:') === 0 && redirect.indexOf('http://localhost/') !== 0) {\n\n\t\t\t\t\t// Override the dropbox OAuth settings.\n\t\t\t\t\thello.services.dropbox.oauth = OAuth1Settings;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Override the dropbox OAuth settings.\n\t\t\t\t\thello.services.dropbox.oauth = OAuth2Settings;\n\t\t\t\t}\n\n\t\t\t\t// The dropbox login window is a different size\n\t\t\t\tp.options.popup.width = 1000;\n\t\t\t\tp.options.popup.height = 1000;\n\t\t\t},\n\n\t\t\t/*\n\t\t\t\tDropbox does not allow insecure HTTP URI's in the redirect_uri field\n\t\t\t\t...otherwise I'd love to use OAuth2\n\n\t\t\t\tFollow request https://forums.dropbox.com/topic.php?id=106505\n\n\t\t\t\tp.qs.response_type = 'code';\n\t\t\t\toauth: {\n\t\t\t\t\tversion: 2,\n\t\t\t\t\tauth: 'https://www.dropbox.com/1/oauth2/authorize',\n\t\t\t\t\tgrant: 'https://api.dropbox.com/1/oauth2/token'\n\t\t\t\t}\n\t\t\t*/\n\n\t\t\t// API Base URL\n\t\t\tbase: 'https://api.dropbox.com/1/',\n\n\t\t\t// Bespoke setting: this is states whether to use the custom environment of Dropbox or to use their own environment\n\t\t\t// Because it's notoriously difficult for Dropbox too provide access from other webservices, this defaults to Sandbox\n\t\t\troot: 'sandbox',\n\n\t\t\t// Map GET requests\n\t\t\tget: {\n\t\t\t\tme: 'account/info',\n\n\t\t\t\t// Https://www.dropbox.com/developers/core/docs#metadata\n\t\t\t\t'me/files': req('metadata/auto/@{parent|}'),\n\t\t\t\t'me/folder': req('metadata/auto/@{id}'),\n\t\t\t\t'me/folders': req('metadata/auto/'),\n\n\t\t\t\tdefault(p, callback) {\n\t\t\t\t\tif (p.path.match('https://api-content.dropbox.com/1/files/')) {\n\t\t\t\t\t\t// This is a file, return binary data\n\t\t\t\t\t\tp.method = 'blob';\n\t\t\t\t\t}\n\n\t\t\t\t\tcallback(p.path);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tpost: {\n\t\t\t\t'me/files'(p, callback) {\n\n\t\t\t\t\tconst path = p.data.parent;\n\t\t\t\t\tconst fileName = p.data.name;\n\n\t\t\t\t\tp.data = {\n\t\t\t\t\t\tfile: p.data.file\n\t\t\t\t\t};\n\n\t\t\t\t\t// Does this have a data-uri to upload as a file?\n\t\t\t\t\tif (typeof (p.data.file) === 'string') {\n\t\t\t\t\t\tp.data.file = toBlob(p.data.file);\n\t\t\t\t\t}\n\n\t\t\t\t\tcallback(`https://api-content.dropbox.com/1/files_put/auto/${path}/${fileName}`);\n\t\t\t\t},\n\n\t\t\t\t'me/folders'(p, callback) {\n\n\t\t\t\t\tconst path = p.data.name;\n\t\t\t\t\tp.data = {};\n\n\t\t\t\t\tconst qs = querystringify({path});\n\n\t\t\t\t\tcallback(`fileops/create_folder?root=@{root|sandbox}&${qs}`);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Map DELETE requests\n\t\t\tdel: {\n\t\t\t\t'me/files': 'fileops/delete?root=@{root|sandbox}&path=@{id}',\n\t\t\t\t'me/folder': 'fileops/delete?root=@{root|sandbox}&path=@{id}'\n\t\t\t},\n\n\t\t\twrap: {\n\t\t\t\tme(o) {\n\t\t\t\t\tformatError(o);\n\t\t\t\t\tif (!o.uid) {\n\t\t\t\t\t\treturn o;\n\t\t\t\t\t}\n\n\t\t\t\t\to.name = o.display_name;\n\t\t\t\t\tconst m = o.name.split(' ');\n\t\t\t\t\to.first_name = m.shift();\n\t\t\t\t\to.last_name = m.join(' ');\n\t\t\t\t\to.id = o.uid;\n\t\t\t\t\tdelete o.uid;\n\t\t\t\t\tdelete o.display_name;\n\t\t\t\t\treturn o;\n\t\t\t\t},\n\n\t\t\t\tdefault(o, headers, req) {\n\t\t\t\t\tformatError(o);\n\t\t\t\t\tif (o.is_dir && o.contents) {\n\t\t\t\t\t\to.data = o.contents;\n\t\t\t\t\t\tdelete o.contents;\n\n\t\t\t\t\t\to.data.forEach(item => {\n\t\t\t\t\t\t\titem.root = o.root;\n\t\t\t\t\t\t\tformatFile(item, headers, req);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tformatFile(o, headers, req);\n\n\t\t\t\t\tif (o.is_deleted) {\n\t\t\t\t\t\to.success = true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Doesn't return the CORS headers\n\t\t\txhr(p) {\n\n\t\t\t\t// The proxy supports allow-cross-origin-resource\n\t\t\t\t// Alas that's the only thing we're using.\n\t\t\t\tif (p.data && p.data.file) {\n\t\t\t\t\tconst file = p.data.file;\n\t\t\t\t\tif (file) {\n\t\t\t\t\t\tif (file.files) {\n\t\t\t\t\t\t\tp.data = file.files[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tp.data = file;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (p.method === 'delete') {\n\t\t\t\t\tp.method = 'post';\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\tform(p, qs) {\n\t\t\t\tdelete qs.state;\n\t\t\t\tdelete qs.redirect_uri;\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction formatError(o) {\n\t\tif (o && 'error' in o) {\n\t\t\to.error = {\n\t\t\t\tcode: 'server_error',\n\t\t\t\tmessage: o.error.message || o.error\n\t\t\t};\n\t\t}\n\t}\n\n\tfunction formatFile(o, headers, req) {\n\n\t\tif (typeof o !== 'object' ||\n\t\t\t(typeof Blob !== 'undefined' && o instanceof Blob) ||\n\t\t\t(typeof ArrayBuffer !== 'undefined' && o instanceof ArrayBuffer)) {\n\t\t\t// This is a file, let it through unformatted\n\t\t\treturn;\n\t\t}\n\n\t\tif ('error' in o) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet path = (o.root !== 'app_folder' ? o.root : '') + o.path.replace(/&/g, '%26');\n\t\tpath = path.replace(/^\\//, '');\n\t\tif (o.thumb_exists) {\n\t\t\tconst full_path = encodeURIComponent(`https://api-content.dropbox.com/1/thumbnails/auto/${path}?format=jpeg&size=m`);\n\t\t\to.thumbnail = `${req.oauth_proxy}?path=${full_path}&access_token=${req.options.access_token}`;\n\t\t}\n\n\t\to.type = (o.is_dir ? 'folder' : o.mime_type);\n\t\to.name = o.path.replace(/.*\\//g, '');\n\t\tif (o.is_dir) {\n\t\t\to.files = path.replace(/^\\//, '');\n\t\t}\n\t\telse {\n\t\t\tconst full_path = `https://api-content.dropbox.com/1/files/auto/${path}`;\n\t\t\to.downloadLink = `${hello.settings.oauth_proxy}?path=${encodeURIComponent(full_path)}&access_token=${req.options.access_token}`;\n\t\t\to.file = full_path;\n\t\t}\n\n\t\tif (!o.id) {\n\t\t\to.id = o.path.replace(/^\\//, '');\n\t\t}\n\n\t\t// O.media = 'https://api-content.dropbox.com/1/files/' + path;\n\t}\n\n\tfunction req(str) {\n\t\treturn function(p, cb) {\n\t\t\tdelete p.query.limit;\n\t\t\tcb(str);\n\t\t};\n\t}\n\n}\n","const hello = require('../hello.js');\n\nconst globalCallback = require('tricks/events/globalCallback');\nconst hasBinary = require('tricks/object/hasBinary');\nconst querystringify = require('tricks/string/querystringify');\nconst toBlob = require('tricks/object/toBlob');\n\n{\n\t// For APIs, once a version is no longer usable, any calls made to it will be defaulted to the next oldest usable version.\n\t// So we explicitly state it.\n\tconst version = 'v2.9';\n\n\thello.init({\n\n\t\tfacebook: {\n\n\t\t\tname: 'Facebook',\n\n\t\t\t// SEE https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow\n\t\t\toauth: {\n\t\t\t\tversion: 2,\n\t\t\t\tauth: `https://www.facebook.com/${version}/dialog/oauth/`,\n\t\t\t\tgrant: 'https://graph.facebook.com/oauth/access_token'\n\t\t\t},\n\n\t\t\t// Authorization scopes\n\t\t\tscope: {\n\t\t\t\tbasic: 'public_profile',\n\t\t\t\temail: 'email',\n\t\t\t\tshare: 'user_posts',\n\t\t\t\tbirthday: 'user_birthday',\n\t\t\t\tevents: 'user_events',\n\t\t\t\tphotos: 'user_photos',\n\t\t\t\tvideos: 'user_videos',\n\t\t\t\tfriends: 'user_friends',\n\t\t\t\tfiles: 'user_photos,user_videos',\n\t\t\t\tpublish_files: 'user_photos,user_videos,publish_actions',\n\t\t\t\tpublish: 'publish_actions',\n\n\t\t\t\t// Deprecated in v2.0\n\t\t\t\t// Create_event\t: 'create_event',\n\n\t\t\t\toffline_access: ''\n\t\t\t},\n\n\t\t\t// Refresh the access_token\n\t\t\trefresh: false,\n\n\t\t\tlogin(p) {\n\n\t\t\t\t// Reauthenticate\n\t\t\t\t// https://developers.facebook.com/docs/facebook-login/reauthentication\n\t\t\t\tif (p.options.force) {\n\t\t\t\t\tp.qs.auth_type = 'reauthenticate';\n\t\t\t\t}\n\n\t\t\t\t// Set the display value\n\t\t\t\tp.qs.display = p.options.display || 'popup';\n\t\t\t},\n\n\t\t\tlogout(callback, options) {\n\t\t\t\t// Assign callback to a global handler\n\t\t\t\tconst callbackID = globalCallback(callback);\n\t\t\t\tconst qs = querystringify({\n\t\t\t\t\tcallback: callbackID,\n\t\t\t\t\tresult: JSON.stringify({force: true}),\n\t\t\t\t\tstate: '{}'\n\t\t\t\t});\n\t\t\t\tconst redirect = encodeURIComponent(`${hello.settings.redirect_uri}?${qs}`);\n\t\t\t\tconst token = (options.authResponse || {}).access_token;\n\t\t\t\thello.utils.iframe(`https://www.facebook.com/logout.php?next=${redirect}&access_token=${token}`);\n\n\t\t\t\t// Possible responses:\n\t\t\t\t// String URL\t- hello.logout should handle the logout\n\t\t\t\t// Undefined\t- this function will handle the callback\n\t\t\t\t// True - throw a success, this callback isn't handling the callback\n\t\t\t\t// False - throw a error\n\t\t\t\tif (!token) {\n\t\t\t\t\t// If there isn't a token, the above wont return a response, so lets trigger a response\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// API Base URL\n\t\t\tbase: `https://graph.facebook.com/${version}/`,\n\n\t\t\t// Map GET requests\n\t\t\tget: {\n\t\t\t\tme: 'me?fields=email,first_name,last_name,name,timezone,verified',\n\t\t\t\t'me/friends': 'me/friends',\n\t\t\t\t'me/following': 'me/friends',\n\t\t\t\t'me/followers': 'me/friends',\n\t\t\t\t'me/share': 'me/feed',\n\t\t\t\t'me/like': 'me/likes',\n\t\t\t\t'me/files': 'me/albums',\n\t\t\t\t'me/albums': 'me/albums?fields=cover_photo,name',\n\t\t\t\t'me/album': '@{id}/photos?fields=picture',\n\t\t\t\t'me/photos': 'me/photos',\n\t\t\t\t'me/photo': '@{id}',\n\t\t\t\t'friend/albums': '@{id}/albums',\n\t\t\t\t'friend/photos': '@{id}/photos'\n\n\t\t\t\t// Pagination\n\t\t\t\t// Https://developers.facebook.com/docs/reference/api/pagination/\n\t\t\t},\n\n\t\t\t// Map POST requests\n\t\t\tpost: {\n\t\t\t\t'me/share': 'me/feed',\n\t\t\t\t'me/photo': '@{id}'\n\n\t\t\t\t// Https://developers.facebook.com/docs/graph-api/reference/v2.2/object/likes/\n\t\t\t},\n\n\t\t\twrap: {\n\t\t\t\tme: formatUser,\n\t\t\t\t'me/friends': formatFriends,\n\t\t\t\t'me/following': formatFriends,\n\t\t\t\t'me/followers': formatFriends,\n\t\t\t\t'me/albums': format,\n\t\t\t\t'me/photos': format,\n\t\t\t\t'me/files': format,\n\t\t\t\tdefault: format\n\t\t\t},\n\n\t\t\t// Special requirements for handling XHR\n\t\t\txhr(p, qs) {\n\t\t\t\tif (p.method === 'get' || p.method === 'post') {\n\t\t\t\t\tqs.suppress_response_codes = true;\n\t\t\t\t}\n\n\t\t\t\t// Is this a post with a data-uri?\n\t\t\t\tif (p.method === 'post' && p.data && typeof (p.data.file) === 'string') {\n\t\t\t\t\t// Convert the Data-URI to a Blob\n\t\t\t\t\tp.data.file = toBlob(p.data.file);\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// Special requirements for handling JSONP fallback\n\t\t\tjsonp(p, qs) {\n\t\t\t\tconst m = p.method;\n\t\t\t\tif (m !== 'get' && !hasBinary(p.data)) {\n\t\t\t\t\tp.data.method = m;\n\t\t\t\t\tp.method = 'get';\n\t\t\t\t}\n\t\t\t\telse if (p.method === 'delete') {\n\t\t\t\t\tqs.method = 'delete';\n\t\t\t\t\tp.method = 'post';\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Special requirements for iframe form hack\n\t\t\tform() {\n\t\t\t\treturn {\n\t\t\t\t\t// Fire the callback onload\n\t\t\t\t\tcallbackonload: true\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t});\n\n\tconst base = 'https://graph.facebook.com/';\n\n\tfunction formatUser(o) {\n\t\tif (o.id) {\n\t\t\to.thumbnail = o.picture = `${base}${o.id}/picture`;\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction formatFriends(o) {\n\t\tif ('data' in o) {\n\t\t\to.data.forEach(formatUser);\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction format(o, headers, req) {\n\t\tif (typeof o === 'boolean') {\n\t\t\to = {success: o};\n\t\t}\n\n\t\tif (o && 'data' in o) {\n\t\t\tconst token = req.authResponse.access_token;\n\n\t\t\tif (!(o.data instanceof Array)) {\n\t\t\t\tconst data = o.data;\n\t\t\t\tdelete o.data;\n\t\t\t\to.data = [data];\n\t\t\t}\n\n\t\t\to.data.forEach(d => {\n\n\t\t\t\tif (d.picture) {\n\t\t\t\t\td.thumbnail = d.picture;\n\t\t\t\t}\n\n\t\t\t\td.pictures = (d.images || [])\n\t\t\t\t\t.sort((a, b) => a.width - b.width);\n\n\t\t\t\tif (d.cover_photo && d.cover_photo.id) {\n\t\t\t\t\td.thumbnail = `${base}${d.cover_photo.id}/picture?access_token=${token}`;\n\t\t\t\t}\n\n\t\t\t\tif (d.type === 'album') {\n\t\t\t\t\td.files = d.photos = `${base}${d.id}/photos`;\n\t\t\t\t}\n\n\t\t\t\tif (d.can_upload) {\n\t\t\t\t\td.upload_location = `${base}${d.id}/photos`;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn o;\n\t}\n\n}\n","const hello = require('../hello.js');\n\n{\n\n\thello.init({\n\n\t\tflickr: {\n\n\t\t\tname: 'Flickr',\n\n\t\t\t// Ensure that you define an oauth_proxy\n\t\t\toauth: {\n\t\t\t\tversion: '1.0a',\n\t\t\t\tauth: 'https://www.flickr.com/services/oauth/authorize?perms=read',\n\t\t\t\trequest: 'https://www.flickr.com/services/oauth/request_token',\n\t\t\t\ttoken: 'https://www.flickr.com/services/oauth/access_token'\n\t\t\t},\n\n\t\t\t// API base URL\n\t\t\tbase: 'https://api.flickr.com/services/rest',\n\n\t\t\t// Map GET resquests\n\t\t\tget: {\n\t\t\t\tme: sign('flickr.people.getInfo'),\n\t\t\t\t'me/friends': sign('flickr.contacts.getList', {per_page: '@{limit|50}'}),\n\t\t\t\t'me/following': sign('flickr.contacts.getList', {per_page: '@{limit|50}'}),\n\t\t\t\t'me/followers': sign('flickr.contacts.getList', {per_page: '@{limit|50}'}),\n\t\t\t\t'me/albums': sign('flickr.photosets.getList', {per_page: '@{limit|50}'}),\n\t\t\t\t'me/album': sign('flickr.photosets.getPhotos', {photoset_id: '@{id}'}),\n\t\t\t\t'me/photos': sign('flickr.people.getPhotos', {per_page: '@{limit|50}'})\n\t\t\t},\n\n\t\t\twrap: {\n\t\t\t\tme(o) {\n\t\t\t\t\tformatError(o);\n\t\t\t\t\to = checkResponse(o, 'person');\n\t\t\t\t\tif (o.id) {\n\t\t\t\t\t\tif (o.realname) {\n\t\t\t\t\t\t\to.name = o.realname._content;\n\t\t\t\t\t\t\tconst m = o.name.split(' ');\n\t\t\t\t\t\t\to.first_name = m.shift();\n\t\t\t\t\t\t\to.last_name = m.join(' ');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\to.thumbnail = getBuddyIcon(o, 'l');\n\t\t\t\t\t\to.picture = getBuddyIcon(o, 'l');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn o;\n\t\t\t\t},\n\n\t\t\t\t'me/friends': formatFriends,\n\t\t\t\t'me/followers': formatFriends,\n\t\t\t\t'me/following': formatFriends,\n\t\t\t\t'me/albums'(o) {\n\t\t\t\t\tformatError(o);\n\t\t\t\t\to = checkResponse(o, 'photosets');\n\t\t\t\t\tpaging(o);\n\t\t\t\t\tif (o.photoset) {\n\t\t\t\t\t\to.data = o.photoset;\n\t\t\t\t\t\to.data.forEach(item => {\n\t\t\t\t\t\t\titem.name = item.title._content;\n\t\t\t\t\t\t\titem.photos = `https://api.flickr.com/services/rest${  getApiUrl('flickr.photosets.getPhotos', {photoset_id: item.id}, true)}`;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tdelete o.photoset;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn o;\n\t\t\t\t},\n\n\t\t\t\t'me/photos'(o) {\n\t\t\t\t\tformatError(o);\n\t\t\t\t\treturn formatPhotos(o);\n\t\t\t\t},\n\n\t\t\t\tdefault(o) {\n\t\t\t\t\tformatError(o);\n\t\t\t\t\treturn formatPhotos(o);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\txhr: false,\n\n\t\t\tjsonp(p, qs) {\n\t\t\t\tif (p.method === 'get') {\n\t\t\t\t\tdelete qs.callback;\n\t\t\t\t\tqs.jsoncallback = p.callbackID;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction getApiUrl(method, extraParams, skipNetwork) {\n\t\tlet url = `${(skipNetwork) ? '' : 'flickr:'\n\t\t}?method=${  method\n\t\t}&api_key=${  hello.services.flickr.id\n\t\t}&format=json`;\n\t\tfor (const param in extraParams) {\n\t\t\tif (extraParams.hasOwnProperty(param)) {\n\t\t\t\turl += `&${  param  }=${  extraParams[param]}`;\n\t\t\t}\n\t\t}\n\n\t\treturn url;\n\t}\n\n\t// This is not exactly neat but avoid to call\n\t// The method 'flickr.test.login' for each api call\n\n\tfunction withUser(cb) {\n\t\tconst auth = hello.getAuthResponse('flickr');\n\t\tcb(auth && auth.user_nsid ? auth.user_nsid : null);\n\t}\n\n\tfunction sign(url, params) {\n\t\tif (!params) {\n\t\t\tparams = {};\n\t\t}\n\n\t\treturn function(p, callback) {\n\t\t\twithUser(userId => {\n\t\t\t\tparams.user_id = userId;\n\t\t\t\tcallback(getApiUrl(url, params, true));\n\t\t\t});\n\t\t};\n\t}\n\n\tfunction getBuddyIcon(profile, size) {\n\t\tlet url = 'https://www.flickr.com/images/buddyicon.gif';\n\t\tif (profile.nsid && profile.iconserver && profile.iconfarm) {\n\t\t\turl = `https://farm${  profile.iconfarm  }.staticflickr.com/${\n\t\t\t\tprofile.iconserver  }/` +\n\t\t\t\t`buddyicons/${  profile.nsid\n\t\t\t\t}${(size) ? `_${  size}` : ''  }.jpg`;\n\t\t}\n\n\t\treturn url;\n\t}\n\n\t// See: https://www.flickr.com/services/api/misc.urls.html\n\tfunction createPhotoUrl(id, farm, server, secret, size) {\n\t\tsize = (size) ? `_${  size}` : '';\n\t\treturn `https://farm${  farm  }.staticflickr.com/${  server  }/${  id  }_${  secret  }${size  }.jpg`;\n\t}\n\n\tfunction formatError(o) {\n\t\tif (o && o.stat && o.stat.toLowerCase() !== 'ok') {\n\t\t\to.error = {\n\t\t\t\tcode: 'invalid_request',\n\t\t\t\tmessage: o.message\n\t\t\t};\n\t\t}\n\t}\n\n\tfunction formatPhotos(o) {\n\t\tif (o.photoset || o.photos) {\n\t\t\tconst set = ('photoset' in o) ? 'photoset' : 'photos';\n\t\t\to = checkResponse(o, set);\n\t\t\tpaging(o);\n\t\t\to.data = o.photo;\n\t\t\tdelete o.photo;\n\t\t\tfor (let i = 0; i < o.data.length; i++) {\n\t\t\t\tconst photo = o.data[i];\n\t\t\t\tphoto.name = photo.title;\n\t\t\t\tphoto.picture = createPhotoUrl(photo.id, photo.farm, photo.server, photo.secret, '');\n\t\t\t\tphoto.pictures = createPictures(photo.id, photo.farm, photo.server, photo.secret);\n\t\t\t\tphoto.source = createPhotoUrl(photo.id, photo.farm, photo.server, photo.secret, 'b');\n\t\t\t\tphoto.thumbnail = createPhotoUrl(photo.id, photo.farm, photo.server, photo.secret, 'm');\n\t\t\t}\n\t\t}\n\n\t\treturn o;\n\t}\n\n\t// See: https://www.flickr.com/services/api/misc.urls.html\n\tfunction createPictures(id, farm, server, secret) {\n\n\t\tconst NO_LIMIT = 2048;\n\t\tconst sizes = [\n\t\t\t{id: 't', max: 100},\n\t\t\t{id: 'm', max: 240},\n\t\t\t{id: 'n', max: 320},\n\t\t\t{id: '', max: 500},\n\t\t\t{id: 'z', max: 640},\n\t\t\t{id: 'c', max: 800},\n\t\t\t{id: 'b', max: 1024},\n\t\t\t{id: 'h', max: 1600},\n\t\t\t{id: 'k', max: 2048},\n\t\t\t{id: 'o', max: NO_LIMIT}\n\t\t];\n\n\t\treturn sizes.map(size => ({\n\t\t\tsource: createPhotoUrl(id, farm, server, secret, size.id),\n\n\t\t\t// Note: this is a guess that's almost certain to be wrong (unless square source)\n\t\t\twidth: size.max,\n\t\t\theight: size.max\n\t\t}));\n\t}\n\n\tfunction checkResponse(o, key) {\n\n\t\tif (key in o) {\n\t\t\to = o[key];\n\t\t}\n\t\telse if (!('error' in o)) {\n\t\t\to.error = {\n\t\t\t\tcode: 'invalid_request',\n\t\t\t\tmessage: o.message || 'Failed to get data from Flickr'\n\t\t\t};\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction formatFriends(o) {\n\t\tformatError(o);\n\t\tif (o.contacts) {\n\t\t\to = checkResponse(o, 'contacts');\n\t\t\tpaging(o);\n\t\t\to.data = o.contact;\n\t\t\tdelete o.contact;\n\t\t\tfor (let i = 0; i < o.data.length; i++) {\n\t\t\t\tconst item = o.data[i];\n\t\t\t\titem.id = item.nsid;\n\t\t\t\titem.name = item.realname || item.username;\n\t\t\t\titem.thumbnail = getBuddyIcon(item, 'm');\n\t\t\t}\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction paging(res) {\n\t\tif (res.page && res.pages && res.page !== res.pages) {\n\t\t\tres.paging = {\n\t\t\t\tnext: `?page=${  ++res.page}`\n\t\t\t};\n\t\t}\n\t}\n\n}\n","const hello = require('../hello.js');\n\n{\n\n\thello.init({\n\n\t\tfoursquare: {\n\n\t\t\tname: 'Foursquare',\n\n\t\t\toauth: {\n\t\t\t\t// See: https://developer.foursquare.com/overview/auth\n\t\t\t\tversion: 2,\n\t\t\t\tauth: 'https://foursquare.com/oauth2/authenticate',\n\t\t\t\tgrant: 'https://foursquare.com/oauth2/access_token'\n\t\t\t},\n\n\t\t\t// Refresh the access_token once expired\n\t\t\trefresh: true,\n\n\t\t\tbase: 'https://api.foursquare.com/v2/',\n\n\t\t\tget: {\n\t\t\t\tme: 'users/self',\n\t\t\t\t'me/friends': 'users/self/friends',\n\t\t\t\t'me/followers': 'users/self/friends',\n\t\t\t\t'me/following': 'users/self/friends'\n\t\t\t},\n\n\t\t\twrap: {\n\t\t\t\tme(o) {\n\t\t\t\t\tformatError(o);\n\t\t\t\t\tif (o && o.response) {\n\t\t\t\t\t\to = o.response.user;\n\t\t\t\t\t\tformatUser(o);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn o;\n\t\t\t\t},\n\n\t\t\t\tdefault(o) {\n\t\t\t\t\tformatError(o);\n\n\t\t\t\t\t// Format friends\n\t\t\t\t\tif (o && 'response' in o && 'friends' in o.response && 'items' in o.response.friends) {\n\t\t\t\t\t\to.data = o.response.friends.items;\n\t\t\t\t\t\to.data.forEach(formatUser);\n\t\t\t\t\t\tdelete o.response;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\txhr: formatRequest,\n\t\t\tjsonp: formatRequest\n\t\t}\n\t});\n\n\tfunction formatError(o) {\n\t\tif (o.meta && (o.meta.code === 400 || o.meta.code === 401)) {\n\t\t\to.error = {\n\t\t\t\tcode: 'access_denied',\n\t\t\t\tmessage: o.meta.errorDetail\n\t\t\t};\n\t\t}\n\t}\n\n\tfunction formatUser(o) {\n\t\tif (o && o.id) {\n\t\t\to.thumbnail = `${o.photo.prefix}100x100${o.photo.suffix}`;\n\t\t\to.name = `${o.firstName} ${o.lastName}`;\n\t\t\to.first_name = o.firstName;\n\t\t\to.last_name = o.lastName;\n\t\t\tif (o.contact) {\n\t\t\t\tif (o.contact.email) {\n\t\t\t\t\to.email = o.contact.email;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction formatRequest(p, qs) {\n\t\tconst token = qs.access_token;\n\t\tdelete qs.access_token;\n\t\tqs.oauth_token = token;\n\t\tqs.v = 20121125;\n\t\treturn true;\n\t}\n\n}","const hello = require('../hello.js');\n\n{\n\n\thello.init({\n\n\t\tgithub: {\n\n\t\t\tname: 'GitHub',\n\n\t\t\toauth: {\n\t\t\t\tversion: 2,\n\t\t\t\tauth: 'https://github.com/login/oauth/authorize',\n\t\t\t\tgrant: 'https://github.com/login/oauth/access_token',\n\t\t\t\tresponse_type: 'code'\n\t\t\t},\n\n\t\t\tscope: {\n\t\t\t\temail: 'user:email'\n\t\t\t},\n\n\t\t\tbase: 'https://api.github.com/',\n\n\t\t\tget: {\n\t\t\t\tme: 'user',\n\t\t\t\t'me/friends': 'user/following?per_page=@{limit|100}',\n\t\t\t\t'me/following': 'user/following?per_page=@{limit|100}',\n\t\t\t\t'me/followers': 'user/followers?per_page=@{limit|100}',\n\t\t\t\t'me/like': 'user/starred?per_page=@{limit|100}'\n\t\t\t},\n\n\t\t\twrap: {\n\t\t\t\tme(o, headers) {\n\n\t\t\t\t\tformatError(o, headers);\n\t\t\t\t\tformatUser(o);\n\n\t\t\t\t\treturn o;\n\t\t\t\t},\n\n\t\t\t\tdefault(o, headers, req) {\n\n\t\t\t\t\tformatError(o, headers);\n\n\t\t\t\t\tif (Array.isArray(o)) {\n\t\t\t\t\t\to = {data: o};\n\t\t\t\t\t}\n\n\t\t\t\t\tif (o.data) {\n\t\t\t\t\t\tpaging(o, headers, req);\n\t\t\t\t\t\to.data.forEach(formatUser);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\txhr(p) {\n\n\t\t\t\tif (p.method !== 'get' && p.data) {\n\n\t\t\t\t\t// Serialize payload as JSON\n\t\t\t\t\tp.headers = p.headers || {};\n\t\t\t\t\tp.headers['Content-Type'] = 'application/json';\n\t\t\t\t\tif (typeof (p.data) === 'object') {\n\t\t\t\t\t\tp.data = JSON.stringify(p.data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction formatError(o, headers) {\n\t\tconst code = headers ? headers.statusCode : (o && 'meta' in o && 'status' in o.meta && o.meta.status);\n\t\tif ((code === 401 || code === 403)) {\n\t\t\to.error = {\n\t\t\t\tcode: 'access_denied',\n\t\t\t\tmessage: o.message || (o.data ? o.data.message : 'Could not get response')\n\t\t\t};\n\t\t\tdelete o.message;\n\t\t}\n\t}\n\n\tfunction formatUser(o) {\n\t\tif (o.id) {\n\t\t\to.thumbnail = o.picture = o.avatar_url;\n\t\t\to.name = o.login;\n\t\t}\n\t}\n\n\tfunction paging(res, headers) {\n\t\tif (res.data && res.data.length && headers && headers.Link) {\n\t\t\tconst next = headers.Link.match(/<(.*?)>;\\s*rel=\"next\"/);\n\t\t\tif (next) {\n\t\t\t\tres.paging = {\n\t\t\t\t\tnext: next[1]\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n}","const hello = require('../hello.js');\n\n{\n\n\tconst contactsUrl = 'https://www.google.com/m8/feeds/contacts/default/full?v=3.0&alt=json&max-results=@{limit|1000}&start-index=@{start|1}';\n\n\thello.init({\n\n\t\tgoogle: {\n\n\t\t\tname: 'Google Plus',\n\n\t\t\t// See: http://code.google.com/apis/accounts/docs/OAuth2UserAgent.html\n\t\t\toauth: {\n\t\t\t\tversion: 2,\n\t\t\t\tauth: 'https://accounts.google.com/o/oauth2/auth',\n\t\t\t\tgrant: 'https://accounts.google.com/o/oauth2/token'\n\t\t\t},\n\n\t\t\t// Authorization scopes\n\t\t\tscope: {\n\t\t\t\tbasic: 'https://www.googleapis.com/auth/plus.me profile',\n\t\t\t\temail: 'email',\n\t\t\t\tbirthday: '',\n\t\t\t\tevents: '',\n\t\t\t\tphotos: 'https://picasaweb.google.com/data/',\n\t\t\t\tvideos: 'http://gdata.youtube.com',\n\t\t\t\tfriends: 'https://www.google.com/m8/feeds, https://www.googleapis.com/auth/plus.login',\n\t\t\t\tfiles: 'https://www.googleapis.com/auth/drive.readonly',\n\t\t\t\tpublish: '',\n\t\t\t\tpublish_files: 'https://www.googleapis.com/auth/drive',\n\t\t\t\tshare: '',\n\t\t\t\tcreate_event: '',\n\t\t\t\toffline_access: ''\n\t\t\t},\n\n\t\t\tscope_delim: ' ',\n\n\t\t\tlogin(p) {\n\n\t\t\t\tif (p.qs.response_type === 'code') {\n\n\t\t\t\t\t// Let's set this to an offline access to return a refresh_token\n\t\t\t\t\tp.qs.access_type = 'offline';\n\t\t\t\t}\n\n\t\t\t\t// Reauthenticate\n\t\t\t\t// https://developers.google.com/identity/protocols/\n\t\t\t\tif (p.options.force) {\n\t\t\t\t\tp.qs.approval_prompt = 'force';\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// API base URI\n\t\t\tbase: 'https://www.googleapis.com/',\n\n\t\t\t// Map GET requests\n\t\t\tget: {\n\t\t\t\tme: 'plus/v1/people/me',\n\n\t\t\t\t// Deprecated Sept 1, 2014\n\t\t\t\t//'me': 'oauth2/v1/userinfo?alt=json',\n\n\t\t\t\t// See: https://developers.google.com/+/api/latest/people/list\n\t\t\t\t'me/friends': 'plus/v1/people/me/people/visible?maxResults=@{limit|100}',\n\t\t\t\t'me/following': contactsUrl,\n\t\t\t\t'me/followers': contactsUrl,\n\t\t\t\t'me/contacts': contactsUrl,\n\t\t\t\t'me/share': 'plus/v1/people/me/activities/public?maxResults=@{limit|100}',\n\t\t\t\t'me/feed': 'plus/v1/people/me/activities/public?maxResults=@{limit|100}',\n\t\t\t\t'me/albums': 'https://picasaweb.google.com/data/feed/api/user/default?alt=json&max-results=@{limit|100}&start-index=@{start|1}',\n\t\t\t\t'me/album'(p, callback) {\n\t\t\t\t\tconst key = p.query.id;\n\t\t\t\t\tdelete p.query.id;\n\t\t\t\t\tcallback(key.replace('/entry/', '/feed/'));\n\t\t\t\t},\n\n\t\t\t\t'me/photos': 'https://picasaweb.google.com/data/feed/api/user/default?alt=json&kind=photo&max-results=@{limit|100}&start-index=@{start|1}',\n\n\t\t\t\t// See: https://developers.google.com/drive/v2/reference/files/list\n\t\t\t\t'me/file': 'drive/v2/files/@{id}',\n\t\t\t\t'me/files': 'drive/v2/files?q=%22@{parent|root}%22+in+parents+and+trashed=false&maxResults=@{limit|100}',\n\n\t\t\t\t// See: https://developers.google.com/drive/v2/reference/files/list\n\t\t\t\t'me/folders': 'drive/v2/files?q=%22@{id|root}%22+in+parents+and+mimeType+=+%22application/vnd.google-apps.folder%22+and+trashed=false&maxResults=@{limit|100}',\n\n\t\t\t\t// See: https://developers.google.com/drive/v2/reference/files/list\n\t\t\t\t'me/folder': 'drive/v2/files?q=%22@{id|root}%22+in+parents+and+trashed=false&maxResults=@{limit|100}'\n\t\t\t},\n\n\t\t\t// Map POST requests\n\t\t\tpost: {\n\n\t\t\t\t// Google Drive\n\t\t\t\t'me/files': uploadDrive,\n\t\t\t\t'me/folders'(p, callback) {\n\t\t\t\t\tp.data = {\n\t\t\t\t\t\ttitle: p.data.name,\n\t\t\t\t\t\tparents: [{id: p.data.parent || 'root'}],\n\t\t\t\t\t\tmimeType: 'application/vnd.google-apps.folder'\n\t\t\t\t\t};\n\t\t\t\t\tcallback('drive/v2/files');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Map PUT requests\n\t\t\tput: {\n\t\t\t\t'me/files': uploadDrive\n\t\t\t},\n\n\t\t\t// Map DELETE requests\n\t\t\tdel: {\n\t\t\t\t'me/files': 'drive/v2/files/@{id}',\n\t\t\t\t'me/folder': 'drive/v2/files/@{id}'\n\t\t\t},\n\n\t\t\t// Map PATCH requests\n\t\t\tpatch: {\n\t\t\t\t'me/file': 'drive/v2/files/@{id}'\n\t\t\t},\n\n\t\t\twrap: {\n\t\t\t\tme(o) {\n\t\t\t\t\tif (o.id) {\n\t\t\t\t\t\to.last_name = o.family_name || (o.name ? o.name.familyName : null);\n\t\t\t\t\t\to.first_name = o.given_name || (o.name ? o.name.givenName : null);\n\n\t\t\t\t\t\tif (o.emails && o.emails.length) {\n\t\t\t\t\t\t\to.email = o.emails[0].value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tformatPerson(o);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn o;\n\t\t\t\t},\n\n\t\t\t\t'me/friends'(o) {\n\t\t\t\t\tif (o.items) {\n\t\t\t\t\t\tpaging(o);\n\t\t\t\t\t\to.data = o.items;\n\t\t\t\t\t\to.data.forEach(formatPerson);\n\t\t\t\t\t\tdelete o.items;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn o;\n\t\t\t\t},\n\n\t\t\t\t'me/contacts': formatFriends,\n\t\t\t\t'me/followers': formatFriends,\n\t\t\t\t'me/following': formatFriends,\n\t\t\t\t'me/share': formatFeed,\n\t\t\t\t'me/feed': formatFeed,\n\t\t\t\t'me/albums': gEntry,\n\t\t\t\t'me/photos': formatPhotos,\n\t\t\t\tdefault: gEntry\n\t\t\t},\n\n\t\t\txhr(p) {\n\n\t\t\t\tif (p.method === 'post' || p.method === 'put') {\n\t\t\t\t\ttoJSON(p);\n\t\t\t\t}\n\t\t\t\telse if (p.method === 'patch') {\n\t\t\t\t\tObject.assign(p.query, p.data);\n\t\t\t\t\tp.data = null;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// Don't even try submitting via form.\n\t\t\t// This means no POST operations in <=IE9\n\t\t\tform: false\n\t\t}\n\t});\n\n\tfunction toInt(s) {\n\t\treturn parseInt(s, 10);\n\t}\n\n\tfunction formatFeed(o) {\n\t\tpaging(o);\n\t\to.data = o.items;\n\t\tdelete o.items;\n\t\treturn o;\n\t}\n\n\t// Format: ensure each record contains a name, id etc.\n\tfunction formatItem(o) {\n\t\tif (o.error) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!o.name) {\n\t\t\to.name = o.title || o.message;\n\t\t}\n\n\t\tif (!o.picture) {\n\t\t\to.picture = o.thumbnailLink;\n\t\t}\n\n\t\tif (!o.thumbnail) {\n\t\t\to.thumbnail = o.thumbnailLink;\n\t\t}\n\n\t\tif (o.mimeType === 'application/vnd.google-apps.folder') {\n\t\t\to.type = 'folder';\n\t\t\to.files = `https://www.googleapis.com/drive/v2/files?q=%22${  o.id  }%22+in+parents`;\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction formatImage(image) {\n\t\treturn {\n\t\t\tsource: image.url,\n\t\t\twidth: image.width,\n\t\t\theight: image.height\n\t\t};\n\t}\n\n\tfunction formatPhotos(o) {\n\t\to.data = o.feed.entry.map(formatEntry);\n\t\tdelete o.feed;\n\t}\n\n\t// Google has a horrible JSON API\n\tfunction gEntry(o) {\n\t\tpaging(o);\n\n\t\tif ('feed' in o && 'entry' in o.feed) {\n\t\t\to.data = o.feed.entry.map(formatEntry);\n\t\t\tdelete o.feed;\n\t\t}\n\n\t\t// Old style: Picasa, etc.\n\t\telse if ('entry' in o) {\n\t\t\treturn formatEntry(o.entry);\n\t\t}\n\n\t\t// New style: Google Drive & Plus\n\t\telse if ('items' in o) {\n\t\t\to.data = o.items.map(formatItem);\n\t\t\tdelete o.items;\n\t\t}\n\t\telse {\n\t\t\tformatItem(o);\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction formatPerson(o) {\n\t\to.name = o.displayName || o.name;\n\t\to.picture = o.picture || (o.image ? o.image.url : null);\n\t\to.thumbnail = o.picture;\n\t}\n\n\tfunction formatFriends(o, headers, req) {\n\t\tpaging(o);\n\t\tif ('feed' in o && 'entry' in o.feed) {\n\t\t\tconst token = req.query.access_token;\n\t\t\tfor (let i = 0; i < o.feed.entry.length; i++) {\n\t\t\t\tconst a = o.feed.entry[i];\n\n\t\t\t\ta.id\t= a.id.$t;\n\t\t\t\ta.name\t= a.title.$t;\n\t\t\t\tdelete a.title;\n\t\t\t\tif (a.gd$email) {\n\t\t\t\t\ta.email\t= (a.gd$email && a.gd$email.length > 0) ? a.gd$email[0].address : null;\n\t\t\t\t\ta.emails = a.gd$email;\n\t\t\t\t\tdelete a.gd$email;\n\t\t\t\t}\n\n\t\t\t\tif (a.updated) {\n\t\t\t\t\ta.updated = a.updated.$t;\n\t\t\t\t}\n\n\t\t\t\tif (a.link) {\n\n\t\t\t\t\tlet pic = (a.link.length > 0) ? a.link[0].href : null;\n\t\t\t\t\tif (pic && a.link[0].gd$etag) {\n\t\t\t\t\t\tpic += `${pic.indexOf('?') > -1 ? '&' : '?'  }access_token=${  token}`;\n\t\t\t\t\t\ta.picture = pic;\n\t\t\t\t\t\ta.thumbnail = pic;\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete a.link;\n\t\t\t\t}\n\n\t\t\t\tif (a.category) {\n\t\t\t\t\tdelete a.category;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\to.data = o.feed.entry;\n\t\t\tdelete o.feed;\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction formatEntry(a) {\n\n\t\tconst group = a.media$group;\n\t\tconst photo = group.media$content.length ? group.media$content[0] : {};\n\t\tconst mediaContent = group.media$content || [];\n\t\tconst mediaThumbnail = group.media$thumbnail || [];\n\n\t\tconst pictures = mediaContent\n\t\t\t.concat(mediaThumbnail)\n\t\t\t.map(formatImage)\n\t\t\t.sort((a, b) => a.width - b.width);\n\n\t\tlet i = 0;\n\t\tlet _a;\n\t\tconst p = {\n\t\t\tid: a.id.$t,\n\t\t\tname: a.title.$t,\n\t\t\tdescription: a.summary.$t,\n\t\t\tupdated_time: a.updated.$t,\n\t\t\tcreated_time: a.published.$t,\n\t\t\tpicture: photo ? photo.url : null,\n\t\t\tpictures,\n\t\t\timages: [],\n\t\t\tthumbnail: photo ? photo.url : null,\n\t\t\twidth: photo.width,\n\t\t\theight: photo.height\n\t\t};\n\n\t\t// Get feed/children\n\t\tif ('link' in a) {\n\t\t\tfor (i = 0; i < a.link.length; i++) {\n\t\t\t\tconst d = a.link[i];\n\t\t\t\tif (d.rel.match(/#feed$/)) {\n\t\t\t\t\tp.upload_location = p.files = p.photos = d.href;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get images of different scales\n\t\tif ('category' in a && a.category.length) {\n\t\t\t_a = a.category;\n\t\t\tfor (i = 0; i < _a.length; i++) {\n\t\t\t\tif (_a[i].scheme && _a[i].scheme.match(/#kind$/)) {\n\t\t\t\t\tp.type = _a[i].term.replace(/^.*?#/, '');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get images of different scales\n\t\tif ('media$thumbnail' in group && group.media$thumbnail.length) {\n\t\t\t_a = group.media$thumbnail;\n\t\t\tp.thumbnail = _a[0].url;\n\t\t\tp.images = _a.map(formatImage);\n\t\t}\n\n\t\t_a = group.media$content;\n\n\t\tif (_a && _a.length) {\n\t\t\tp.images.push(formatImage(_a[0]));\n\t\t}\n\n\t\treturn p;\n\t}\n\n\tfunction paging(res) {\n\n\t\t// Contacts V2\n\t\tif ('feed' in res && res.feed.openSearch$itemsPerPage) {\n\t\t\tconst limit = toInt(res.feed.openSearch$itemsPerPage.$t);\n\t\t\tconst start = toInt(res.feed.openSearch$startIndex.$t);\n\t\t\tconst total = toInt(res.feed.openSearch$totalResults.$t);\n\n\t\t\tif ((start + limit) < total) {\n\t\t\t\tres.paging = {\n\t\t\t\t\tnext: `?start=${  start + limit}`\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\telse if ('nextPageToken' in res) {\n\t\t\tres.paging = {\n\t\t\t\tnext: `?pageToken=${  res.nextPageToken}`\n\t\t\t};\n\t\t}\n\t}\n\n\t// Construct a multipart message\n\tfunction Multipart() {\n\n\t\t// Internal body\n\t\tlet body = [];\n\t\tconst boundary = (Math.random() * 1e10).toString(32);\n\t\tlet counter = 0;\n\t\tconst lineBreak = '\\r\\n';\n\t\tconst delim = `${lineBreak  }--${  boundary}`;\n\t\tlet ready = function() {};\n\n\t\tconst dataUri = /^data:([^;,]+(;charset=[^;,]+)?)(;base64)?,/i;\n\n\t\t// Add file\n\t\tfunction addFile(item) {\n\t\t\tconst fr = new FileReader();\n\t\t\tfr.onload = function(e) {\n\t\t\t\taddContent(btoa(e.target.result), `${item.type + lineBreak}Content-Transfer-Encoding: base64`);\n\t\t\t};\n\n\t\t\tfr.readAsBinaryString(item);\n\t\t}\n\n\t\t// Add content\n\t\tfunction addContent(content, type) {\n\t\t\tbody.push(`${lineBreak}Content-Type: ${type}${lineBreak}${lineBreak}${content}`);\n\t\t\tcounter--;\n\t\t\tready();\n\t\t}\n\n\t\t// Add new things to the object\n\t\tthis.append = function(content, type) {\n\n\t\t\t// Does the content have an array\n\t\t\tif (typeof (content) === 'string' || !('length' in Object(content))) {\n\t\t\t\t// Converti to multiples\n\t\t\t\tcontent = [content];\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < content.length; i++) {\n\n\t\t\t\tcounter++;\n\n\t\t\t\tconst item = content[i];\n\n\t\t\t\t// Is this a file?\n\t\t\t\t// Files can be either Blobs or File types\n\t\t\t\tif (\n\t\t\t\t\t(typeof (File) !== 'undefined' && item instanceof File) ||\n\t\t\t\t\t(typeof (Blob) !== 'undefined' && item instanceof Blob)\n\t\t\t\t) {\n\t\t\t\t\t// Read the file in\n\t\t\t\t\taddFile(item);\n\t\t\t\t}\n\n\t\t\t\t// Data-URI?\n\t\t\t\t// Data:[<mime type>][;charset=<charset>][;base64],<encoded data>\n\t\t\t\t// /^data\\:([^;,]+(\\;charset=[^;,]+)?)(\\;base64)?,/i\n\t\t\t\telse if (typeof (item) === 'string' && item.match(dataUri)) {\n\t\t\t\t\tconst m = item.match(dataUri);\n\t\t\t\t\taddContent(item.replace(dataUri, ''), `${m[1] + lineBreak  }Content-Transfer-Encoding: base64`);\n\t\t\t\t}\n\n\t\t\t\t// Regular string\n\t\t\t\telse {\n\t\t\t\t\taddContent(item, type);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.onready = function(fn) {\n\t\t\tready = function() {\n\t\t\t\tif (counter === 0) {\n\t\t\t\t\t// Trigger ready\n\t\t\t\t\tbody.unshift('');\n\t\t\t\t\tbody.push('--');\n\t\t\t\t\tfn(body.join(delim), boundary);\n\t\t\t\t\tbody = [];\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tready();\n\t\t};\n\t}\n\n\t// Upload to Drive\n\t// If this is PUT then only augment the file uploaded\n\t// PUT https://developers.google.com/drive/v2/reference/files/update\n\t// POST https://developers.google.com/drive/manage-uploads\n\tfunction uploadDrive(p, callback) {\n\n\t\tlet data = {};\n\n\t\t// Test for DOM element\n\t\tif (p.data &&\n\t\t\t(typeof (HTMLInputElement) !== 'undefined' && p.data instanceof HTMLInputElement)\n\t\t) {\n\t\t\tp.data = {file: p.data};\n\t\t}\n\n\t\tif (!p.data.name && Object(Object(p.data.file).files).length && p.method === 'post') {\n\t\t\tp.data.name = p.data.file.files[0].name;\n\t\t}\n\n\t\tif (p.method === 'post') {\n\t\t\tp.data = {\n\t\t\t\ttitle: p.data.name,\n\t\t\t\tparents: [{id: p.data.parent || 'root'}],\n\t\t\t\tfile: p.data.file\n\t\t\t};\n\t\t}\n\t\telse {\n\n\t\t\t// Make a reference\n\t\t\tdata = p.data;\n\t\t\tp.data = {};\n\n\t\t\t// Add the parts to change as required\n\t\t\tif (data.parent) {\n\t\t\t\tp.data.parents = [{id: p.data.parent || 'root'}];\n\t\t\t}\n\n\t\t\tif (data.file) {\n\t\t\t\tp.data.file = data.file;\n\t\t\t}\n\n\t\t\tif (data.name) {\n\t\t\t\tp.data.title = data.name;\n\t\t\t}\n\t\t}\n\n\t\t// Extract the file, if it exists from the data object\n\t\t// If the File is an INPUT element lets just concern ourselves with the NodeList\n\t\tlet file;\n\t\tif ('file' in p.data) {\n\t\t\tfile = p.data.file;\n\t\t\tdelete p.data.file;\n\n\t\t\tif (typeof (file) === 'object' && 'files' in file) {\n\t\t\t\t// Assign the NodeList\n\t\t\t\tfile = file.files;\n\t\t\t}\n\n\t\t\tif (!file || !file.length) {\n\t\t\t\tcallback({\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: 'request_invalid',\n\t\t\t\t\t\tmessage: 'There were no files attached with this request to upload'\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Set type p.data.mimeType = Object(file[0]).type || 'application/octet-stream';\n\n\t\t// Construct a multipart message\n\t\tconst parts = new Multipart();\n\t\tparts.append(JSON.stringify(p.data), 'application/json');\n\n\t\t// Read the file into a  base64 string... yep a hassle, i know\n\t\t// FormData doesn't let us assign our own Multipart headers and HTTP Content-Type\n\t\t// Alas GoogleApi need these in a particular format\n\t\tif (file) {\n\t\t\tparts.append(file);\n\t\t}\n\n\t\tparts.onready((body, boundary) => {\n\n\t\t\tp.headers['content-type'] = `multipart/related; boundary=\"${boundary}\"`;\n\t\t\tp.data = body;\n\n\t\t\tcallback(`upload/drive/v2/files${data.id ? `/${data.id}` : ''}?uploadType=multipart`);\n\t\t});\n\n\t}\n\n\tfunction toJSON(p) {\n\t\tif (typeof (p.data) === 'object') {\n\t\t\t// Convert the POST into a javascript object\n\t\t\ttry {\n\t\t\t\tp.data = JSON.stringify(p.data);\n\t\t\t\tp.headers['content-type'] = 'application/json';\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\t// Continue\n\t\t\t}\n\t\t}\n\t}\n\n}","const hello = require('../hello.js');\n\n{\n\n\thello.init({\n\n\t\tinstagram: {\n\n\t\t\tname: 'Instagram',\n\n\t\t\toauth: {\n\t\t\t\t// See: http://instagram.com/developer/authentication/\n\t\t\t\tversion: 2,\n\t\t\t\tauth: 'https://instagram.com/oauth/authorize/',\n\t\t\t\tgrant: 'https://api.instagram.com/oauth/access_token'\n\t\t\t},\n\n\t\t\t// Refresh the access_token once expired\n\t\t\trefresh: true,\n\n\t\t\tscope: {\n\t\t\t\tbasic: 'basic',\n\t\t\t\tphotos: '',\n\t\t\t\tfriends: 'relationships',\n\t\t\t\tpublish: 'likes comments',\n\t\t\t\temail: '',\n\t\t\t\tshare: '',\n\t\t\t\tpublish_files: '',\n\t\t\t\tfiles: '',\n\t\t\t\tvideos: '',\n\t\t\t\toffline_access: ''\n\t\t\t},\n\n\t\t\tscope_delim: ' ',\n\n\t\t\tbase: 'https://api.instagram.com/v1/',\n\n\t\t\tget: {\n\t\t\t\tme: 'users/self',\n\t\t\t\t'me/feed': 'users/self/feed?count=@{limit|100}',\n\t\t\t\t'me/photos': 'users/self/media/recent?min_id=0&count=@{limit|100}',\n\t\t\t\t'me/friends': 'users/self/follows?count=@{limit|100}',\n\t\t\t\t'me/following': 'users/self/follows?count=@{limit|100}',\n\t\t\t\t'me/followers': 'users/self/followed-by?count=@{limit|100}',\n\t\t\t\t'friend/photos': 'users/@{id}/media/recent?min_id=0&count=@{limit|100}'\n\t\t\t},\n\n\t\t\tpost: {\n\t\t\t\t'me/like'(p, callback) {\n\t\t\t\t\tconst id = p.data.id;\n\t\t\t\t\tp.data = {};\n\t\t\t\t\tcallback(`media/${  id  }/likes`);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdel: {\n\t\t\t\t'me/like': 'media/@{id}/likes'\n\t\t\t},\n\n\t\t\twrap: {\n\t\t\t\tme(o) {\n\n\t\t\t\t\tformatError(o);\n\n\t\t\t\t\tif ('data' in o) {\n\t\t\t\t\t\to.id = o.data.id;\n\t\t\t\t\t\to.thumbnail = o.data.profile_picture;\n\t\t\t\t\t\to.name = o.data.full_name || o.data.username;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn o;\n\t\t\t\t},\n\n\t\t\t\t'me/friends': formatFriends,\n\t\t\t\t'me/following': formatFriends,\n\t\t\t\t'me/followers': formatFriends,\n\t\t\t\t'me/photos'(o) {\n\n\t\t\t\t\tformatError(o);\n\t\t\t\t\tpaging(o);\n\n\t\t\t\t\tif ('data' in o) {\n\t\t\t\t\t\to.data = o.data.filter(d => d.type === 'image');\n\n\t\t\t\t\t\to.data.forEach(d => {\n\t\t\t\t\t\t\td.name = d.caption ? d.caption.text : null;\n\t\t\t\t\t\t\td.thumbnail = d.images.thumbnail.url;\n\t\t\t\t\t\t\td.picture = d.images.standard_resolution.url;\n\t\t\t\t\t\t\td.pictures = Object.keys(d.images)\n\t\t\t\t\t\t\t\t.map(key => {\n\t\t\t\t\t\t\t\t\tconst image = d.images[key];\n\t\t\t\t\t\t\t\t\treturn formatImage(image);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.sort((a, b) => a.width - b.width);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\treturn o;\n\t\t\t\t},\n\n\t\t\t\tdefault(o) {\n\t\t\t\t\to = formatError(o);\n\t\t\t\t\tpaging(o);\n\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Instagram does not return any CORS Headers\n\t\t\t// So besides JSONP we're stuck with proxy\n\t\t\txhr(p) {\n\n\t\t\t\tconst method = p.method;\n\t\t\t\tconst proxy = method !== 'get';\n\n\t\t\t\tif (proxy) {\n\n\t\t\t\t\tif ((method === 'post' || method === 'put') && p.query.access_token) {\n\t\t\t\t\t\tp.data.access_token = p.query.access_token;\n\t\t\t\t\t\tdelete p.query.access_token;\n\t\t\t\t\t}\n\n\t\t\t\t\t// No access control headers\n\t\t\t\t\t// Use the proxy instead\n\t\t\t\t\tp.proxy = proxy;\n\t\t\t\t}\n\n\t\t\t\treturn proxy;\n\t\t\t},\n\n\t\t\t// No form\n\t\t\tform: false\n\t\t}\n\t});\n\n\tfunction formatImage(image) {\n\t\treturn {\n\t\t\tsource: image.url,\n\t\t\twidth: image.width,\n\t\t\theight: image.height\n\t\t};\n\t}\n\n\tfunction formatError(o) {\n\t\tif (typeof o === 'string') {\n\t\t\treturn {\n\t\t\t\terror: {\n\t\t\t\t\tcode: 'invalid_request',\n\t\t\t\t\tmessage: o\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tif (o && 'meta' in o && 'error_type' in o.meta) {\n\t\t\to.error = {\n\t\t\t\tcode: o.meta.error_type,\n\t\t\t\tmessage: o.meta.error_message\n\t\t\t};\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction formatFriends(o) {\n\t\tpaging(o);\n\t\tif (o && 'data' in o) {\n\t\t\to.data.forEach(formatFriend);\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction formatFriend(o) {\n\t\tif (o.id) {\n\t\t\to.thumbnail = o.profile_picture;\n\t\t\to.name = o.full_name || o.username;\n\t\t}\n\t}\n\n\t// See: http://instagram.com/developer/endpoints/\n\tfunction paging(res) {\n\t\tif (res && 'pagination' in res) {\n\t\t\tres.paging = {\n\t\t\t\tnext: res.pagination.next_url\n\t\t\t};\n\t\t\tdelete res.pagination;\n\t\t}\n\t}\n\n}\n","const hello = require('../hello.js');\n\n{\n\n\thello.init({\n\n\t\tjoinme: {\n\n\t\t\tname: 'join.me',\n\n\t\t\toauth: {\n\t\t\t\tversion: 2,\n\t\t\t\tauth: 'https://secure.join.me/api/public/v1/auth/oauth2',\n\t\t\t\tgrant: 'https://secure.join.me/api/public/v1/auth/oauth2'\n\t\t\t},\n\n\t\t\trefresh: false,\n\n\t\t\tscope: {\n\t\t\t\tbasic: 'user_info',\n\t\t\t\tuser: 'user_info',\n\t\t\t\tscheduler: 'scheduler',\n\t\t\t\tstart: 'start_meeting',\n\t\t\t\temail: '',\n\t\t\t\tfriends: '',\n\t\t\t\tshare: '',\n\t\t\t\tpublish: '',\n\t\t\t\tphotos: '',\n\t\t\t\tpublish_files: '',\n\t\t\t\tfiles: '',\n\t\t\t\tvideos: '',\n\t\t\t\toffline_access: ''\n\t\t\t},\n\n\t\t\tscope_delim: ' ',\n\n\t\t\tlogin(p) {\n\t\t\t\tp.options.popup.width = 400;\n\t\t\t\tp.options.popup.height = 700;\n\t\t\t},\n\n\t\t\tbase: 'https://api.join.me/v1/',\n\n\t\t\tget: {\n\t\t\t\tme: 'user',\n\t\t\t\tmeetings: 'meetings',\n\t\t\t\t'meetings/info': 'meetings/@{id}'\n\t\t\t},\n\n\t\t\tpost: {\n\t\t\t\t'meetings/start/adhoc'(p, callback) {\n\t\t\t\t\tcallback('meetings/start');\n\t\t\t\t},\n\n\t\t\t\t'meetings/start/scheduled'(p, callback) {\n\t\t\t\t\tconst meetingId = p.data.meetingId;\n\t\t\t\t\tp.data = {};\n\t\t\t\t\tcallback(`meetings/${  meetingId  }/start`);\n\t\t\t\t},\n\n\t\t\t\t'meetings/schedule'(p, callback) {\n\t\t\t\t\tcallback('meetings');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tpatch: {\n\t\t\t\t'meetings/update'(p, callback) {\n\t\t\t\t\tcallback(`meetings/${  p.data.meetingId}`);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdel: {\n\t\t\t\t'meetings/delete': 'meetings/@{id}'\n\t\t\t},\n\n\t\t\twrap: {\n\t\t\t\tme(o, headers) {\n\t\t\t\t\tformatError(o, headers);\n\n\t\t\t\t\tif (!o.email) {\n\t\t\t\t\t\treturn o;\n\t\t\t\t\t}\n\n\t\t\t\t\to.name = o.fullName;\n\t\t\t\t\to.first_name = o.name.split(' ')[0];\n\t\t\t\t\to.last_name = o.name.split(' ')[1];\n\t\t\t\t\to.id = o.email;\n\n\t\t\t\t\treturn o;\n\t\t\t\t},\n\n\t\t\t\tdefault(o, headers) {\n\t\t\t\t\tformatError(o, headers);\n\n\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\txhr: formatRequest\n\n\t\t}\n\t});\n\n\tfunction formatError(o, headers) {\n\t\tlet errorCode;\n\t\tlet message;\n\n\t\tif (o && ('Message' in o)) {\n\t\t\tmessage = o.Message;\n\t\t\tdelete o.Message;\n\n\t\t\tif ('ErrorCode' in o) {\n\t\t\t\terrorCode = o.ErrorCode;\n\t\t\t\tdelete o.ErrorCode;\n\t\t\t}\n\t\t\telse {\n\t\t\t\terrorCode = getErrorCode(headers);\n\t\t\t}\n\n\t\t\to.error = {\n\t\t\t\tcode: errorCode,\n\t\t\t\tmessage,\n\t\t\t\tdetails: o\n\t\t\t};\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction formatRequest(p, qs) {\n\t\t// Move the access token from the request body to the request header\n\t\tconst token = qs.access_token;\n\t\tdelete qs.access_token;\n\t\tp.headers.Authorization = `Bearer ${  token}`;\n\n\t\t// Format non-get requests to indicate json body\n\t\tif (p.method !== 'get' && p.data) {\n\t\t\tp.headers['Content-Type'] = 'application/json';\n\t\t\tif (typeof (p.data) === 'object') {\n\t\t\t\tp.data = JSON.stringify(p.data);\n\t\t\t}\n\t\t}\n\n\t\tif (p.method === 'put') {\n\t\t\tp.method = 'patch';\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction getErrorCode(headers) {\n\t\tswitch (headers.statusCode) {\n\t\t\tcase 400:\n\t\t\t\treturn 'invalid_request';\n\t\t\tcase 403:\n\t\t\t\treturn 'stale_token';\n\t\t\tcase 401:\n\t\t\t\treturn 'invalid_token';\n\t\t\tcase 500:\n\t\t\t\treturn 'server_error';\n\t\t\tdefault:\n\t\t\t\treturn 'server_error';\n\t\t}\n\t}\n\n}","const hello = require('../hello.js');\n\n{\n\n\thello.init({\n\n\t\tlinkedin: {\n\n\t\t\toauth: {\n\t\t\t\tversion: 2,\n\t\t\t\tresponse_type: 'code',\n\t\t\t\tauth: 'https://www.linkedin.com/uas/oauth2/authorization',\n\t\t\t\tgrant: 'https://www.linkedin.com/uas/oauth2/accessToken'\n\t\t\t},\n\n\t\t\t// Refresh the access_token once expired\n\t\t\trefresh: true,\n\n\t\t\tscope: {\n\t\t\t\tbasic: 'r_basicprofile',\n\t\t\t\temail: 'r_emailaddress',\n\t\t\t\tfiles: '',\n\t\t\t\tfriends: '',\n\t\t\t\tphotos: '',\n\t\t\t\tpublish: 'w_share',\n\t\t\t\tpublish_files: 'w_share',\n\t\t\t\tshare: '',\n\t\t\t\tvideos: '',\n\t\t\t\toffline_access: ''\n\t\t\t},\n\t\t\tscope_delim: ' ',\n\n\t\t\tbase: 'https://api.linkedin.com/v1/',\n\n\t\t\tget: {\n\t\t\t\tme: 'people/~:(picture-url,first-name,last-name,id,formatted-name,email-address)',\n\n\t\t\t\t// See: http://developer.linkedin.com/documents/get-network-updates-and-statistics-api\n\t\t\t\t'me/share': 'people/~/network/updates?count=@{limit|250}'\n\t\t\t},\n\n\t\t\tpost: {\n\n\t\t\t\t// See: https://developer.linkedin.com/documents/api-requests-json\n\t\t\t\t'me/share'(p, callback) {\n\t\t\t\t\tconst data = {\n\t\t\t\t\t\tvisibility: {\n\t\t\t\t\t\t\tcode: 'anyone'\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tif (p.data.id) {\n\n\t\t\t\t\t\tdata.attribution = {\n\t\t\t\t\t\t\tshare: {\n\t\t\t\t\t\t\t\tid: p.data.id\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tdata.comment = p.data.message;\n\t\t\t\t\t\tif (p.data.picture && p.data.link) {\n\t\t\t\t\t\t\tdata.content = {\n\t\t\t\t\t\t\t\t'submitted-url': p.data.link,\n\t\t\t\t\t\t\t\t'submitted-image-url': p.data.picture\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tp.data = JSON.stringify(data);\n\n\t\t\t\t\tcallback('people/~/shares?format=json');\n\t\t\t\t},\n\n\t\t\t\t'me/like': like\n\t\t\t},\n\n\t\t\tdel: {\n\t\t\t\t'me/like': like\n\t\t\t},\n\n\t\t\twrap: {\n\t\t\t\tme(o) {\n\t\t\t\t\tformatError(o);\n\t\t\t\t\tformatUser(o);\n\t\t\t\t\treturn o;\n\t\t\t\t},\n\n\t\t\t\t'me/friends': formatFriends,\n\t\t\t\t'me/following': formatFriends,\n\t\t\t\t'me/followers': formatFriends,\n\t\t\t\t'me/share'(o) {\n\t\t\t\t\tformatError(o);\n\t\t\t\t\tpaging(o);\n\t\t\t\t\tif (o.values) {\n\t\t\t\t\t\to.data = o.values.map(formatUser);\n\t\t\t\t\t\to.data.forEach(item => {\n\t\t\t\t\t\t\titem.message = item.headline;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tdelete o.values;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn o;\n\t\t\t\t},\n\n\t\t\t\tdefault(o, headers) {\n\t\t\t\t\tformatError(o);\n\t\t\t\t\tempty(o, headers);\n\t\t\t\t\tpaging(o);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tjsonp(p, qs) {\n\t\t\t\tformatQuery(qs);\n\t\t\t\tif (p.method === 'get') {\n\t\t\t\t\tqs.format = 'jsonp';\n\t\t\t\t\tqs['error-callback'] = p.callbackID;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\txhr(p, qs) {\n\t\t\t\tif (p.method !== 'get') {\n\t\t\t\t\tformatQuery(qs);\n\t\t\t\t\tp.headers['Content-Type'] = 'application/json';\n\n\t\t\t\t\t// Note: x-li-format ensures error responses are not returned in XML\n\t\t\t\t\tp.headers['x-li-format'] = 'json';\n\t\t\t\t\tp.proxy = true;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction formatError(o) {\n\t\tif (o && 'errorCode' in o) {\n\t\t\to.error = {\n\t\t\t\tcode: o.status,\n\t\t\t\tmessage: o.message\n\t\t\t};\n\t\t}\n\t}\n\n\tfunction formatUser(o) {\n\t\tif (o.error) {\n\t\t\treturn;\n\t\t}\n\n\t\to.first_name = o.firstName;\n\t\to.last_name = o.lastName;\n\t\to.name = o.formattedName || (`${o.first_name  } ${  o.last_name}`);\n\t\to.thumbnail = o.pictureUrl;\n\t\to.email = o.emailAddress;\n\t\treturn o;\n\t}\n\n\tfunction formatFriends(o) {\n\t\tformatError(o);\n\t\tpaging(o);\n\t\tif (o.values) {\n\t\t\to.data = o.values.map(formatUser);\n\t\t\tdelete o.values;\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction paging(res) {\n\t\tif ('_count' in res && '_start' in res && (res._count + res._start) < res._total) {\n\t\t\tres.paging = {\n\t\t\t\tnext: `?start=${  res._start + res._count  }&count=${  res._count}`\n\t\t\t};\n\t\t}\n\t}\n\n\tfunction empty(o, headers) {\n\t\tif (JSON.stringify(o) === '{}' && headers.statusCode === 200) {\n\t\t\to.success = true;\n\t\t}\n\t}\n\n\tfunction formatQuery(qs) {\n\t\t// LinkedIn signs requests with the parameter 'oauth2_access_token'\n\t\t// ... yeah another one who thinks they should be different!\n\t\tif (qs.access_token) {\n\t\t\tqs.oauth2_access_token = qs.access_token;\n\t\t\tdelete qs.access_token;\n\t\t}\n\t}\n\n\tfunction like(p, callback) {\n\t\tp.headers['x-li-format'] = 'json';\n\t\tconst id = p.data.id;\n\t\tp.data = (p.method !== 'delete').toString();\n\t\tp.method = 'put';\n\t\tcallback(`people/~/network/updates/key=${  id  }/is-liked`);\n\t}\n\n}","const hello = require('../hello.js');\n\n// See: https://developers.soundcloud.com/docs/api/reference\n{\n\n\thello.init({\n\n\t\tsoundcloud: {\n\t\t\tname: 'SoundCloud',\n\n\t\t\toauth: {\n\t\t\t\tversion: 2,\n\t\t\t\tauth: 'https://soundcloud.com/connect',\n\t\t\t\tgrant: 'https://soundcloud.com/oauth2/token'\n\t\t\t},\n\n\t\t\t// Request path translated\n\t\t\tbase: 'https://api.soundcloud.com/',\n\t\t\tget: {\n\t\t\t\tme: 'me.json',\n\n\t\t\t\t// Http://developers.soundcloud.com/docs/api/reference#me\n\t\t\t\t'me/friends': 'me/followings.json',\n\t\t\t\t'me/followers': 'me/followers.json',\n\t\t\t\t'me/following': 'me/followings.json',\n\n\t\t\t\t// See: http://developers.soundcloud.com/docs/api/reference#activities\n\t\t\t\tdefault(p, callback) {\n\n\t\t\t\t\t// Include '.json at the end of each request'\n\t\t\t\t\tcallback(`${p.path  }.json`);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Response handlers\n\t\t\twrap: {\n\t\t\t\tme(o) {\n\t\t\t\t\tformatUser(o);\n\t\t\t\t\treturn o;\n\t\t\t\t},\n\n\t\t\t\tdefault(o) {\n\t\t\t\t\tif (Array.isArray(o)) {\n\t\t\t\t\t\to = {\n\t\t\t\t\t\t\tdata: o.map(formatUser)\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tpaging(o);\n\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\txhr: formatRequest,\n\t\t\tjsonp: formatRequest\n\t\t}\n\t});\n\n\tfunction formatRequest(p, qs) {\n\t\t// Alter the querystring\n\t\tconst token = qs.access_token;\n\t\tdelete qs.access_token;\n\t\tqs.oauth_token = token;\n\t\tqs['_status_code_map[302]'] = 200;\n\t\treturn true;\n\t}\n\n\tfunction formatUser(o) {\n\t\tif (o.id) {\n\t\t\to.picture = o.avatar_url;\n\t\t\to.thumbnail = o.avatar_url;\n\t\t\to.name = o.username || o.full_name;\n\t\t}\n\n\t\treturn o;\n\t}\n\n\t// See: http://developers.soundcloud.com/docs/api/reference#activities\n\tfunction paging(res) {\n\t\tif ('next_href' in res) {\n\t\t\tres.paging = {\n\t\t\t\tnext: res.next_href\n\t\t\t};\n\t\t}\n\t}\n\n}","const hello = require('../hello.js');\n\n{\n\n\tconst base = 'https://api.twitter.com/';\n\n\thello.init({\n\n\t\ttwitter: {\n\n\t\t\t// Ensure that you define an oauth_proxy\n\t\t\toauth: {\n\t\t\t\tversion: '1.0a',\n\t\t\t\tauth: `${base}oauth/authenticate`,\n\t\t\t\trequest: `${base}oauth/request_token`,\n\t\t\t\ttoken: `${base}oauth/access_token`\n\t\t\t},\n\n\t\t\tlogin(p) {\n\t\t\t\t// Reauthenticate\n\t\t\t\t// https://dev.twitter.com/oauth/reference/get/oauth/authenticate\n\t\t\t\tconst prefix = '?force_login=true';\n\t\t\t\tthis.oauth.auth = this.oauth.auth.replace(prefix, '') + (p.options.force ? prefix : '');\n\t\t\t},\n\n\t\t\tbase: `${base}1.1/`,\n\n\t\t\tget: {\n\t\t\t\tme: 'account/verify_credentials.json',\n\t\t\t\t'me/friends': 'friends/list.json?count=@{limit|200}',\n\t\t\t\t'me/following': 'friends/list.json?count=@{limit|200}',\n\t\t\t\t'me/followers': 'followers/list.json?count=@{limit|200}',\n\n\t\t\t\t// Https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline\n\t\t\t\t'me/share': 'statuses/user_timeline.json?count=@{limit|200}',\n\n\t\t\t\t// Https://dev.twitter.com/rest/reference/get/favorites/list\n\t\t\t\t'me/like': 'favorites/list.json?count=@{limit|200}'\n\t\t\t},\n\n\t\t\tpost: {\n\t\t\t\t'me/share'(p, callback) {\n\n\t\t\t\t\tconst data = p.data;\n\t\t\t\t\tp.data = null;\n\n\t\t\t\t\tconst status = [];\n\n\t\t\t\t\t// Change message to status\n\t\t\t\t\tif (data.message) {\n\t\t\t\t\t\tstatus.push(data.message);\n\t\t\t\t\t\tdelete data.message;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If link is given\n\t\t\t\t\tif (data.link) {\n\t\t\t\t\t\tstatus.push(data.link);\n\t\t\t\t\t\tdelete data.link;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.picture) {\n\t\t\t\t\t\tstatus.push(data.picture);\n\t\t\t\t\t\tdelete data.picture;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Compound all the components\n\t\t\t\t\tif (status.length) {\n\t\t\t\t\t\tdata.status = status.join(' ');\n\t\t\t\t\t}\n\n\t\t\t\t\t// Tweet media\n\t\t\t\t\tif (data.file) {\n\t\t\t\t\t\tdata['media[]'] = data.file;\n\t\t\t\t\t\tdelete data.file;\n\t\t\t\t\t\tp.data = data;\n\t\t\t\t\t\tcallback('statuses/update_with_media.json');\n\t\t\t\t\t}\n\n\t\t\t\t\t// Retweet?\n\t\t\t\t\telse if ('id' in data) {\n\t\t\t\t\t\tcallback(`statuses/retweet/${  data.id  }.json`);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Tweet\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Assign the post body to the query parameters\n\t\t\t\t\t\tObject.assign(p.query, data);\n\t\t\t\t\t\tcallback('statuses/update.json?include_entities=1');\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// See: https://dev.twitter.com/rest/reference/post/favorites/create\n\t\t\t\t'me/like'(p, callback) {\n\t\t\t\t\tconst id = p.data.id;\n\t\t\t\t\tp.data = null;\n\t\t\t\t\tcallback(`favorites/create.json?id=${id}`);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdel: {\n\n\t\t\t\t// See: https://dev.twitter.com/rest/reference/post/favorites/destroy\n\t\t\t\t'me/like'(p, callback) {\n\t\t\t\t\tp.method = 'post';\n\t\t\t\t\tconst id = p.data.id;\n\t\t\t\t\tp.data = null;\n\t\t\t\t\tcallback(`favorites/destroy.json?id=${id}`);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\twrap: {\n\t\t\t\tme(res) {\n\t\t\t\t\tformatError(res);\n\t\t\t\t\tformatUser(res);\n\t\t\t\t\treturn res;\n\t\t\t\t},\n\n\t\t\t\t'me/friends': formatFriends,\n\t\t\t\t'me/followers': formatFriends,\n\t\t\t\t'me/following': formatFriends,\n\n\t\t\t\t'me/share'(res) {\n\t\t\t\t\tformatError(res);\n\t\t\t\t\tpaging(res);\n\t\t\t\t\tif (!res.error && 'length' in res) {\n\t\t\t\t\t\treturn {data: res};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn res;\n\t\t\t\t},\n\n\t\t\t\tdefault(res) {\n\t\t\t\t\tres = arrayToDataResponse(res);\n\t\t\t\t\tpaging(res);\n\t\t\t\t\treturn res;\n\t\t\t\t}\n\t\t\t},\n\t\t\txhr(p) {\n\n\t\t\t\t// Rely on the proxy for non-GET requests.\n\t\t\t\treturn (p.method !== 'get');\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction formatUser(o) {\n\t\tif (o.id) {\n\t\t\tif (o.name) {\n\t\t\t\tconst m = o.name.split(' ');\n\t\t\t\to.first_name = m.shift();\n\t\t\t\to.last_name = m.join(' ');\n\t\t\t}\n\n\t\t\t// See: https://dev.twitter.com/overview/general/user-profile-images-and-banners\n\t\t\to.thumbnail = o.profile_image_url_https || o.profile_image_url;\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction formatFriends(o) {\n\t\tformatError(o);\n\t\tpaging(o);\n\t\tif (o.users) {\n\t\t\to.data = o.users.map(formatUser);\n\t\t\tdelete o.users;\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction formatError(o) {\n\t\tif (o.errors) {\n\t\t\tconst e = o.errors[0];\n\t\t\to.error = {\n\t\t\t\tcode: 'request_failed',\n\t\t\t\tmessage: e.message\n\t\t\t};\n\t\t}\n\t}\n\n\t// Take a cursor and add it to the path\n\tfunction paging(res) {\n\t\t// Does the response include a 'next_cursor_string'\n\t\tif ('next_cursor_str' in res) {\n\t\t\t// See: https://dev.twitter.com/docs/misc/cursoring\n\t\t\tres.paging = {\n\t\t\t\tnext: `?cursor=${res.next_cursor_str}`\n\t\t\t};\n\t\t}\n\t}\n\n\tfunction arrayToDataResponse(res) {\n\t\treturn Array.isArray(res) ? {data: res} : res;\n\t}\n\n\t/**\n\t// The documentation says to define user in the request\n\t// Although its not actually required.\n\n\tvar user_id;\n\n\tfunction withUserId(callback){\n\t\tif(user_id){\n\t\t\tcallback(user_id);\n\t\t}\n\t\telse{\n\t\t\thello.api('twitter:/me', function(o){\n\t\t\t\tuser_id = o.id;\n\t\t\t\tcallback(o.id);\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction sign(url){\n\t\treturn function(p, callback){\n\t\t\twithUserId(function(user_id){\n\t\t\t\tcallback(url+'?user_id='+user_id);\n\t\t\t});\n\t\t};\n\t}\n\t*/\n\n}\n","const hello = require('../hello.js');\n\n// Vkontakte (vk.com)\n{\n\n\thello.init({\n\n\t\tvk: {\n\t\t\tname: 'Vk',\n\n\t\t\t// See https://vk.com/dev/oauth_dialog\n\t\t\toauth: {\n\t\t\t\tversion: 2,\n\t\t\t\tauth: 'https://oauth.vk.com/authorize',\n\t\t\t\tgrant: 'https://oauth.vk.com/access_token'\n\t\t\t},\n\n\t\t\t// Authorization scopes\n\t\t\t// See https://vk.com/dev/permissions\n\t\t\tscope: {\n\t\t\t\temail: 'email',\n\t\t\t\tfriends: 'friends',\n\t\t\t\tphotos: 'photos',\n\t\t\t\tvideos: 'video',\n\t\t\t\tshare: 'share',\n\t\t\t\toffline_access: 'offline'\n\t\t\t},\n\n\t\t\t// Refresh the access_token\n\t\t\trefresh: true,\n\n\t\t\tlogin(p) {\n\t\t\t\tp.qs.display = window.navigator &&\n\t\t\t\t\twindow.navigator.userAgent &&\n\t\t\t\t\t/ipad|phone|phone|android/.test(window.navigator.userAgent.toLowerCase()) ? 'mobile' : 'popup';\n\t\t\t},\n\n\t\t\t// API Base URL\n\t\t\tbase: 'https://api.vk.com/method/',\n\n\t\t\t// Map GET requests\n\t\t\tget: {\n\t\t\t\tme(p, callback) {\n\t\t\t\t\tp.query.fields = 'id,first_name,last_name,photo_max';\n\t\t\t\t\tcallback('users.get');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\twrap: {\n\t\t\t\tme(res, headers, req) {\n\t\t\t\t\tformatError(res);\n\t\t\t\t\treturn formatUser(res, req);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// No XHR\n\t\t\txhr: false,\n\n\t\t\t// All requests should be JSONP as of missing CORS headers in https://api.vk.com/method/*\n\t\t\tjsonp: true,\n\n\t\t\t// No form\n\t\t\tform: false\n\t\t}\n\t});\n\n\tfunction formatUser(o, req) {\n\n\t\tif (o !== null && 'response' in o && o.response !== null && o.response.length) {\n\t\t\to = o.response[0];\n\t\t\to.id = o.uid;\n\t\t\to.thumbnail = o.picture = o.photo_max;\n\t\t\to.name = `${o.first_name} ${o.last_name}`;\n\n\t\t\tif (req.authResponse && req.authResponse.email !== null) {\n\t\t\t\to.email = req.authResponse.email;\n\t\t\t}\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction formatError(o) {\n\n\t\tif (o.error) {\n\t\t\tconst e = o.error;\n\t\t\to.error = {\n\t\t\t\tcode: e.error_code,\n\t\t\t\tmessage: e.error_msg\n\t\t\t};\n\t\t}\n\t}\n\n}","const hello = require('../hello.js');\n\nconst hasBinary = require('tricks/object/hasBinary');\nconst toBlob = require('tricks/object/toBlob');\n\n{\n\n\thello.init({\n\t\twindows: {\n\t\t\tname: 'Windows live',\n\n\t\t\t// REF: http://msdn.microsoft.com/en-us/library/hh243641.aspx\n\t\t\toauth: {\n\t\t\t\tversion: 2,\n\t\t\t\tauth: 'https://login.live.com/oauth20_authorize.srf',\n\t\t\t\tgrant: 'https://login.live.com/oauth20_token.srf'\n\t\t\t},\n\n\t\t\t// Refresh the access_token once expired\n\t\t\trefresh: true,\n\n\t\t\tlogout() {\n\t\t\t\treturn `http://login.live.com/oauth20_logout.srf?ts=${(new Date()).getTime()}`;\n\t\t\t},\n\n\t\t\t// Authorization scopes\n\t\t\tscope: {\n\t\t\t\tbasic: 'wl.signin,wl.basic',\n\t\t\t\temail: 'wl.emails',\n\t\t\t\tbirthday: 'wl.birthday',\n\t\t\t\tevents: 'wl.calendars',\n\t\t\t\tphotos: 'wl.photos',\n\t\t\t\tvideos: 'wl.photos',\n\t\t\t\tfriends: 'wl.contacts_emails',\n\t\t\t\tfiles: 'wl.skydrive',\n\t\t\t\tpublish: 'wl.share',\n\t\t\t\tpublish_files: 'wl.skydrive_update',\n\t\t\t\tshare: 'wl.share',\n\t\t\t\tcreate_event: 'wl.calendars_update,wl.events_create',\n\t\t\t\toffline_access: 'wl.offline_access'\n\t\t\t},\n\n\t\t\t// API base URL\n\t\t\tbase: 'https://apis.live.net/v5.0/',\n\n\t\t\t// Map GET requests\n\t\t\tget: {\n\n\t\t\t\t// Friends\n\t\t\t\tme: 'me',\n\t\t\t\t'me/friends': 'me/friends',\n\t\t\t\t'me/following': 'me/contacts',\n\t\t\t\t'me/followers': 'me/friends',\n\t\t\t\t'me/contacts': 'me/contacts',\n\n\t\t\t\t'me/albums': 'me/albums',\n\n\t\t\t\t// Include the data[id] in the path\n\t\t\t\t'me/album': '@{id}/files',\n\t\t\t\t'me/photo': '@{id}',\n\n\t\t\t\t// Files\n\t\t\t\t'me/files': '@{parent|me/skydrive}/files',\n\t\t\t\t'me/folders': '@{id|me/skydrive}/files',\n\t\t\t\t'me/folder': '@{id|me/skydrive}/files'\n\t\t\t},\n\n\t\t\t// Map POST requests\n\t\t\tpost: {\n\t\t\t\t'me/albums': 'me/albums',\n\t\t\t\t'me/album': '@{id}/files/',\n\n\t\t\t\t'me/folders': '@{id|me/skydrive/}',\n\t\t\t\t'me/files': '@{parent|me/skydrive}/files'\n\t\t\t},\n\n\t\t\t// Map DELETE requests\n\t\t\tdel: {\n\t\t\t\t// Include the data[id] in the path\n\t\t\t\t'me/album': '@{id}',\n\t\t\t\t'me/photo': '@{id}',\n\t\t\t\t'me/folder': '@{id}',\n\t\t\t\t'me/files': '@{id}'\n\t\t\t},\n\n\t\t\twrap: {\n\t\t\t\tme: formatUser,\n\n\t\t\t\t'me/friends': formatFriends,\n\t\t\t\t'me/contacts': formatFriends,\n\t\t\t\t'me/followers': formatFriends,\n\t\t\t\t'me/following': formatFriends,\n\t\t\t\t'me/albums': formatAlbums,\n\t\t\t\t'me/photos': formatDefault,\n\t\t\t\tdefault: formatDefault\n\t\t\t},\n\n\t\t\txhr(p) {\n\t\t\t\tif (p.method !== 'get' && p.method !== 'delete' && !hasBinary(p.data)) {\n\n\t\t\t\t\t// Does this have a data-uri to upload as a file?\n\t\t\t\t\tif (typeof (p.data.file) === 'string') {\n\t\t\t\t\t\tp.data.file = toBlob(p.data.file);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp.data = JSON.stringify(p.data);\n\t\t\t\t\t\tp.headers = {\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\tjsonp(p) {\n\t\t\t\tif (p.method !== 'get' && !hasBinary(p.data)) {\n\t\t\t\t\tp.data.method = p.method;\n\t\t\t\t\tp.method = 'get';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction formatDefault(o) {\n\t\tif ('data' in o) {\n\t\t\to.data.forEach(d => {\n\t\t\t\tif (d.picture) {\n\t\t\t\t\td.thumbnail = d.picture;\n\t\t\t\t}\n\n\t\t\t\tif (d.images) {\n\t\t\t\t\td.pictures = d.images\n\t\t\t\t\t\t.map(formatImage)\n\t\t\t\t\t\t.sort((a, b) => a.width - b.width);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction formatImage(image) {\n\t\treturn {\n\t\t\twidth: image.width,\n\t\t\theight: image.height,\n\t\t\tsource: image.source\n\t\t};\n\t}\n\n\tfunction formatAlbums(o) {\n\t\tif ('data' in o) {\n\t\t\to.data.forEach(d => {\n\t\t\t\td.photos = d.files = `https://apis.live.net/v5.0/${  d.id  }/photos`;\n\t\t\t});\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction formatUser(o, headers, req) {\n\t\tif (o.id) {\n\t\t\tconst token = req.authResponse.access_token;\n\t\t\tif (o.emails) {\n\t\t\t\to.email = o.emails.preferred;\n\t\t\t}\n\n\t\t\t// If this is not an non-network friend\n\t\t\tif (o.is_friend !== false) {\n\t\t\t\t// Use the id of the user_id if available\n\t\t\t\tconst id = (o.user_id || o.id);\n\t\t\t\to.thumbnail = o.picture = `https://apis.live.net/v5.0/${  id  }/picture?access_token=${  token}`;\n\t\t\t}\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction formatFriends(o, headers, req) {\n\t\tif ('data' in o) {\n\t\t\to.data.forEach(d => {\n\t\t\t\tformatUser(d, headers, req);\n\t\t\t});\n\t\t}\n\n\t\treturn o;\n\t}\n\n}","const hello = require('../hello.js');\n\n{\n\n\thello.init({\n\n\t\tyahoo: {\n\n\t\t\t// Ensure that you define an oauth_proxy\n\t\t\toauth: {\n\t\t\t\tversion: '1.0a',\n\t\t\t\tauth: 'https://api.login.yahoo.com/oauth/v2/request_auth',\n\t\t\t\trequest: 'https://api.login.yahoo.com/oauth/v2/get_request_token',\n\t\t\t\ttoken: 'https://api.login.yahoo.com/oauth/v2/get_token'\n\t\t\t},\n\n\t\t\t// Login handler\n\t\t\tlogin(p) {\n\t\t\t\t// Change the default popup window to be at least 560\n\t\t\t\t// Yahoo does dynamically change it on the fly for the signin screen (only, what if your already signed in)\n\t\t\t\tp.options.popup.width = 560;\n\n\t\t\t\t// Yahoo throws an parameter error if for whatever reason the state.scope contains a comma, so lets remove scope\n\t\t\t\ttry {\n\t\t\t\t\tdelete p.qs.state.scope;\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\t// Continue\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tbase: 'https://social.yahooapis.com/v1/',\n\n\t\t\tget: {\n\t\t\t\tme: yql('select * from social.profile(0) where guid=me'),\n\t\t\t\t'me/friends': yql('select * from social.contacts(0) where guid=me'),\n\t\t\t\t'me/following': yql('select * from social.contacts(0) where guid=me')\n\t\t\t},\n\t\t\twrap: {\n\t\t\t\tme: formatUser,\n\n\t\t\t\t// Can't get IDs\n\t\t\t\t// It might be better to loop through the social.relationship table with has unique IDs of users.\n\t\t\t\t'me/friends': formatFriends,\n\t\t\t\t'me/following': formatFriends,\n\t\t\t\tdefault: paging\n\t\t\t}\n\t\t}\n\t});\n\n\t/*\n\t\t// Auto-refresh fix: bug in Yahoo can't get this to work with node-oauth-shim\n\t\tlogin : function(o){\n\t\t\t// Is the user already logged in\n\t\t\tvar auth = hello('yahoo').getAuthResponse();\n\n\t\t\t// Is this a refresh token?\n\t\t\tif(o.options.display==='none'&&auth&&auth.access_token&&auth.refresh_token){\n\t\t\t\t// Add the old token and the refresh token, including path to the query\n\t\t\t\t// See http://developer.yahoo.com/oauth/guide/oauth-refreshaccesstoken.html\n\t\t\t\to.qs.access_token = auth.access_token;\n\t\t\t\to.qs.refresh_token = auth.refresh_token;\n\t\t\t\to.qs.token_url = 'https://api.login.yahoo.com/oauth/v2/get_token';\n\t\t\t}\n\t\t},\n\t*/\n\n\tfunction formatError(o) {\n\t\tif (o && 'meta' in o && 'error_type' in o.meta) {\n\t\t\to.error = {\n\t\t\t\tcode: o.meta.error_type,\n\t\t\t\tmessage: o.meta.error_message\n\t\t\t};\n\t\t}\n\t}\n\n\tfunction formatUser(o) {\n\n\t\tformatError(o);\n\t\tif (o.query && o.query.results && o.query.results.profile) {\n\t\t\to = o.query.results.profile;\n\t\t\to.id = o.guid;\n\t\t\to.last_name = o.familyName;\n\t\t\to.first_name = o.givenName || o.nickname;\n\t\t\tconst a = [];\n\t\t\tif (o.first_name) {\n\t\t\t\ta.push(o.first_name);\n\t\t\t}\n\n\t\t\tif (o.last_name) {\n\t\t\t\ta.push(o.last_name);\n\t\t\t}\n\n\t\t\to.name = a.join(' ');\n\t\t\to.email = (o.emails && o.emails[0]) ? o.emails[0].handle : null;\n\t\t\to.thumbnail = o.image ? o.image.imageUrl : null;\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction formatFriends(o, headers, request) {\n\t\tformatError(o);\n\t\tpaging(o, headers, request);\n\t\tif (o.query && o.query.results && o.query.results.contact) {\n\t\t\to.data = o.query.results.contact;\n\t\t\tdelete o.query;\n\n\t\t\tif (!Array.isArray(o.data)) {\n\t\t\t\to.data = [o.data];\n\t\t\t}\n\n\t\t\to.data.forEach(formatFriend);\n\t\t}\n\n\t\treturn o;\n\t}\n\n\tfunction formatFriend(contact) {\n\t\tcontact.id = null;\n\n\t\t// #362: Reports of responses returning a single item, rather than an Array of items.\n\t\t// Format the contact.fields to be an array.\n\t\tif (contact.fields && !(contact.fields instanceof Array)) {\n\t\t\tcontact.fields = [contact.fields];\n\t\t}\n\n\t\t(contact.fields || []).forEach(field => {\n\t\t\tif (field.type === 'email') {\n\t\t\t\tcontact.email = field.value;\n\t\t\t}\n\n\t\t\tif (field.type === 'name') {\n\t\t\t\tcontact.first_name = field.value.givenName;\n\t\t\t\tcontact.last_name = field.value.familyName;\n\t\t\t\tcontact.name = `${field.value.givenName  } ${  field.value.familyName}`;\n\t\t\t}\n\n\t\t\tif (field.type === 'yahooid') {\n\t\t\t\tcontact.id = field.value;\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction paging(res, headers, request) {\n\n\t\t// See: http://developer.yahoo.com/yql/guide/paging.html#local_limits\n\t\tif (res.query && res.query.count && request.options) {\n\t\t\tres.paging = {\n\t\t\t\tnext: `?start=${res.query.count + (+request.options.start || 1)}`\n\t\t\t};\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tfunction yql(q) {\n\t\treturn `https://query.yahooapis.com/v1/yql?q=${(`${q} limit @{limit|100} offset @{start|0}`).replace(/\\s/g, '%20')}&format=json`;\n\t}\n\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcmVnZXhwL2VzY2FwZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19rZXlvZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1mb3JjZWQtcGFtLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJ0aWFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGF0aC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlcGxhY2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctY29udGV4dC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1odG1sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFzYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC50by1qc29uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pYWRkaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvc2hpbS5qcyIsIm5vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJub2RlX21vZHVsZXMvdHJpY2tzL2FycmF5L2RpZmYuanMiLCJub2RlX21vZHVsZXMvdHJpY2tzL2FycmF5L2ZpbmQuanMiLCJub2RlX21vZHVsZXMvdHJpY2tzL2FycmF5L3RvQXJyYXkuanMiLCJub2RlX21vZHVsZXMvdHJpY2tzL2FycmF5L3VuaXF1ZS5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3MvYnJvd3Nlci9hZ2VudC9TdG9yYWdlLmpzIiwibm9kZV9tb2R1bGVzL3RyaWNrcy9icm93c2VyL2FnZW50L2Nvb2tpZVN0b3JhZ2UuanMiLCJub2RlX21vZHVsZXMvdHJpY2tzL2Jyb3dzZXIvYWdlbnQvbG9jYWxTdG9yYWdlLmpzIiwibm9kZV9tb2R1bGVzL3RyaWNrcy9icm93c2VyL2FnZW50L3Nlc3Npb25TdG9yYWdlLmpzIiwibm9kZV9tb2R1bGVzL3RyaWNrcy9icm93c2VyL2h0dHAvZm9ybXBvc3QuanMiLCJub2RlX21vZHVsZXMvdHJpY2tzL2Jyb3dzZXIvaHR0cC9nZXRTY3JpcHQuanMiLCJub2RlX21vZHVsZXMvdHJpY2tzL2Jyb3dzZXIvaHR0cC9qc29ucC5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3MvYnJvd3Nlci9odHRwL3JlcXVlc3QuanMiLCJub2RlX21vZHVsZXMvdHJpY2tzL2Jyb3dzZXIvaHR0cC94aHIuanMiLCJub2RlX21vZHVsZXMvdHJpY2tzL2RvbS9hcHBlbmQuanMiLCJub2RlX21vZHVsZXMvdHJpY2tzL2RvbS9hdHRyLmpzIiwibm9kZV9tb2R1bGVzL3RyaWNrcy9kb20vY3JlYXRlRWxlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3MvZG9tL2RvbUluc3RhbmNlLmpzIiwibm9kZV9tb2R1bGVzL3RyaWNrcy9kb20vZWFjaC5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3MvZG9tL2hpZGRlbkZyYW1lLmpzIiwibm9kZV9tb2R1bGVzL3RyaWNrcy9kb20vaXNEb20uanMiLCJub2RlX21vZHVsZXMvdHJpY2tzL2V2ZW50cy9jcmVhdGVFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3MvZXZlbnRzL2VtaXQuanMiLCJub2RlX21vZHVsZXMvdHJpY2tzL2V2ZW50cy9nbG9iYWxDYWxsYmFjay5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3MvZXZlbnRzL29uLmpzIiwibm9kZV9tb2R1bGVzL3RyaWNrcy9vYmplY3QvYXJncy5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3Mvb2JqZWN0L2Nsb25lLmpzIiwibm9kZV9tb2R1bGVzL3RyaWNrcy9vYmplY3QvZGlmZktleS5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3Mvb2JqZWN0L2V4dGVuZC5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3Mvb2JqZWN0L2hhc0JpbmFyeS5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3Mvb2JqZWN0L2luc3RhbmNlT2YuanMiLCJub2RlX21vZHVsZXMvdHJpY2tzL29iamVjdC9pc0JpbmFyeS5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3Mvb2JqZWN0L2lzRW1wdHkuanMiLCJub2RlX21vZHVsZXMvdHJpY2tzL29iamVjdC9tZXJnZS5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3Mvb2JqZWN0L3B1YnN1Yi5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3Mvb2JqZWN0L3Jld2lyZS5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3Mvb2JqZWN0L3RvQmxvYi5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3Mvb2JqZWN0L3RyeUNhdGNoLmpzIiwibm9kZV9tb2R1bGVzL3RyaWNrcy9zdHJpbmcvY3JlYXRlVXJsLmpzIiwibm9kZV9tb2R1bGVzL3RyaWNrcy9zdHJpbmcvZXh0cmFjdC5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3Mvc3RyaW5nL2pzb25QYXJzZS5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3Mvc3RyaW5nL3BhcmFtLmpzIiwibm9kZV9tb2R1bGVzL3RyaWNrcy9zdHJpbmcvcXVlcnlwYXJzZS5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3Mvc3RyaW5nL3F1ZXJ5c3RyaW5naWZ5LmpzIiwibm9kZV9tb2R1bGVzL3RyaWNrcy9zdHJpbmcvcmFuZG9tLmpzIiwibm9kZV9tb2R1bGVzL3RyaWNrcy9zdXBwb3J0L2NvcnMuanMiLCJub2RlX21vZHVsZXMvdHJpY2tzL3RpbWUvc2V0SW1tZWRpYXRlLmpzIiwibm9kZV9tb2R1bGVzL3RyaWNrcy93aW5kb3cvY2xvc2UuanMiLCJub2RlX21vZHVsZXMvdHJpY2tzL3dpbmRvdy9wb3B1cC5qcyIsIm5vZGVfbW9kdWxlcy90cmlja3Mvd2luZG93L3VybC5qcyIsInNyYy9oZWxsby5hbGwuanMiLCJzcmMvaGVsbG8uY2hyb21lYXBwLmpzIiwic3JjL2hlbGxvLmpzIiwic3JjL2hlbGxvLnBob25lZ2FwLmpzIiwic3JjL21vZHVsZXMvZHJvcGJveC5qcyIsInNyYy9tb2R1bGVzL2ZhY2Vib29rLmpzIiwic3JjL21vZHVsZXMvZmxpY2tyLmpzIiwic3JjL21vZHVsZXMvZm91cnNxdWFyZS5qcyIsInNyYy9tb2R1bGVzL2dpdGh1Yi5qcyIsInNyYy9tb2R1bGVzL2dvb2dsZS5qcyIsInNyYy9tb2R1bGVzL2luc3RhZ3JhbS5qcyIsInNyYy9tb2R1bGVzL2pvaW5tZS5qcyIsInNyYy9tb2R1bGVzL2xpbmtlZGluLmpzIiwic3JjL21vZHVsZXMvc291bmRjbG91ZC5qcyIsInNyYy9tb2R1bGVzL3R3aXR0ZXIuanMiLCJzcmMvbW9kdWxlcy92ay5qcyIsInNyYy9tb2R1bGVzL3dpbmRvd3MuanMiLCJzcmMvbW9kdWxlcy95YWhvby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzNCQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRkE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTs7QUNBQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTs7QUNGQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdCQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5ZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEVBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BOztBQ0FBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDL0tBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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dGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL3NoaW1cIik7XG5cbnJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWVcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGVcIik7XG5cbmlmIChnbG9iYWwuX2JhYmVsUG9seWZpbGwpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwib25seSBvbmUgaW5zdGFuY2Ugb2YgYmFiZWwtcG9seWZpbGwgaXMgYWxsb3dlZFwiKTtcbn1cbmdsb2JhbC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7XG5cbnZhciBERUZJTkVfUFJPUEVSVFkgPSBcImRlZmluZVByb3BlcnR5XCI7XG5mdW5jdGlvbiBkZWZpbmUoTywga2V5LCB2YWx1ZSkge1xuICBPW2tleV0gfHwgT2JqZWN0W0RFRklORV9QUk9QRVJUWV0oTywga2V5LCB7XG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9KTtcbn1cblxuZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIFwicGFkTGVmdFwiLCBcIlwiLnBhZFN0YXJ0KTtcbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZFJpZ2h0XCIsIFwiXCIucGFkRW5kKTtcblxuXCJwb3AscmV2ZXJzZSxzaGlmdCxrZXlzLHZhbHVlcyxlbnRyaWVzLGluZGV4T2YsZXZlcnksc29tZSxmb3JFYWNoLG1hcCxmaWx0ZXIsZmluZCxmaW5kSW5kZXgsaW5jbHVkZXMsam9pbixzbGljZSxjb25jYXQscHVzaCxzcGxpY2UsdW5zaGlmdCxzb3J0LGxhc3RJbmRleE9mLHJlZHVjZSxyZWR1Y2VSaWdodCxjb3B5V2l0aGluLGZpbGxcIi5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIFtdW2tleV0gJiYgZGVmaW5lKEFycmF5LCBrZXksIEZ1bmN0aW9uLmNhbGwuYmluZChbXVtrZXldKSk7XG59KTsiLCJyZXF1aXJlKDExOSk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoMjMpLlJlZ0V4cC5lc2NhcGU7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07IiwidmFyIGNvZiA9IHJlcXVpcmUoMTgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgbXNnKXtcbiAgaWYodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59OyIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoMTE3KSgndW5zY29wYWJsZXMnKVxuICAsIEFycmF5UHJvdG8gID0gQXJyYXkucHJvdG90eXBlO1xuaWYoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKXJlcXVpcmUoNDApKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpe1xuICBpZighKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSl7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59OyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoNDkpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKCFpc09iamVjdChpdCkpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59OyIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgxMDkpXG4gICwgdG9JbmRleCAgPSByZXF1aXJlKDEwNSlcbiAgLCB0b0xlbmd0aCA9IHJlcXVpcmUoMTA4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0Lyo9IDAqLywgc3RhcnQvKj0gMCwgZW5kID0gQGxlbmd0aCovKXtcbiAgdmFyIE8gICAgID0gdG9PYmplY3QodGhpcylcbiAgICAsIGxlbiAgID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgLCB0byAgICA9IHRvSW5kZXgodGFyZ2V0LCBsZW4pXG4gICAgLCBmcm9tICA9IHRvSW5kZXgoc3RhcnQsIGxlbilcbiAgICAsIGVuZCAgID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWRcbiAgICAsIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9JbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pXG4gICAgLCBpbmMgICA9IDE7XG4gIGlmKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCl7XG4gICAgaW5jICA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICAgKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlKGNvdW50LS0gPiAwKXtcbiAgICBpZihmcm9tIGluIE8pT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICAgKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTsiLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoMTA5KVxuICAsIHRvSW5kZXggID0gcmVxdWlyZSgxMDUpXG4gICwgdG9MZW5ndGggPSByZXF1aXJlKDEwOCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyosIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLyl7XG4gIHZhciBPICAgICAgPSB0b09iamVjdCh0aGlzKVxuICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgLCBhTGVuICAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBpbmRleCAgPSB0b0luZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpXG4gICAgLCBlbmQgICAgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZFxuICAgICwgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0luZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUoZW5kUG9zID4gaW5kZXgpT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07IiwidmFyIGZvck9mID0gcmVxdWlyZSgzNyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlciwgSVRFUkFUT1Ipe1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKDEwNylcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKDEwOClcbiAgLCB0b0luZGV4ICAgPSByZXF1aXJlKDEwNSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKElTX0lOQ0xVREVTKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBlbCwgZnJvbUluZGV4KXtcbiAgICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KCR0aGlzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gdG9JbmRleChmcm9tSW5kZXgsIGxlbmd0aClcbiAgICAgICwgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIGlmKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKXdoaWxlKGxlbmd0aCA+IGluZGV4KXtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIGlmKHZhbHVlICE9IHZhbHVlKXJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I3RvSW5kZXggaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKylpZihJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKXtcbiAgICAgIGlmKE9baW5kZXhdID09PSBlbClyZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59OyIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggICAgICA9IHJlcXVpcmUoMjUpXG4gICwgSU9iamVjdCAgPSByZXF1aXJlKDQ1KVxuICAsIHRvT2JqZWN0ID0gcmVxdWlyZSgxMDkpXG4gICwgdG9MZW5ndGggPSByZXF1aXJlKDEwOClcbiAgLCBhc2MgICAgICA9IHJlcXVpcmUoMTUpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUWVBFLCAkY3JlYXRlKXtcbiAgdmFyIElTX01BUCAgICAgICAgPSBUWVBFID09IDFcbiAgICAsIElTX0ZJTFRFUiAgICAgPSBUWVBFID09IDJcbiAgICAsIElTX1NPTUUgICAgICAgPSBUWVBFID09IDNcbiAgICAsIElTX0VWRVJZICAgICAgPSBUWVBFID09IDRcbiAgICAsIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDZcbiAgICAsIE5PX0hPTEVTICAgICAgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWFxuICAgICwgY3JlYXRlICAgICAgICA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpe1xuICAgIHZhciBPICAgICAgPSB0b09iamVjdCgkdGhpcylcbiAgICAgICwgc2VsZiAgID0gSU9iamVjdChPKVxuICAgICAgLCBmICAgICAgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IDBcbiAgICAgICwgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZFxuICAgICAgLCB2YWwsIHJlcztcbiAgICBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpe1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYoVFlQRSl7XG4gICAgICAgIGlmKElTX01BUClyZXN1bHRbaW5kZXhdID0gcmVzOyAgICAgICAgICAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmKHJlcylzd2l0Y2goVFlQRSl7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZihJU19FVkVSWSlyZXR1cm4gZmFsc2U7ICAgICAgICAgIC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59OyIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKDMpXG4gICwgdG9PYmplY3QgID0gcmVxdWlyZSgxMDkpXG4gICwgSU9iamVjdCAgID0gcmVxdWlyZSg0NSlcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKDEwOCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCl7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gICAgICA9IHRvT2JqZWN0KHRoYXQpXG4gICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pXG4gICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAsIGluZGV4ICA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMFxuICAgICwgaSAgICAgID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYoYUxlbiA8IDIpZm9yKDs7KXtcbiAgICBpZihpbmRleCBpbiBzZWxmKXtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZihpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KXtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpaWYoaW5kZXggaW4gc2VsZil7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07IiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSg0OSlcbiAgLCBpc0FycmF5ICA9IHJlcXVpcmUoNDcpXG4gICwgU1BFQ0lFUyAgPSByZXF1aXJlKDExNykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbCl7XG4gIHZhciBDO1xuICBpZihpc0FycmF5KG9yaWdpbmFsKSl7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKUMgPSB1bmRlZmluZWQ7XG4gICAgaWYoaXNPYmplY3QoQykpe1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZihDID09PSBudWxsKUMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59OyIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKDE0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbCwgbGVuZ3RoKXtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiAgPSByZXF1aXJlKDMpXG4gICwgaXNPYmplY3QgICA9IHJlcXVpcmUoNDkpXG4gICwgaW52b2tlICAgICA9IHJlcXVpcmUoNDQpXG4gICwgYXJyYXlTbGljZSA9IFtdLnNsaWNlXG4gICwgZmFjdG9yaWVzICA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24oRiwgbGVuLCBhcmdzKXtcbiAgaWYoIShsZW4gaW4gZmFjdG9yaWVzKSl7XG4gICAgZm9yKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qLCBhcmdzLi4uICovKXtcbiAgdmFyIGZuICAgICAgID0gYUZ1bmN0aW9uKHRoaXMpXG4gICAgLCBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbigvKiBhcmdzLi4uICovKXtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYoaXNPYmplY3QoZm4ucHJvdG90eXBlKSlib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07IiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKDE4KVxuICAsIFRBRyA9IHJlcXVpcmUoMTE3KSgndG9TdHJpbmdUYWcnKVxuICAvLyBFUzMgd3JvbmcgaGVyZVxuICAsIEFSRyA9IGNvZihmdW5jdGlvbigpeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07IiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgZFAgICAgICAgICAgPSByZXF1aXJlKDY3KS5mXG4gICwgY3JlYXRlICAgICAgPSByZXF1aXJlKDY2KVxuICAsIHJlZGVmaW5lQWxsID0gcmVxdWlyZSg4NilcbiAgLCBjdHggICAgICAgICA9IHJlcXVpcmUoMjUpXG4gICwgYW5JbnN0YW5jZSAgPSByZXF1aXJlKDYpXG4gICwgZGVmaW5lZCAgICAgPSByZXF1aXJlKDI3KVxuICAsIGZvck9mICAgICAgID0gcmVxdWlyZSgzNylcbiAgLCAkaXRlckRlZmluZSA9IHJlcXVpcmUoNTMpXG4gICwgc3RlcCAgICAgICAgPSByZXF1aXJlKDU1KVxuICAsIHNldFNwZWNpZXMgID0gcmVxdWlyZSg5MSlcbiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoMjgpXG4gICwgZmFzdEtleSAgICAgPSByZXF1aXJlKDYyKS5mYXN0S2V5XG4gICwgU0laRSAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uKHRoYXQsIGtleSl7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSksIGVudHJ5O1xuICBpZihpbmRleCAhPT0gJ0YnKXJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvcihlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pe1xuICAgIGlmKGVudHJ5LmsgPT0ga2V5KXJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpe1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpe1xuICAgICAgICBmb3IodmFyIHRoYXQgPSB0aGlzLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKXtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZihlbnRyeS5wKWVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIHZhciB0aGF0ICA9IHRoaXNcbiAgICAgICAgICAsIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYoZW50cnkpe1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkublxuICAgICAgICAgICAgLCBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZihwcmV2KXByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYobmV4dCluZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmKHRoYXQuX2YgPT0gZW50cnkpdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYodGhhdC5fbCA9PSBlbnRyeSl0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgICAgIGFuSW5zdGFuY2UodGhpcywgQywgJ2ZvckVhY2gnKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpXG4gICAgICAgICAgLCBlbnRyeTtcbiAgICAgICAgd2hpbGUoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKXtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlKGVudHJ5ICYmIGVudHJ5LnIpZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpe1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmKERFU0NSSVBUT1JTKWRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIGRlZmluZWQodGhpc1tTSVpFXSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KVxuICAgICAgLCBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZihlbnRyeSl7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZighdGhhdC5fZil0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZihwcmV2KXByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZihpbmRleCAhPT0gJ0YnKXRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uKEMsIE5BTUUsIElTX01BUCl7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXtcbiAgICAgIHRoaXMuX3QgPSBpdGVyYXRlZDsgIC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbigpe1xuICAgICAgdmFyIHRoYXQgID0gdGhpc1xuICAgICAgICAsIGtpbmQgID0gdGhhdC5fa1xuICAgICAgICAsIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUoZW50cnkgJiYgZW50cnkucillbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSl7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnICwgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyIGNsYXNzb2YgPSByZXF1aXJlKDE3KVxuICAsIGZyb20gICAgPSByZXF1aXJlKDEwKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSl7XG4gIHJldHVybiBmdW5jdGlvbiB0b0pTT04oKXtcbiAgICBpZihjbGFzc29mKHRoaXMpICE9IE5BTUUpdGhyb3cgVHlwZUVycm9yKE5BTUUgKyBcIiN0b0pTT04gaXNuJ3QgZ2VuZXJpY1wiKTtcbiAgICByZXR1cm4gZnJvbSh0aGlzKTtcbiAgfTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsICAgICAgID0gcmVxdWlyZSg4NilcbiAgLCBnZXRXZWFrICAgICAgICAgICA9IHJlcXVpcmUoNjIpLmdldFdlYWtcbiAgLCBhbk9iamVjdCAgICAgICAgICA9IHJlcXVpcmUoNylcbiAgLCBpc09iamVjdCAgICAgICAgICA9IHJlcXVpcmUoNDkpXG4gICwgYW5JbnN0YW5jZSAgICAgICAgPSByZXF1aXJlKDYpXG4gICwgZm9yT2YgICAgICAgICAgICAgPSByZXF1aXJlKDM3KVxuICAsIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgxMilcbiAgLCAkaGFzICAgICAgICAgICAgICA9IHJlcXVpcmUoMzkpXG4gICwgYXJyYXlGaW5kICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg1KVxuICAsIGFycmF5RmluZEluZGV4ICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNilcbiAgLCBpZCAgICAgICAgICAgICAgICA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbih0aGF0KXtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbigpe1xuICB0aGlzLmEgPSBbXTtcbn07XG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24oc3RvcmUsIGtleSl7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbihrZXkpe1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmKGVudHJ5KXJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbihrZXkpe1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpe1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmKGVudHJ5KWVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24oa2V5KXtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uKGl0KXtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmKH5pbmRleCl0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24od3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUil7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGl0ZXJhYmxlKXtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgICAgICBpZighaXNPYmplY3Qoa2V5KSlyZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZihkYXRhID09PSB0cnVlKXJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHRoaXMpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpe1xuICAgICAgICBpZighaXNPYmplY3Qoa2V5KSlyZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZihkYXRhID09PSB0cnVlKXJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHRoaXMpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpe1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZihkYXRhID09PSB0cnVlKXVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGF0O1xuICB9LFxuICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlXG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICAgICAgICA9IHJlcXVpcmUoMzgpXG4gICwgJGV4cG9ydCAgICAgICAgICAgPSByZXF1aXJlKDMyKVxuICAsIHJlZGVmaW5lICAgICAgICAgID0gcmVxdWlyZSg4NylcbiAgLCByZWRlZmluZUFsbCAgICAgICA9IHJlcXVpcmUoODYpXG4gICwgbWV0YSAgICAgICAgICAgICAgPSByZXF1aXJlKDYyKVxuICAsIGZvck9mICAgICAgICAgICAgID0gcmVxdWlyZSgzNylcbiAgLCBhbkluc3RhbmNlICAgICAgICA9IHJlcXVpcmUoNilcbiAgLCBpc09iamVjdCAgICAgICAgICA9IHJlcXVpcmUoNDkpXG4gICwgZmFpbHMgICAgICAgICAgICAgPSByZXF1aXJlKDM0KVxuICAsICRpdGVyRGV0ZWN0ICAgICAgID0gcmVxdWlyZSg1NClcbiAgLCBzZXRUb1N0cmluZ1RhZyAgICA9IHJlcXVpcmUoOTIpXG4gICwgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKDQzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSyl7XG4gIHZhciBCYXNlICA9IGdsb2JhbFtOQU1FXVxuICAgICwgQyAgICAgPSBCYXNlXG4gICAgLCBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCdcbiAgICAsIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZVxuICAgICwgTyAgICAgPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uKEtFWSl7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24oYSl7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKXtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpe1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSl7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSAgICAgICAgICAgICA9IG5ldyBDXG4gICAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgICAsIEhBU05UX0NIQUlOSU5HICAgICAgID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZVxuICAgICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgICAsIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24oKXsgaW5zdGFuY2UuaGFzKDEpOyB9KVxuICAgICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgICAgLCBBQ0NFUFRfSVRFUkFCTEVTICAgICA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uKGl0ZXIpeyBuZXcgQyhpdGVyKTsgfSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgICAgLCBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpXG4gICAgICAgICAgLCBpbmRleCAgICAgPSA1O1xuICAgICAgICB3aGlsZShpbmRleC0tKSRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICAgIH0pO1xuICAgIGlmKCFBQ0NFUFRfSVRFUkFCTEVTKXsgXG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbih0YXJnZXQsIGl0ZXJhYmxlKXtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTyl7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZihCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKWZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZihJU19XRUFLICYmIHByb3RvLmNsZWFyKWRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZighSVNfV0VBSyljb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59OyIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7dmVyc2lvbjogJzIuNC4wJ307XG5pZih0eXBlb2YgX19lID09ICdudW1iZXInKV9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWYiLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSg2NylcbiAgLCBjcmVhdGVEZXNjICAgICAgPSByZXF1aXJlKDg1KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIGluZGV4LCB2YWx1ZSl7XG4gIGlmKGluZGV4IGluIG9iamVjdCkkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTsiLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKDMpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKXtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcbiAgc3dpdGNoKGxlbmd0aCl7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYSl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgICAgPSByZXF1aXJlKDcpXG4gICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKDExMClcbiAgLCBOVU1CRVIgICAgICA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGhpbnQpe1xuICBpZihoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKXRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59OyIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoaXQgPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTsiLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKDM0KShmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xufSk7IiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSg0OSlcbiAgLCBkb2N1bWVudCA9IHJlcXVpcmUoMzgpLmRvY3VtZW50XG4gIC8vIGluIG9sZCBJRSB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0J1xuICAsIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59OyIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpOyIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoNzYpXG4gICwgZ09QUyAgICA9IHJlcXVpcmUoNzMpXG4gICwgcElFICAgICA9IHJlcXVpcmUoNzcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciByZXN1bHQgICAgID0gZ2V0S2V5cyhpdClcbiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmKGdldFN5bWJvbHMpe1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdClcbiAgICAgICwgaXNFbnVtICA9IHBJRS5mXG4gICAgICAsIGkgICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShzeW1ib2xzLmxlbmd0aCA+IGkpaWYoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTsiLCJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgzOClcbiAgLCBjb3JlICAgICAgPSByZXF1aXJlKDIzKVxuICAsIGhpZGUgICAgICA9IHJlcXVpcmUoNDApXG4gICwgcmVkZWZpbmUgID0gcmVxdWlyZSg4NylcbiAgLCBjdHggICAgICAgPSByZXF1aXJlKDI1KVxuICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GXG4gICAgLCBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HXG4gICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TXG4gICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QXG4gICAgLCBJU19CSU5EICAgPSB0eXBlICYgJGV4cG9ydC5CXG4gICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV1cbiAgICAsIGV4cG9ydHMgICA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pXG4gICAgLCBleHBQcm90byAgPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KVxuICAgICwga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZihJU19HTE9CQUwpc291cmNlID0gbmFtZTtcbiAgZm9yKGtleSBpbiBzb3VyY2Upe1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmKHRhcmdldClyZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZihleHBvcnRzW2tleV0gIT0gb3V0KWhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KWV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgIFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0OyIsInZhciBNQVRDSCA9IHJlcXVpcmUoMTE3KSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZKXtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoKGUpe1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaChmKXsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpe1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG52YXIgaGlkZSAgICAgPSByZXF1aXJlKDQwKVxuICAsIHJlZGVmaW5lID0gcmVxdWlyZSg4NylcbiAgLCBmYWlscyAgICA9IHJlcXVpcmUoMzQpXG4gICwgZGVmaW5lZCAgPSByZXF1aXJlKDI3KVxuICAsIHdrcyAgICAgID0gcmVxdWlyZSgxMTcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgbGVuZ3RoLCBleGVjKXtcbiAgdmFyIFNZTUJPTCAgID0gd2tzKEtFWSlcbiAgICAsIGZucyAgICAgID0gZXhlYyhkZWZpbmVkLCBTWU1CT0wsICcnW0tFWV0pXG4gICAgLCBzdHJmbiAgICA9IGZuc1swXVxuICAgICwgcnhmbiAgICAgPSBmbnNbMV07XG4gIGlmKGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbigpeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KSl7XG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbihzdHJpbmcsIGFyZyl7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24oc3RyaW5nKXsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSg3KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXtcbiAgdmFyIHRoYXQgICA9IGFuT2JqZWN0KHRoaXMpXG4gICAgLCByZXN1bHQgPSAnJztcbiAgaWYodGhhdC5nbG9iYWwpICAgICByZXN1bHQgKz0gJ2cnO1xuICBpZih0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmKHRoYXQubXVsdGlsaW5lKSAgcmVzdWx0ICs9ICdtJztcbiAgaWYodGhhdC51bmljb2RlKSAgICByZXN1bHQgKz0gJ3UnO1xuICBpZih0aGF0LnN0aWNreSkgICAgIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59OyIsInZhciBjdHggICAgICAgICA9IHJlcXVpcmUoMjUpXG4gICwgY2FsbCAgICAgICAgPSByZXF1aXJlKDUxKVxuICAsIGlzQXJyYXlJdGVyID0gcmVxdWlyZSg0NilcbiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoNylcbiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoMTA4KVxuICAsIGdldEl0ZXJGbiAgID0gcmVxdWlyZSgxMTgpXG4gICwgQlJFQUsgICAgICAgPSB7fVxuICAsIFJFVFVSTiAgICAgID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUil7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uKCl7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSlcbiAgICAsIGYgICAgICA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKVxuICAgICwgaW5kZXggID0gMFxuICAgICwgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZihpc0FycmF5SXRlcihpdGVyRm4pKWZvcihsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyApe1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07IiwidmFyIGRQICAgICAgICAgPSByZXF1aXJlKDY3KVxuICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKDg1KTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgyOCkgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgzOCkuZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OyIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoMjgpICYmICFyZXF1aXJlKDM0KShmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoMjkpKCdkaXYnKSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcbn0pOyIsInZhciBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoNDkpXG4gICwgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKDkwKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRoYXQsIHRhcmdldCwgQyl7XG4gIHZhciBQLCBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICBpZihTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKXtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07IiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCBhcmdzLCB0aGF0KXtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2goYXJncy5sZW5ndGgpe1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiAgICAgICAgICAgICAgZm4uYXBwbHkodGhhdCwgYXJncyk7XG59OyIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgxOCk7XG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59OyIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgID0gcmVxdWlyZSg1NilcbiAgLCBJVEVSQVRPUiAgID0gcmVxdWlyZSgxMTcpKCdpdGVyYXRvcicpXG4gICwgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59OyIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgxOCk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpe1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07IiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKDQ5KVxuICAsIGZsb29yICAgID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KXtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTsiLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoNDkpXG4gICwgY29mICAgICAgPSByZXF1aXJlKDE4KVxuICAsIE1BVENIICAgID0gcmVxdWlyZSgxMTcpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTsiLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKDcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoKGUpe1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYocmV0ICE9PSB1bmRlZmluZWQpYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgICAgICAgICA9IHJlcXVpcmUoNjYpXG4gICwgZGVzY3JpcHRvciAgICAgPSByZXF1aXJlKDg1KVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSg5MilcbiAgLCBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSg0MCkoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoMTE3KSgnaXRlcmF0b3InKSwgZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KXtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7bmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KX0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSg1OClcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoMzIpXG4gICwgcmVkZWZpbmUgICAgICAgPSByZXF1aXJlKDg3KVxuICAsIGhpZGUgICAgICAgICAgID0gcmVxdWlyZSg0MClcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoMzkpXG4gICwgSXRlcmF0b3JzICAgICAgPSByZXF1aXJlKDU2KVxuICAsICRpdGVyQ3JlYXRlICAgID0gcmVxdWlyZSg1MilcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoOTIpXG4gICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKDc0KVxuICAsIElURVJBVE9SICAgICAgID0gcmVxdWlyZSgxMTcpKCdpdGVyYXRvcicpXG4gICwgQlVHR1kgICAgICAgICAgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSkgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICAsIEZGX0lURVJBVE9SICAgID0gJ0BAaXRlcmF0b3InXG4gICwgS0VZUyAgICAgICAgICAgPSAna2V5cydcbiAgLCBWQUxVRVMgICAgICAgICA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCl7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uKGtpbmQpe1xuICAgIGlmKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKXJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2goa2luZCl7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyAgICAgICAgPSBOQU1FICsgJyBJdGVyYXRvcidcbiAgICAsIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFU1xuICAgICwgVkFMVUVTX0JVRyA9IGZhbHNlXG4gICAgLCBwcm90byAgICAgID0gQmFzZS5wcm90b3R5cGVcbiAgICAsICRuYXRpdmUgICAgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF1cbiAgICAsICRkZWZhdWx0ICAgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKVxuICAgICwgJGVudHJpZXMgICA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWRcbiAgICAsICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlXG4gICAgLCBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmKCRhbnlOYXRpdmUpe1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKSk7XG4gICAgaWYoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpe1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmKCFMSUJSQVJZICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSloaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKXtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZigoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSl7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSAgPSByZXR1cm5UaGlzO1xuICBpZihERUZBVUxUKXtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiAgREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiAgICBJU19TRVQgICAgID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYoRk9SQ0VEKWZvcihrZXkgaW4gbWV0aG9kcyl7XG4gICAgICBpZighKGtleSBpbiBwcm90bykpcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTsiLCJ2YXIgSVRFUkFUT1IgICAgID0gcmVxdWlyZSgxMTcpKCdpdGVyYXRvcicpXG4gICwgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24oKXsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24oKXsgdGhyb3cgMjsgfSk7XG59IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYywgc2tpcENsb3Npbmcpe1xuICBpZighc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORylyZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciAgPSBbN11cbiAgICAgICwgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbigpeyByZXR1cm4ge2RvbmU6IHNhZmUgPSB0cnVlfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRvbmUsIHZhbHVlKXtcbiAgcmV0dXJuIHt2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZX07XG59OyIsIm1vZHVsZS5leHBvcnRzID0ge307IiwidmFyIGdldEtleXMgICA9IHJlcXVpcmUoNzYpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgxMDcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIGVsKXtcbiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pXG4gICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICwgaW5kZXggID0gMFxuICAgICwga2V5O1xuICB3aGlsZShsZW5ndGggPiBpbmRleClpZihPW2tleSA9IGtleXNbaW5kZXgrK11dID09PSBlbClyZXR1cm4ga2V5O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlOyIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KXtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IE1hdGguZXhwKHgpIC0gMTtcbn0gOiAkZXhwbTE7IiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KXtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xufTsiLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpe1xuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59OyIsInZhciBNRVRBICAgICA9IHJlcXVpcmUoMTE0KSgnbWV0YScpXG4gICwgaXNPYmplY3QgPSByZXF1aXJlKDQ5KVxuICAsIGhhcyAgICAgID0gcmVxdWlyZSgzOSlcbiAgLCBzZXREZXNjICA9IHJlcXVpcmUoNjcpLmZcbiAgLCBpZCAgICAgICA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbigpe1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoMzQpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24oaXQpe1xuICBzZXREZXNjKGl0LCBNRVRBLCB7dmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9fSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZighaXNPYmplY3QoaXQpKXJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmKCFoYXMoaXQsIE1FVEEpKXtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZighY3JlYXRlKXJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7XG4gIGlmKCFoYXMoaXQsIE1FVEEpKXtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKXNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiAgICAgIE1FVEEsXG4gIE5FRUQ6ICAgICBmYWxzZSxcbiAgZmFzdEtleTogIGZhc3RLZXksXG4gIGdldFdlYWs6ICBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07IiwidmFyIE1hcCAgICAgPSByZXF1aXJlKDE0OSlcbiAgLCAkZXhwb3J0ID0gcmVxdWlyZSgzMilcbiAgLCBzaGFyZWQgID0gcmVxdWlyZSg5NCkoJ21ldGFkYXRhJylcbiAgLCBzdG9yZSAgID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoMjU1KSkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uKHRhcmdldCwgdGFyZ2V0S2V5LCBjcmVhdGUpe1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgaWYoIXRhcmdldE1ldGFkYXRhKXtcbiAgICBpZighY3JlYXRlKXJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKTtcbiAgfVxuICB2YXIga2V5TWV0YWRhdGEgPSB0YXJnZXRNZXRhZGF0YS5nZXQodGFyZ2V0S2V5KTtcbiAgaWYoIWtleU1ldGFkYXRhKXtcbiAgICBpZighY3JlYXRlKXJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKTtcbiAgfSByZXR1cm4ga2V5TWV0YWRhdGE7XG59O1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogbWV0YWRhdGFNYXAuaGFzKE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKXtcbiAgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCB0cnVlKS5zZXQoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUpO1xufTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uKHRhcmdldCwgdGFyZ2V0S2V5KXtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCh0YXJnZXQsIHRhcmdldEtleSwgZmFsc2UpXG4gICAgLCBrZXlzICAgICAgICA9IFtdO1xuICBpZihtZXRhZGF0YU1hcCltZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uKF8sIGtleSl7IGtleXMucHVzaChrZXkpOyB9KTtcbiAgcmV0dXJuIGtleXM7XG59O1xudmFyIHRvTWV0YUtleSA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcbnZhciBleHAgPSBmdW5jdGlvbihPKXtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07IiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoMzgpXG4gICwgbWFjcm90YXNrID0gcmVxdWlyZSgxMDQpLnNldFxuICAsIE9ic2VydmVyICA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyXG4gICwgcHJvY2VzcyAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBQcm9taXNlICAgPSBnbG9iYWwuUHJvbWlzZVxuICAsIGlzTm9kZSAgICA9IHJlcXVpcmUoMTgpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpe1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZShoZWFkKXtcbiAgICAgIGZuICAgPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICBpZihoZWFkKW5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmKHBhcmVudClwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmKGlzTm9kZSl7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlclxuICB9IGVsc2UgaWYoT2JzZXJ2ZXIpe1xuICAgIHZhciB0b2dnbGUgPSB0cnVlXG4gICAgICAsIG5vZGUgICA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwge2NoYXJhY3RlckRhdGE6IHRydWV9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpe1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGZuKXtcbiAgICB2YXIgdGFzayA9IHtmbjogZm4sIG5leHQ6IHVuZGVmaW5lZH07XG4gICAgaWYobGFzdClsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmKCFoZWFkKXtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgID0gcmVxdWlyZSg3NilcbiAgLCBnT1BTICAgICA9IHJlcXVpcmUoNzMpXG4gICwgcElFICAgICAgPSByZXF1aXJlKDc3KVxuICAsIHRvT2JqZWN0ID0gcmVxdWlyZSgxMDkpXG4gICwgSU9iamVjdCAgPSByZXF1aXJlKDQ1KVxuICAsICRhc3NpZ24gID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoMzQpKGZ1bmN0aW9uKCl7XG4gIHZhciBBID0ge31cbiAgICAsIEIgPSB7fVxuICAgICwgUyA9IFN5bWJvbCgpXG4gICAgLCBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24oayl7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgICAgID0gdG9PYmplY3QodGFyZ2V0KVxuICAgICwgYUxlbiAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBpbmRleCA9IDFcbiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmZcbiAgICAsIGlzRW51bSAgICAgPSBwSUUuZjtcbiAgd2hpbGUoYUxlbiA+IGluZGV4KXtcbiAgICB2YXIgUyAgICAgID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pXG4gICAgICAsIGtleXMgICA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUylcbiAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAgICwgaiAgICAgID0gMFxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUobGVuZ3RoID4gailpZihpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKVRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduOyIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSg3KVxuICAsIGRQcyAgICAgICAgID0gcmVxdWlyZSg2OClcbiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoMzApXG4gICwgSUVfUFJPVE8gICAgPSByZXF1aXJlKDkzKSgnSUVfUFJPVE8nKVxuICAsIEVtcHR5ICAgICAgID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfVxuICAsIFBST1RPVFlQRSAgID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24oKXtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoMjkpKCdpZnJhbWUnKVxuICAgICwgaSAgICAgID0gZW51bUJ1Z0tleXMubGVuZ3RoXG4gICAgLCBsdCAgICAgPSAnPCdcbiAgICAsIGd0ICAgICA9ICc+J1xuICAgICwgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKDQxKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZShpLS0pZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpe1xuICB2YXIgcmVzdWx0O1xuICBpZihPICE9PSBudWxsKXtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5O1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoNylcbiAgLCBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoNDIpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKDExMClcbiAgLCBkUCAgICAgICAgICAgICA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgyOCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKXtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIGlmKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcyl0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZigndmFsdWUnIGluIEF0dHJpYnV0ZXMpT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTsiLCJ2YXIgZFAgICAgICAgPSByZXF1aXJlKDY3KVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSg3KVxuICAsIGdldEtleXMgID0gcmVxdWlyZSg3Nik7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgyOCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcyl7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyAgID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKVxuICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAsIGkgPSAwXG4gICAgLCBQO1xuICB3aGlsZShsZW5ndGggPiBpKWRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTsiLCIvLyBGb3JjZWQgcmVwbGFjZW1lbnQgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoNTgpfHwgIXJlcXVpcmUoMzQpKGZ1bmN0aW9uKCl7XG4gIHZhciBLID0gTWF0aC5yYW5kb20oKTtcbiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHNcbiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIEssIGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovfSk7XG4gIGRlbGV0ZSByZXF1aXJlKDM4KVtLXTtcbn0pOyIsInZhciBwSUUgICAgICAgICAgICA9IHJlcXVpcmUoNzcpXG4gICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKDg1KVxuICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgxMDcpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKDExMClcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoMzkpXG4gICwgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKDQyKVxuICAsIGdPUEQgICAgICAgICAgID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgyOCkgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApe1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgaWYoaGFzKE8sIFApKXJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07IiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoMTA3KVxuICAsIGdPUE4gICAgICA9IHJlcXVpcmUoNzIpLmZcbiAgLCB0b1N0cmluZyAgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uKGl0KXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KXtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgICAgICA9IHJlcXVpcmUoNzUpXG4gICwgaGlkZGVuS2V5cyA9IHJlcXVpcmUoMzApLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pe1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59OyIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7IiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgICAgICAgICA9IHJlcXVpcmUoMzkpXG4gICwgdG9PYmplY3QgICAgPSByZXF1aXJlKDEwOSlcbiAgLCBJRV9QUk9UTyAgICA9IHJlcXVpcmUoOTMpKCdJRV9QUk9UTycpXG4gICwgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbihPKXtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZihoYXMoTywgSUVfUFJPVE8pKXJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcil7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTsiLCJ2YXIgaGFzICAgICAgICAgID0gcmVxdWlyZSgzOSlcbiAgLCB0b0lPYmplY3QgICAgPSByZXF1aXJlKDEwNylcbiAgLCBhcnJheUluZGV4T2YgPSByZXF1aXJlKDExKShmYWxzZSlcbiAgLCBJRV9QUk9UTyAgICAgPSByZXF1aXJlKDkzKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIG5hbWVzKXtcbiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwga2V5O1xuICBmb3Ioa2V5IGluIE8paWYoa2V5ICE9IElFX1BST1RPKWhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSlpZihoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpe1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07IiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgICAgICAgPSByZXF1aXJlKDc1KVxuICAsIGVudW1CdWdLZXlzID0gcmVxdWlyZSgzMCk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKXtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07IiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7IiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpXG4gICwgY29yZSAgICA9IHJlcXVpcmUoMjMpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoMzQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIGV4ZWMpe1xuICB2YXIgZm4gID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldXG4gICAgLCBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTsiLCJ2YXIgZ2V0S2V5cyAgID0gcmVxdWlyZSg3NilcbiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKDEwNylcbiAgLCBpc0VudW0gICAgPSByZXF1aXJlKDc3KS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpc0VudHJpZXMpe1xuICByZXR1cm4gZnVuY3Rpb24oaXQpe1xuICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QoaXQpXG4gICAgICAsIGtleXMgICA9IGdldEtleXMoTylcbiAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAgICwgaSAgICAgID0gMFxuICAgICAgLCByZXN1bHQgPSBbXVxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUobGVuZ3RoID4gaSlpZihpc0VudW0uY2FsbChPLCBrZXkgPSBrZXlzW2krK10pKXtcbiAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07IiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gICAgID0gcmVxdWlyZSg3MilcbiAgLCBnT1BTICAgICA9IHJlcXVpcmUoNzMpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKDcpXG4gICwgUmVmbGVjdCAgPSByZXF1aXJlKDM4KS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KXtcbiAgdmFyIGtleXMgICAgICAgPSBnT1BOLmYoYW5PYmplY3QoaXQpKVxuICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTsiLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKDM4KS5wYXJzZUZsb2F0XG4gICwgJHRyaW0gICAgICAgPSByZXF1aXJlKDEwMikudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgxMDMpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKXtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKVxuICAgICwgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0OyIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKDM4KS5wYXJzZUludFxuICAsICR0cmltICAgICA9IHJlcXVpcmUoMTAyKS50cmltXG4gICwgd3MgICAgICAgID0gcmVxdWlyZSgxMDMpXG4gICwgaGV4ICAgICAgID0gL15bXFwtK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCl7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDsiLCIndXNlIHN0cmljdCc7XG52YXIgcGF0aCAgICAgID0gcmVxdWlyZSg4NClcbiAgLCBpbnZva2UgICAgPSByZXF1aXJlKDQ0KVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoMyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKC8qIC4uLnBhcmdzICovKXtcbiAgdmFyIGZuICAgICA9IGFGdW5jdGlvbih0aGlzKVxuICAgICwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgcGFyZ3MgID0gQXJyYXkobGVuZ3RoKVxuICAgICwgaSAgICAgID0gMFxuICAgICwgXyAgICAgID0gcGF0aC5fXG4gICAgLCBob2xkZXIgPSBmYWxzZTtcbiAgd2hpbGUobGVuZ3RoID4gaSlpZigocGFyZ3NbaV0gPSBhcmd1bWVudHNbaSsrXSkgPT09IF8paG9sZGVyID0gdHJ1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBqID0gMCwgayA9IDAsIGFyZ3M7XG4gICAgaWYoIWhvbGRlciAmJiAhYUxlbilyZXR1cm4gaW52b2tlKGZuLCBwYXJncywgdGhhdCk7XG4gICAgYXJncyA9IHBhcmdzLnNsaWNlKCk7XG4gICAgaWYoaG9sZGVyKWZvcig7bGVuZ3RoID4gajsgaisrKWlmKGFyZ3Nbal0gPT09IF8pYXJnc1tqXSA9IGFyZ3VtZW50c1trKytdO1xuICAgIHdoaWxlKGFMZW4gPiBrKWFyZ3MucHVzaChhcmd1bWVudHNbaysrXSk7XG4gICAgcmV0dXJuIGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgzOCk7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihiaXRtYXAsIHZhbHVlKXtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlICAgIDogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZSAgICAgICA6IHZhbHVlXG4gIH07XG59OyIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoODcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0YXJnZXQsIHNyYywgc2FmZSl7XG4gIGZvcih2YXIga2V5IGluIHNyYylyZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTsiLCJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgzOClcbiAgLCBoaWRlICAgICAgPSByZXF1aXJlKDQwKVxuICAsIGhhcyAgICAgICA9IHJlcXVpcmUoMzkpXG4gICwgU1JDICAgICAgID0gcmVxdWlyZSgxMTQpKCdzcmMnKVxuICAsIFRPX1NUUklORyA9ICd0b1N0cmluZydcbiAgLCAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddXG4gICwgVFBMICAgICAgID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKDIzKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTywga2V5LCB2YWwsIHNhZmUpe1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYoaXNGdW5jdGlvbiloYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmKE9ba2V5XSA9PT0gdmFsKXJldHVybjtcbiAgaWYoaXNGdW5jdGlvbiloYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYoTyA9PT0gZ2xvYmFsKXtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaWYoIXNhZmUpe1xuICAgICAgZGVsZXRlIE9ba2V5XTtcbiAgICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZihPW2tleV0pT1trZXldID0gdmFsO1xuICAgICAgZWxzZSBoaWRlKE8sIGtleSwgdmFsKTtcbiAgICB9XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocmVnRXhwLCByZXBsYWNlKXtcbiAgdmFyIHJlcGxhY2VyID0gcmVwbGFjZSA9PT0gT2JqZWN0KHJlcGxhY2UpID8gZnVuY3Rpb24ocGFydCl7XG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XG4gIH0gOiByZXBsYWNlO1xuICByZXR1cm4gZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBTdHJpbmcoaXQpLnJlcGxhY2UocmVnRXhwLCByZXBsYWNlcik7XG4gIH07XG59OyIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSl7XG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTsiLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKDQ5KVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSg3KTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uKE8sIHByb3RvKXtcbiAgYW5PYmplY3QoTyk7XG4gIGlmKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24odGVzdCwgYnVnZ3ksIHNldCl7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKDI1KShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKDcwKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2goZSl7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKXtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZihidWdneSlPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCAgICAgID0gcmVxdWlyZSgzOClcbiAgLCBkUCAgICAgICAgICA9IHJlcXVpcmUoNjcpXG4gICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKDI4KVxuICAsIFNQRUNJRVMgICAgID0gcmVxdWlyZSgxMTcpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZKXtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSlkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07IiwidmFyIGRlZiA9IHJlcXVpcmUoNjcpLmZcbiAgLCBoYXMgPSByZXF1aXJlKDM5KVxuICAsIFRBRyA9IHJlcXVpcmUoMTE3KSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgdGFnLCBzdGF0KXtcbiAgaWYoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSlkZWYoaXQsIFRBRywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZ30pO1xufTsiLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSg5NCkoJ2tleXMnKVxuICAsIHVpZCAgICA9IHJlcXVpcmUoMTE0KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07IiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoMzgpXG4gICwgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXydcbiAgLCBzdG9yZSAgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTsiLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCAgPSByZXF1aXJlKDcpXG4gICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgzKVxuICAsIFNQRUNJRVMgICA9IHJlcXVpcmUoMTE3KSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihPLCBEKXtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvciwgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTsiLCJ2YXIgZmFpbHMgPSByZXF1aXJlKDM0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtZXRob2QsIGFyZyl7XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbigpe1xuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uKCl7fSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcbiAgfSk7XG59OyIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKDEwNilcbiAgLCBkZWZpbmVkICAgPSByZXF1aXJlKDI3KTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRPX1NUUklORyl7XG4gIHJldHVybiBmdW5jdGlvbih0aGF0LCBwb3Mpe1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpXG4gICAgICAsIGkgPSB0b0ludGVnZXIocG9zKVxuICAgICAgLCBsID0gcy5sZW5ndGhcbiAgICAgICwgYSwgYjtcbiAgICBpZihpIDwgMCB8fCBpID49IGwpcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07IiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoNTApXG4gICwgZGVmaW5lZCAgPSByZXF1aXJlKDI3KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpe1xuICBpZihpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKXRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoMzQpXG4gICwgZGVmaW5lZCA9IHJlcXVpcmUoMjcpXG4gICwgcXVvdCAgICA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTICA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpXG4gICAgLCBwMSA9ICc8JyArIHRhZztcbiAgaWYoYXR0cmlidXRlICE9PSAnJylwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUsIGV4ZWMpe1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpe1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59OyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKDEwOClcbiAgLCByZXBlYXQgICA9IHJlcXVpcmUoMTAxKVxuICAsIGRlZmluZWQgID0gcmVxdWlyZSgyNyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KXtcbiAgdmFyIFMgICAgICAgICAgICA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKVxuICAgICwgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGhcbiAgICAsIGZpbGxTdHIgICAgICA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKVxuICAgICwgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKXJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aFxuICAgICwgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZihzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbilzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoMTA2KVxuICAsIGRlZmluZWQgICA9IHJlcXVpcmUoMjcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCl7XG4gIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSlcbiAgICAsIHJlcyA9ICcnXG4gICAgLCBuICAgPSB0b0ludGVnZXIoY291bnQpO1xuICBpZihuIDwgMCB8fCBuID09IEluZmluaXR5KXRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpaWYobiAmIDEpcmVzICs9IHN0cjtcbiAgcmV0dXJuIHJlcztcbn07IiwidmFyICRleHBvcnQgPSByZXF1aXJlKDMyKVxuICAsIGRlZmluZWQgPSByZXF1aXJlKDI3KVxuICAsIGZhaWxzICAgPSByZXF1aXJlKDM0KVxuICAsIHNwYWNlcyAgPSByZXF1aXJlKDEwMylcbiAgLCBzcGFjZSAgID0gJ1snICsgc3BhY2VzICsgJ10nXG4gICwgbm9uICAgICA9ICdcXHUyMDBiXFx1MDA4NSdcbiAgLCBsdHJpbSAgID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpXG4gICwgcnRyaW0gICA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uKEtFWSwgZXhlYywgQUxJQVMpe1xuICB2YXIgZXhwICAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYoQUxJQVMpZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uKHN0cmluZywgVFlQRSl7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZihUWVBFICYgMSlzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZihUWVBFICYgMilzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjsiLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7IiwidmFyIGN0eCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoMjUpXG4gICwgaW52b2tlICAgICAgICAgICAgID0gcmVxdWlyZSg0NClcbiAgLCBodG1sICAgICAgICAgICAgICAgPSByZXF1aXJlKDQxKVxuICAsIGNlbCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoMjkpXG4gICwgZ2xvYmFsICAgICAgICAgICAgID0gcmVxdWlyZSgzOClcbiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2Vzc1xuICAsIHNldFRhc2sgICAgICAgICAgICA9IGdsb2JhbC5zZXRJbW1lZGlhdGVcbiAgLCBjbGVhclRhc2sgICAgICAgICAgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGVcbiAgLCBNZXNzYWdlQ2hhbm5lbCAgICAgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWxcbiAgLCBjb3VudGVyICAgICAgICAgICAgPSAwXG4gICwgcXVldWUgICAgICAgICAgICAgID0ge31cbiAgLCBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJ1xuICAsIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uKCl7XG4gIHZhciBpZCA9ICt0aGlzO1xuICBpZihxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpe1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCl7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spe1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKXtcbiAgICB2YXIgYXJncyA9IFtdLCBpID0gMTtcbiAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbigpe1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKXtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYocmVxdWlyZSgxOCkocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKXtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZihNZXNzYWdlQ2hhbm5lbCl7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbDtcbiAgICBwb3J0ICAgID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cyl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0Jykpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24oKXtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6ICAgc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTsiLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgxMDYpXG4gICwgbWF4ICAgICAgID0gTWF0aC5tYXhcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaW5kZXgsIGxlbmd0aCl7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59OyIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgID0gTWF0aC5jZWlsXG4gICwgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTsiLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSg0NSlcbiAgLCBkZWZpbmVkID0gcmVxdWlyZSgyNyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTsiLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKDEwNilcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTsiLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoMjcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTsiLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoNDkpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBTKXtcbiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZihTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgaWYoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTsiLCIndXNlIHN0cmljdCc7XG5pZihyZXF1aXJlKDI4KSl7XG4gIHZhciBMSUJSQVJZICAgICAgICAgICAgID0gcmVxdWlyZSg1OClcbiAgICAsIGdsb2JhbCAgICAgICAgICAgICAgPSByZXF1aXJlKDM4KVxuICAgICwgZmFpbHMgICAgICAgICAgICAgICA9IHJlcXVpcmUoMzQpXG4gICAgLCAkZXhwb3J0ICAgICAgICAgICAgID0gcmVxdWlyZSgzMilcbiAgICAsICR0eXBlZCAgICAgICAgICAgICAgPSByZXF1aXJlKDExMylcbiAgICAsICRidWZmZXIgICAgICAgICAgICAgPSByZXF1aXJlKDExMilcbiAgICAsIGN0eCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKDI1KVxuICAgICwgYW5JbnN0YW5jZSAgICAgICAgICA9IHJlcXVpcmUoNilcbiAgICAsIHByb3BlcnR5RGVzYyAgICAgICAgPSByZXF1aXJlKDg1KVxuICAgICwgaGlkZSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoNDApXG4gICAgLCByZWRlZmluZUFsbCAgICAgICAgID0gcmVxdWlyZSg4NilcbiAgICAsIHRvSW50ZWdlciAgICAgICAgICAgPSByZXF1aXJlKDEwNilcbiAgICAsIHRvTGVuZ3RoICAgICAgICAgICAgPSByZXF1aXJlKDEwOClcbiAgICAsIHRvSW5kZXggICAgICAgICAgICAgPSByZXF1aXJlKDEwNSlcbiAgICAsIHRvUHJpbWl0aXZlICAgICAgICAgPSByZXF1aXJlKDExMClcbiAgICAsIGhhcyAgICAgICAgICAgICAgICAgPSByZXF1aXJlKDM5KVxuICAgICwgc2FtZSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoODkpXG4gICAgLCBjbGFzc29mICAgICAgICAgICAgID0gcmVxdWlyZSgxNylcbiAgICAsIGlzT2JqZWN0ICAgICAgICAgICAgPSByZXF1aXJlKDQ5KVxuICAgICwgdG9PYmplY3QgICAgICAgICAgICA9IHJlcXVpcmUoMTA5KVxuICAgICwgaXNBcnJheUl0ZXIgICAgICAgICA9IHJlcXVpcmUoNDYpXG4gICAgLCBjcmVhdGUgICAgICAgICAgICAgID0gcmVxdWlyZSg2NilcbiAgICAsIGdldFByb3RvdHlwZU9mICAgICAgPSByZXF1aXJlKDc0KVxuICAgICwgZ09QTiAgICAgICAgICAgICAgICA9IHJlcXVpcmUoNzIpLmZcbiAgICAsIGdldEl0ZXJGbiAgICAgICAgICAgPSByZXF1aXJlKDExOClcbiAgICAsIHVpZCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKDExNClcbiAgICAsIHdrcyAgICAgICAgICAgICAgICAgPSByZXF1aXJlKDExNylcbiAgICAsIGNyZWF0ZUFycmF5TWV0aG9kICAgPSByZXF1aXJlKDEyKVxuICAgICwgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoMTEpXG4gICAgLCBzcGVjaWVzQ29uc3RydWN0b3IgID0gcmVxdWlyZSg5NSlcbiAgICAsIEFycmF5SXRlcmF0b3JzICAgICAgPSByZXF1aXJlKDEzMClcbiAgICAsIEl0ZXJhdG9ycyAgICAgICAgICAgPSByZXF1aXJlKDU2KVxuICAgICwgJGl0ZXJEZXRlY3QgICAgICAgICA9IHJlcXVpcmUoNTQpXG4gICAgLCBzZXRTcGVjaWVzICAgICAgICAgID0gcmVxdWlyZSg5MSlcbiAgICAsIGFycmF5RmlsbCAgICAgICAgICAgPSByZXF1aXJlKDkpXG4gICAgLCBhcnJheUNvcHlXaXRoaW4gICAgID0gcmVxdWlyZSg4KVxuICAgICwgJERQICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoNjcpXG4gICAgLCAkR09QRCAgICAgICAgICAgICAgID0gcmVxdWlyZSg3MClcbiAgICAsIGRQICAgICAgICAgICAgICAgICAgPSAkRFAuZlxuICAgICwgZ09QRCAgICAgICAgICAgICAgICA9ICRHT1BELmZcbiAgICAsIFJhbmdlRXJyb3IgICAgICAgICAgPSBnbG9iYWwuUmFuZ2VFcnJvclxuICAgICwgVHlwZUVycm9yICAgICAgICAgICA9IGdsb2JhbC5UeXBlRXJyb3JcbiAgICAsIFVpbnQ4QXJyYXkgICAgICAgICAgPSBnbG9iYWwuVWludDhBcnJheVxuICAgICwgQVJSQVlfQlVGRkVSICAgICAgICA9ICdBcnJheUJ1ZmZlcidcbiAgICAsIFNIQVJFRF9CVUZGRVIgICAgICAgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUlxuICAgICwgQllURVNfUEVSX0VMRU1FTlQgICA9ICdCWVRFU19QRVJfRUxFTUVOVCdcbiAgICAsIFBST1RPVFlQRSAgICAgICAgICAgPSAncHJvdG90eXBlJ1xuICAgICwgQXJyYXlQcm90byAgICAgICAgICA9IEFycmF5W1BST1RPVFlQRV1cbiAgICAsICRBcnJheUJ1ZmZlciAgICAgICAgPSAkYnVmZmVyLkFycmF5QnVmZmVyXG4gICAgLCAkRGF0YVZpZXcgICAgICAgICAgID0gJGJ1ZmZlci5EYXRhVmlld1xuICAgICwgYXJyYXlGb3JFYWNoICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDApXG4gICAgLCBhcnJheUZpbHRlciAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoMilcbiAgICAsIGFycmF5U29tZSAgICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCgzKVxuICAgICwgYXJyYXlFdmVyeSAgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpXG4gICAgLCBhcnJheUZpbmQgICAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNSlcbiAgICAsIGFycmF5RmluZEluZGV4ICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg2KVxuICAgICwgYXJyYXlJbmNsdWRlcyAgICAgICA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSlcbiAgICAsIGFycmF5SW5kZXhPZiAgICAgICAgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKVxuICAgICwgYXJyYXlWYWx1ZXMgICAgICAgICA9IEFycmF5SXRlcmF0b3JzLnZhbHVlc1xuICAgICwgYXJyYXlLZXlzICAgICAgICAgICA9IEFycmF5SXRlcmF0b3JzLmtleXNcbiAgICAsIGFycmF5RW50cmllcyAgICAgICAgPSBBcnJheUl0ZXJhdG9ycy5lbnRyaWVzXG4gICAgLCBhcnJheUxhc3RJbmRleE9mICAgID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZlxuICAgICwgYXJyYXlSZWR1Y2UgICAgICAgICA9IEFycmF5UHJvdG8ucmVkdWNlXG4gICAgLCBhcnJheVJlZHVjZVJpZ2h0ICAgID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodFxuICAgICwgYXJyYXlKb2luICAgICAgICAgICA9IEFycmF5UHJvdG8uam9pblxuICAgICwgYXJyYXlTb3J0ICAgICAgICAgICA9IEFycmF5UHJvdG8uc29ydFxuICAgICwgYXJyYXlTbGljZSAgICAgICAgICA9IEFycmF5UHJvdG8uc2xpY2VcbiAgICAsIGFycmF5VG9TdHJpbmcgICAgICAgPSBBcnJheVByb3RvLnRvU3RyaW5nXG4gICAgLCBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZ1xuICAgICwgSVRFUkFUT1IgICAgICAgICAgICA9IHdrcygnaXRlcmF0b3InKVxuICAgICwgVEFHICAgICAgICAgICAgICAgICA9IHdrcygndG9TdHJpbmdUYWcnKVxuICAgICwgVFlQRURfQ09OU1RSVUNUT1IgICA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKVxuICAgICwgREVGX0NPTlNUUlVDVE9SICAgICA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJylcbiAgICAsIEFMTF9DT05TVFJVQ1RPUlMgICAgPSAkdHlwZWQuQ09OU1RSXG4gICAgLCBUWVBFRF9BUlJBWSAgICAgICAgID0gJHR5cGVkLlRZUEVEXG4gICAgLCBWSUVXICAgICAgICAgICAgICAgID0gJHR5cGVkLlZJRVdcbiAgICAsIFdST05HX0xFTkdUSCAgICAgICAgPSAnV3JvbmcgbGVuZ3RoISc7XG5cbiAgdmFyICRtYXAgPSBjcmVhdGVBcnJheU1ldGhvZCgxLCBmdW5jdGlvbihPLCBsZW5ndGgpe1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbigpe1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgVWludDhBcnJheSgxKS5zZXQoe30pO1xuICB9KTtcblxuICB2YXIgc3RyaWN0VG9MZW5ndGggPSBmdW5jdGlvbihpdCwgU0FNRSl7XG4gICAgaWYoaXQgPT09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB2YXIgbnVtYmVyID0gK2l0XG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKGl0KTtcbiAgICBpZihTQU1FICYmICFzYW1lKG51bWJlciwgbGVuZ3RoKSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfTtcblxuICB2YXIgdG9PZmZzZXQgPSBmdW5jdGlvbihpdCwgQllURVMpe1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICUgQllURVMpdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24oaXQpe1xuICAgIGlmKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdClyZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbihDLCBsZW5ndGgpe1xuICAgIGlmKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpe1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciEnKTtcbiAgICB9IHJldHVybiBuZXcgQyhsZW5ndGgpO1xuICB9O1xuXG4gIHZhciBzcGVjaWVzRnJvbUxpc3QgPSBmdW5jdGlvbihPLCBsaXN0KXtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uKEMsIGxpc3Qpe1xuICAgIHZhciBpbmRleCAgPSAwXG4gICAgICAsIGxlbmd0aCA9IGxpc3QubGVuZ3RoXG4gICAgICAsIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUobGVuZ3RoID4gaW5kZXgpcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24oaXQsIGtleSwgaW50ZXJuYWwpe1xuICAgIGRQKGl0LCBrZXksIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLl9kW2ludGVybmFsXTsgfX0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qLCBtYXBmbiwgdGhpc0FyZyAqLyl7XG4gICAgdmFyIE8gICAgICAgPSB0b09iamVjdChzb3VyY2UpXG4gICAgICAsIGFMZW4gICAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIG1hcGZuICAgPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZFxuICAgICAgLCBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZFxuICAgICAgLCBpdGVyRm4gID0gZ2V0SXRlckZuKE8pXG4gICAgICAsIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyKGl0ZXJGbikpe1xuICAgICAgZm9yKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspe1xuICAgICAgICB2YWx1ZXMucHVzaChzdGVwLnZhbHVlKTtcbiAgICAgIH0gTyA9IHZhbHVlcztcbiAgICB9XG4gICAgaWYobWFwcGluZyAmJiBhTGVuID4gMiltYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IoaSA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKSwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTsgbGVuZ3RoID4gaTsgaSsrKXtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qLi4uaXRlbXMqLyl7XG4gICAgdmFyIGluZGV4ICA9IDBcbiAgICAgICwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlKGxlbmd0aCA+IGluZGV4KXJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uKCl7IGFycmF5VG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgVWludDhBcnJheSgxKSk7IH0pO1xuXG4gIHZhciAkdG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpe1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiwgZW5kICovKXtcbiAgICAgIHJldHVybiBhcnJheUNvcHlXaXRoaW4uY2FsbCh2YWxpZGF0ZSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyosIHN0YXJ0LCBlbmQgKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5RmlsdGVyKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLFxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpO1xuICAgIH0sXG4gICAgZmluZDogZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICBhcnJheUZvckVhY2godmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ICovKXtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8pe1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiAkbWFwKHZhbGlkYXRlKHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiwgaW5pdGlhbFZhbHVlICovKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyosIGluaXRpYWxWYWx1ZSAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpe1xuICAgICAgdmFyIHRoYXQgICA9IHRoaXNcbiAgICAgICAgLCBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGhcbiAgICAgICAgLCBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpXG4gICAgICAgICwgaW5kZXggID0gMFxuICAgICAgICAsIHZhbHVlO1xuICAgICAgd2hpbGUoaW5kZXggPCBtaWRkbGUpe1xuICAgICAgICB2YWx1ZSAgICAgICAgID0gdGhhdFtpbmRleF07XG4gICAgICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTtcbiAgICAgICAgdGhhdFtsZW5ndGhdICA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbil7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCl7XG4gICAgICB2YXIgTyAgICAgID0gdmFsaWRhdGUodGhpcylcbiAgICAgICAgLCBsZW5ndGggPSBPLmxlbmd0aFxuICAgICAgICAsICRiZWdpbiA9IHRvSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0luZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCl7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyosIG9mZnNldCAqLyl7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSlcbiAgICAgICwgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICAgICwgc3JjICAgID0gdG9PYmplY3QoYXJyYXlMaWtlKVxuICAgICAgLCBsZW4gICAgPSB0b0xlbmd0aChzcmMubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSAwO1xuICAgIGlmKGxlbiArIG9mZnNldCA+IGxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgd2hpbGUoaW5kZXggPCBsZW4pdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpe1xuICAgICAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKXtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpe1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24odGFyZ2V0LCBrZXkpe1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSl7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKXtcbiAgICBpZihpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKXtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSBlbHNlIHJldHVybiBkUCh0YXJnZXQsIGtleSwgZGVzYyk7XG4gIH07XG5cbiAgaWYoIUFMTF9DT05TVFJVQ1RPUlMpe1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiAgID0gJHNldERlc2M7XG4gIH1cblxuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFBTExfQ09OU1RSVUNUT1JTLCAnT2JqZWN0Jywge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldERlc2MsXG4gICAgZGVmaW5lUHJvcGVydHk6ICAgICAgICAgICAkc2V0RGVzY1xuICB9KTtcblxuICBpZihmYWlscyhmdW5jdGlvbigpeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSl7XG4gICAgYXJyYXlUb1N0cmluZyA9IGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICAgICAgICAgICRzbGljZSxcbiAgICBzZXQ6ICAgICAgICAgICAgJHNldCxcbiAgICBjb25zdHJ1Y3RvcjogICAgZnVuY3Rpb24oKXsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiAgICAgICBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIEJZVEVTLCB3cmFwcGVyLCBDTEFNUEVEKXtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FICAgICAgID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknXG4gICAgICAsIElTTlRfVUlOVDggPSBOQU1FICE9ICdVaW50OEFycmF5J1xuICAgICAgLCBHRVRURVIgICAgID0gJ2dldCcgKyBLRVlcbiAgICAgICwgU0VUVEVSICAgICA9ICdzZXQnICsgS0VZXG4gICAgICAsIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV1cbiAgICAgICwgQmFzZSAgICAgICA9IFR5cGVkQXJyYXkgfHwge31cbiAgICAgICwgVEFDICAgICAgICA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSlcbiAgICAgICwgRk9SQ0VEICAgICA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWXG4gICAgICAsIE8gICAgICAgICAgPSB7fVxuICAgICAgLCBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uKHRoYXQsIGluZGV4KXtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIHJldHVybiBkYXRhLnZbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbih0aGF0LCBpbmRleCwgdmFsdWUpe1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYoQ0xBTVBFRCl2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24odGhhdCwgaW5kZXgpe1xuICAgICAgZFAodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYoRk9SQ0VEKXtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpe1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggID0gMFxuICAgICAgICAgICwgb2Zmc2V0ID0gMFxuICAgICAgICAgICwgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGgsIGtsYXNzO1xuICAgICAgICBpZighaXNPYmplY3QoZGF0YSkpe1xuICAgICAgICAgIGxlbmd0aCAgICAgPSBzdHJpY3RUb0xlbmd0aChkYXRhLCB0cnVlKVxuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgICAgID0gbmV3ICRBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpe1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmKCRsZW5ndGggPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICBpZigkbGVuICUgQllURVMpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBvZmZzZXQ7XG4gICAgICAgICAgICBpZihieXRlTGVuZ3RoIDwgMCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYoYnl0ZUxlbmd0aCArIG9mZnNldCA+ICRsZW4pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZihUWVBFRF9BUlJBWSBpbiBkYXRhKXtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaGlkZSh0aGF0LCAnX2QnLCB7XG4gICAgICAgICAgYjogYnVmZmVyLFxuICAgICAgICAgIG86IG9mZnNldCxcbiAgICAgICAgICBsOiBieXRlTGVuZ3RoLFxuICAgICAgICAgIGU6IGxlbmd0aCxcbiAgICAgICAgICB2OiBuZXcgJERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlKGluZGV4IDwgbGVuZ3RoKWFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmKCEkaXRlckRldGVjdChmdW5jdGlvbihpdGVyKXtcbiAgICAgIC8vIFY4IHdvcmtzIHdpdGggaXRlcmF0b3JzLCBidXQgZmFpbHMgaW4gbWFueSBvdGhlciBjYXNlc1xuICAgICAgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQ1NTJcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoaXRlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSwgdHJ1ZSkpe1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCl7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSk7XG4gICAgICAgIHZhciBrbGFzcztcbiAgICAgICAgLy8gYHdzYCBtb2R1bGUgYnVnLCB0ZW1wb3JhcmlseSByZW1vdmUgdmFsaWRhdGlvbiBsZW5ndGggZm9yIFVpbnQ4QXJyYXlcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvcHVsbC82NDVcbiAgICAgICAgaWYoIWlzT2JqZWN0KGRhdGEpKXJldHVybiBuZXcgQmFzZShzdHJpY3RUb0xlbmd0aChkYXRhLCBJU05UX1VJTlQ4KSk7XG4gICAgICAgIGlmKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpe1xuICAgICAgICAgIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxuICAgICAgICAgICAgOiAkb2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IEJhc2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoVFlQRURfQVJSQVkgaW4gZGF0YSlyZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24oa2V5KXtcbiAgICAgICAgaWYoIShrZXkgaW4gVHlwZWRBcnJheSkpaGlkZShUeXBlZEFycmF5LCBrZXksIEJhc2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IFR5cGVkQXJyYXlQcm90b3R5cGU7XG4gICAgICBpZighTElCUkFSWSlUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciAgID0gVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICAgICwgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvciAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKVxuICAgICAgLCAkaXRlcmF0b3IgICAgICAgICA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKXtcbiAgICAgIGRQKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRBRywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFUyxcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSloaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwge3NldDogJHNldH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhQ09SUkVDVF9JVEVSX05BTUUsIE5BTUUsICRpdGVyYXRvcnMpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSwgTkFNRSwge3RvU3RyaW5nOiBhcnJheVRvU3RyaW5nfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7c2xpY2U6ICRzbGljZX0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgVHlwZWRBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKClcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pO1xuICAgIH0pKSwgTkFNRSwge3RvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmd9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmKCFMSUJSQVJZICYmICFDT1JSRUNUX0lURVJfTkFNRSloaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfTsiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKDM4KVxuICAsIERFU0NSSVBUT1JTICAgID0gcmVxdWlyZSgyOClcbiAgLCBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoNTgpXG4gICwgJHR5cGVkICAgICAgICAgPSByZXF1aXJlKDExMylcbiAgLCBoaWRlICAgICAgICAgICA9IHJlcXVpcmUoNDApXG4gICwgcmVkZWZpbmVBbGwgICAgPSByZXF1aXJlKDg2KVxuICAsIGZhaWxzICAgICAgICAgID0gcmVxdWlyZSgzNClcbiAgLCBhbkluc3RhbmNlICAgICA9IHJlcXVpcmUoNilcbiAgLCB0b0ludGVnZXIgICAgICA9IHJlcXVpcmUoMTA2KVxuICAsIHRvTGVuZ3RoICAgICAgID0gcmVxdWlyZSgxMDgpXG4gICwgZ09QTiAgICAgICAgICAgPSByZXF1aXJlKDcyKS5mXG4gICwgZFAgICAgICAgICAgICAgPSByZXF1aXJlKDY3KS5mXG4gICwgYXJyYXlGaWxsICAgICAgPSByZXF1aXJlKDkpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKDkyKVxuICAsIEFSUkFZX0JVRkZFUiAgID0gJ0FycmF5QnVmZmVyJ1xuICAsIERBVEFfVklFVyAgICAgID0gJ0RhdGFWaWV3J1xuICAsIFBST1RPVFlQRSAgICAgID0gJ3Byb3RvdHlwZSdcbiAgLCBXUk9OR19MRU5HVEggICA9ICdXcm9uZyBsZW5ndGghJ1xuICAsIFdST05HX0lOREVYICAgID0gJ1dyb25nIGluZGV4ISdcbiAgLCAkQXJyYXlCdWZmZXIgICA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdXG4gICwgJERhdGFWaWV3ICAgICAgPSBnbG9iYWxbREFUQV9WSUVXXVxuICAsIE1hdGggICAgICAgICAgID0gZ2xvYmFsLk1hdGhcbiAgLCBSYW5nZUVycm9yICAgICA9IGdsb2JhbC5SYW5nZUVycm9yXG4gICwgSW5maW5pdHkgICAgICAgPSBnbG9iYWwuSW5maW5pdHlcbiAgLCBCYXNlQnVmZmVyICAgICA9ICRBcnJheUJ1ZmZlclxuICAsIGFicyAgICAgICAgICAgID0gTWF0aC5hYnNcbiAgLCBwb3cgICAgICAgICAgICA9IE1hdGgucG93XG4gICwgZmxvb3IgICAgICAgICAgPSBNYXRoLmZsb29yXG4gICwgbG9nICAgICAgICAgICAgPSBNYXRoLmxvZ1xuICAsIExOMiAgICAgICAgICAgID0gTWF0aC5MTjJcbiAgLCBCVUZGRVIgICAgICAgICA9ICdidWZmZXInXG4gICwgQllURV9MRU5HVEggICAgPSAnYnl0ZUxlbmd0aCdcbiAgLCBCWVRFX09GRlNFVCAgICA9ICdieXRlT2Zmc2V0J1xuICAsICRCVUZGRVIgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSXG4gICwgJExFTkdUSCAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfbCcgOiBCWVRFX0xFTkdUSFxuICAsICRPRkZTRVQgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7XG5cbi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG52YXIgcGFja0lFRUU3NTQgPSBmdW5jdGlvbih2YWx1ZSwgbUxlbiwgbkJ5dGVzKXtcbiAgdmFyIGJ1ZmZlciA9IEFycmF5KG5CeXRlcylcbiAgICAsIGVMZW4gICA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICAgICwgZU1heCAgID0gKDEgPDwgZUxlbikgLSAxXG4gICAgLCBlQmlhcyAgPSBlTWF4ID4+IDFcbiAgICAsIHJ0ICAgICA9IG1MZW4gPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDBcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIHMgICAgICA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDBcbiAgICAsIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKVxuICBpZih2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpe1xuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZih2YWx1ZSAqIChjID0gcG93KDIsIC1lKSkgPCAxKXtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYoZSArIGVCaWFzID49IDEpe1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZih2YWx1ZSAqIGMgPj0gMil7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmKGUgKyBlQmlhcyA+PSBlTWF4KXtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmKGUgKyBlQmlhcyA+PSAxKXtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSAwO1xuICAgIH1cbiAgfVxuICBmb3IoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvcig7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufTtcbnZhciB1bnBhY2tJRUVFNzU0ID0gZnVuY3Rpb24oYnVmZmVyLCBtTGVuLCBuQnl0ZXMpe1xuICB2YXIgZUxlbiAgPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgICAsIGVNYXggID0gKDEgPDwgZUxlbikgLSAxXG4gICAgLCBlQmlhcyA9IGVNYXggPj4gMVxuICAgICwgbkJpdHMgPSBlTGVuIC0gN1xuICAgICwgaSAgICAgPSBuQnl0ZXMgLSAxXG4gICAgLCBzICAgICA9IGJ1ZmZlcltpLS1dXG4gICAgLCBlICAgICA9IHMgJiAxMjdcbiAgICAsIG07XG4gIHMgPj49IDc7XG4gIGZvcig7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgaWYoZSA9PT0gMCl7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmKGUgPT09IGVNYXgpe1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufTtcblxudmFyIHVucGFja0kzMiA9IGZ1bmN0aW9uKGJ5dGVzKXtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59O1xudmFyIHBhY2tJOCA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufTtcbnZhciBwYWNrSTE2ID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufTtcbnZhciBwYWNrSTMyID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn07XG52YXIgcGFja0Y2NCA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59O1xudmFyIHBhY2tGMzIgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufTtcblxudmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uKEMsIGtleSwgaW50ZXJuYWwpe1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9fSk7XG59O1xuXG52YXIgZ2V0ID0gZnVuY3Rpb24odmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbil7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleFxuICAgICwgaW50SW5kZXggPSB0b0ludGVnZXIobnVtSW5kZXgpO1xuICBpZihudW1JbmRleCAhPSBpbnRJbmRleCB8fCBpbnRJbmRleCA8IDAgfHwgaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2JcbiAgICAsIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdXG4gICAgLCBwYWNrICA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xufTtcbnZhciBzZXQgPSBmdW5jdGlvbih2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbil7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleFxuICAgICwgaW50SW5kZXggPSB0b0ludGVnZXIobnVtSW5kZXgpO1xuICBpZihudW1JbmRleCAhPSBpbnRJbmRleCB8fCBpbnRJbmRleCA8IDAgfHwgaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2JcbiAgICAsIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdXG4gICAgLCBwYWNrICA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspc3RvcmVbc3RhcnQgKyBpXSA9IHBhY2tbaXNMaXR0bGVFbmRpYW4gPyBpIDogYnl0ZXMgLSBpIC0gMV07XG59O1xuXG52YXIgdmFsaWRhdGVBcnJheUJ1ZmZlckFyZ3VtZW50cyA9IGZ1bmN0aW9uKHRoYXQsIGxlbmd0aCl7XG4gIGFuSW5zdGFuY2UodGhhdCwgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICB2YXIgbnVtYmVyTGVuZ3RoID0gK2xlbmd0aFxuICAgICwgYnl0ZUxlbmd0aCAgID0gdG9MZW5ndGgobnVtYmVyTGVuZ3RoKTtcbiAgaWYobnVtYmVyTGVuZ3RoICE9IGJ5dGVMZW5ndGgpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICByZXR1cm4gYnl0ZUxlbmd0aDtcbn07XG5cbmlmKCEkdHlwZWQuQUJWKXtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKXtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHZhbGlkYXRlQXJyYXlCdWZmZXJBcmd1bWVudHModGhpcywgbGVuZ3RoKTtcbiAgICB0aGlzLl9iICAgICAgID0gYXJyYXlGaWxsLmNhbGwoQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCl7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdXG4gICAgICAsIG9mZnNldCAgICAgICA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTtcbiAgICBpZihvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZihERVNDUklQVE9SUyl7XG4gICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJVRkZFUiwgJ19iJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfT0ZGU0VULCAnX28nKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KXtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCl7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG4gICAgfSxcbiAgICBnZXRJbnQzMjogZnVuY3Rpb24gZ2V0SW50MzIoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDIzLCA0KTtcbiAgICB9LFxuICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSl7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Y2NCwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGlmKCFmYWlscyhmdW5jdGlvbigpe1xuICAgIG5ldyAkQXJyYXlCdWZmZXI7ICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgJEFycmF5QnVmZmVyKC41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkpe1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCl7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodmFsaWRhdGVBcnJheUJ1ZmZlckFyZ3VtZW50cyh0aGlzLCBsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBCYXNlQnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyApe1xuICAgICAgaWYoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKWhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XG4gICAgfTtcbiAgICBpZighTElCUkFSWSlBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSlcbiAgICAsICRzZXRJbnQ4ID0gJERhdGFWaWV3W1BST1RPVFlQRV0uc2V0SW50ODtcbiAgdmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB2aWV3LnNldEludDgoMSwgMjE0NzQ4MzY0OSk7XG4gIGlmKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKXJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSl7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSl7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xuZXhwb3J0c1tEQVRBX1ZJRVddID0gJERhdGFWaWV3OyIsInZhciBnbG9iYWwgPSByZXF1aXJlKDM4KVxuICAsIGhpZGUgICA9IHJlcXVpcmUoNDApXG4gICwgdWlkICAgID0gcmVxdWlyZSgxMTQpXG4gICwgVFlQRUQgID0gdWlkKCd0eXBlZF9hcnJheScpXG4gICwgVklFVyAgID0gdWlkKCd2aWV3JylcbiAgLCBBQlYgICAgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KVxuICAsIENPTlNUUiA9IEFCVlxuICAsIGkgPSAwLCBsID0gOSwgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlKGkgPCBsKXtcbiAgaWYoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSl7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFCVjogICAgQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6ICBUWVBFRCxcbiAgVklFVzogICBWSUVXXG59OyIsInZhciBpZCA9IDBcbiAgLCBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59OyIsInZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoMzgpXG4gICwgY29yZSAgICAgICAgICAgPSByZXF1aXJlKDIzKVxuICAsIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSg1OClcbiAgLCB3a3NFeHQgICAgICAgICA9IHJlcXVpcmUoMTE2KVxuICAsIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSg2NykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwge3ZhbHVlOiB3a3NFeHQuZihuYW1lKX0pO1xufTsiLCJleHBvcnRzLmYgPSByZXF1aXJlKDExNyk7IiwidmFyIHN0b3JlICAgICAgPSByZXF1aXJlKDk0KSgnd2tzJylcbiAgLCB1aWQgICAgICAgID0gcmVxdWlyZSgxMTQpXG4gICwgU3ltYm9sICAgICA9IHJlcXVpcmUoMzgpLlN5bWJvbFxuICAsIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlOyIsInZhciBjbGFzc29mICAgPSByZXF1aXJlKDE3KVxuICAsIElURVJBVE9SICA9IHJlcXVpcmUoMTE3KSgnaXRlcmF0b3InKVxuICAsIEl0ZXJhdG9ycyA9IHJlcXVpcmUoNTYpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKDIzKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoaXQgIT0gdW5kZWZpbmVkKXJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmV4RXhwLmVzY2FwZVxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKVxuICAsICRyZSAgICAgPSByZXF1aXJlKDg4KSgvW1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWdFeHAnLCB7ZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoaXQpeyByZXR1cm4gJHJlKGl0KTsgfX0pO1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge2NvcHlXaXRoaW46IHJlcXVpcmUoOCl9KTtcblxucmVxdWlyZSg1KSgnY29weVdpdGhpbicpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgzMilcbiAgLCAkZXZlcnkgID0gcmVxdWlyZSgxMikoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoOTYpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pOyIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtmaWxsOiByZXF1aXJlKDkpfSk7XG5cbnJlcXVpcmUoNSkoJ2ZpbGwnKTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpXG4gICwgJGZpbHRlciA9IHJlcXVpcmUoMTIpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKDk2KShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKVxuICAsICRmaW5kICAgPSByZXF1aXJlKDEyKSg2KVxuICAsIEtFWSAgICAgPSAnZmluZEluZGV4J1xuICAsIGZvcmNlZCAgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmKEtFWSBpbiBbXSlBcnJheSgxKVtLRVldKGZ1bmN0aW9uKCl7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4vKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKDUpKEtFWSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKVxuICAsICRmaW5kICAgPSByZXF1aXJlKDEyKSg1KVxuICAsIEtFWSAgICAgPSAnZmluZCdcbiAgLCBmb3JjZWQgID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZihLRVkgaW4gW10pQXJyYXkoMSlbS0VZXShmdW5jdGlvbigpeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4vKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKDUpKEtFWSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgID0gcmVxdWlyZSgzMilcbiAgLCAkZm9yRWFjaCA9IHJlcXVpcmUoMTIpKDApXG4gICwgU1RSSUNUICAgPSByZXF1aXJlKDk2KShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCAgICAgICAgICAgID0gcmVxdWlyZSgyNSlcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoMzIpXG4gICwgdG9PYmplY3QgICAgICAgPSByZXF1aXJlKDEwOSlcbiAgLCBjYWxsICAgICAgICAgICA9IHJlcXVpcmUoNTEpXG4gICwgaXNBcnJheUl0ZXIgICAgPSByZXF1aXJlKDQ2KVxuICAsIHRvTGVuZ3RoICAgICAgID0gcmVxdWlyZSgxMDgpXG4gICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKDI0KVxuICAsIGdldEl0ZXJGbiAgICAgID0gcmVxdWlyZSgxMTgpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKDU0KShmdW5jdGlvbihpdGVyKXsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZS8qLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCovKXtcbiAgICB2YXIgTyAgICAgICA9IHRvT2JqZWN0KGFycmF5TGlrZSlcbiAgICAgICwgQyAgICAgICA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXlcbiAgICAgICwgYUxlbiAgICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbWFwZm4gICA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgICAsIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAsIGluZGV4ICAgPSAwXG4gICAgICAsIGl0ZXJGbiAgPSBnZXRJdGVyRm4oTylcbiAgICAgICwgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmKG1hcHBpbmcpbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZihpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSl7XG4gICAgICBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEM7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKyl7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKXtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgzMilcbiAgLCAkaW5kZXhPZiAgICAgID0gcmVxdWlyZSgxMSkoZmFsc2UpXG4gICwgJG5hdGl2ZSAgICAgICA9IFtdLmluZGV4T2ZcbiAgLCBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKDk2KSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggPSAwICovKXtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTsiLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHtpc0FycmF5OiByZXF1aXJlKDQ3KX0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSg1KVxuICAsIHN0ZXAgICAgICAgICAgICAgPSByZXF1aXJlKDU1KVxuICAsIEl0ZXJhdG9ycyAgICAgICAgPSByZXF1aXJlKDU2KVxuICAsIHRvSU9iamVjdCAgICAgICAgPSByZXF1aXJlKDEwNyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSg1MykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbigpe1xuICB2YXIgTyAgICAgPSB0aGlzLl90XG4gICAgLCBraW5kICA9IHRoaXMuX2tcbiAgICAsIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZighTyB8fCBpbmRleCA+PSBPLmxlbmd0aCl7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZihraW5kID09ICdrZXlzJyAgKXJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5qb2luKHNlcGFyYXRvcilcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKDMyKVxuICAsIHRvSU9iamVjdCA9IHJlcXVpcmUoMTA3KVxuICAsIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChyZXF1aXJlKDQ1KSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoOTYpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKXtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgzMilcbiAgLCB0b0lPYmplY3QgICAgID0gcmVxdWlyZSgxMDcpXG4gICwgdG9JbnRlZ2VyICAgICA9IHJlcXVpcmUoMTA2KVxuICAsIHRvTGVuZ3RoICAgICAgPSByZXF1aXJlKDEwOClcbiAgLCAkbmF0aXZlICAgICAgID0gW10ubGFzdEluZGV4T2ZcbiAgLCBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSg5NikoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ID0gQFsqLTFdICovKXtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYoTkVHQVRJVkVfWkVSTylyZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCh0aGlzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gbGVuZ3RoIC0gMTtcbiAgICBpZihhcmd1bWVudHMubGVuZ3RoID4gMSlpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYoaW5kZXggPCAwKWluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yKDtpbmRleCA+PSAwOyBpbmRleC0tKWlmKGluZGV4IGluIE8paWYoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpXG4gICwgJG1hcCAgICA9IHJlcXVpcmUoMTIpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKDk2KShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKDMyKVxuICAsIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgyNCk7XG5cbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoMzQpKGZ1bmN0aW9uKCl7XG4gIGZ1bmN0aW9uIEYoKXt9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHZhciBpbmRleCAgPSAwXG4gICAgICAsIGFMZW4gICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZShhTGVuID4gaW5kZXgpY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpXG4gICwgJHJlZHVjZSA9IHJlcXVpcmUoMTMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKDk2KShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKXtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpXG4gICwgJHJlZHVjZSA9IHJlcXVpcmUoMTMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKDk2KShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLyl7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgID0gcmVxdWlyZSgzMilcbiAgLCBodG1sICAgICAgID0gcmVxdWlyZSg0MSlcbiAgLCBjb2YgICAgICAgID0gcmVxdWlyZSgxOClcbiAgLCB0b0luZGV4ICAgID0gcmVxdWlyZSgxMDUpXG4gICwgdG9MZW5ndGggICA9IHJlcXVpcmUoMTA4KVxuICAsIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKDM0KShmdW5jdGlvbigpe1xuICBpZihodG1sKWFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKXtcbiAgICB2YXIgbGVuICAgPSB0b0xlbmd0aCh0aGlzLmxlbmd0aClcbiAgICAgICwga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYoa2xhc3MgPT0gJ0FycmF5JylyZXR1cm4gYXJyYXlTbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpO1xuICAgIHZhciBzdGFydCAgPSB0b0luZGV4KGJlZ2luLCBsZW4pXG4gICAgICAsIHVwVG8gICA9IHRvSW5kZXgoZW5kLCBsZW4pXG4gICAgICAsIHNpemUgICA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydClcbiAgICAgICwgY2xvbmVkID0gQXJyYXkoc2l6ZSlcbiAgICAgICwgaSAgICAgID0gMDtcbiAgICBmb3IoOyBpIDwgc2l6ZTsgaSsrKWNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgzMilcbiAgLCAkc29tZSAgID0gcmVxdWlyZSgxMikoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoOTYpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICA9IHJlcXVpcmUoMzIpXG4gICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgzKVxuICAsIHRvT2JqZWN0ICA9IHJlcXVpcmUoMTA5KVxuICAsIGZhaWxzICAgICA9IHJlcXVpcmUoMzQpXG4gICwgJHNvcnQgICAgID0gW10uc29ydFxuICAsIHRlc3QgICAgICA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24oKXtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbigpe1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSg5NikoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbil7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7IiwicmVxdWlyZSg5MSkoJ0FycmF5Jyk7IiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7bm93OiBmdW5jdGlvbigpeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH19KTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKVxuICAsIGZhaWxzICAgPSByZXF1aXJlKDM0KVxuICAsIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xuXG52YXIgbHogPSBmdW5jdGlvbihudW0pe1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIG5ldyBEYXRlKC01ZTEzIC0gMSkudG9JU09TdHJpbmcoKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbigpe1xuICBuZXcgRGF0ZShOYU4pLnRvSVNPU3RyaW5nKCk7XG59KSksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogZnVuY3Rpb24gdG9JU09TdHJpbmcoKXtcbiAgICBpZighaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSl0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgICB2YXIgZCA9IHRoaXNcbiAgICAgICwgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKVxuICAgICAgLCBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKVxuICAgICAgLCBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICAgIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoMzIpXG4gICwgdG9PYmplY3QgICAgPSByZXF1aXJlKDEwOSlcbiAgLCB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoMTEwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKDM0KShmdW5jdGlvbigpe1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbCB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7dG9JU09TdHJpbmc6IGZ1bmN0aW9uKCl7IHJldHVybiAxOyB9fSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSl7XG4gICAgdmFyIE8gID0gdG9PYmplY3QodGhpcylcbiAgICAgICwgcHYgPSB0b1ByaW1pdGl2ZShPKTtcbiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpO1xuICB9XG59KTsiLCJ2YXIgVE9fUFJJTUlUSVZFID0gcmVxdWlyZSgxMTcpKCd0b1ByaW1pdGl2ZScpXG4gICwgcHJvdG8gICAgICAgID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSlyZXF1aXJlKDQwKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKDI2KSk7IiwidmFyIERhdGVQcm90byAgICA9IERhdGUucHJvdG90eXBlXG4gICwgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSdcbiAgLCBUT19TVFJJTkcgICAgPSAndG9TdHJpbmcnXG4gICwgJHRvU3RyaW5nICAgID0gRGF0ZVByb3RvW1RPX1NUUklOR11cbiAgLCBnZXRUaW1lICAgICAgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpe1xuICByZXF1aXJlKDg3KShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn0iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywge2JpbmQ6IHJlcXVpcmUoMTYpfSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ICAgICAgID0gcmVxdWlyZSg0OSlcbiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoNzQpXG4gICwgSEFTX0lOU1RBTkNFICAgPSByZXF1aXJlKDExNykoJ2hhc0luc3RhbmNlJylcbiAgLCBGdW5jdGlvblByb3RvICA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpcmVxdWlyZSg2NykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHt2YWx1ZTogZnVuY3Rpb24oTyl7XG4gIGlmKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKXJldHVybiBmYWxzZTtcbiAgaWYoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSlyZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlKE8gPSBnZXRQcm90b3R5cGVPZihPKSlpZih0aGlzLnByb3RvdHlwZSA9PT0gTylyZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufX0pOyIsInZhciBkUCAgICAgICAgID0gcmVxdWlyZSg2NykuZlxuICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKDg1KVxuICAsIGhhcyAgICAgICAgPSByZXF1aXJlKDM5KVxuICAsIEZQcm90byAgICAgPSBGdW5jdGlvbi5wcm90b3R5cGVcbiAgLCBuYW1lUkUgICAgID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvXG4gICwgTkFNRSAgICAgICA9ICduYW1lJztcblxudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKDI4KSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgdHJ5IHtcbiAgICAgIHZhciB0aGF0ID0gdGhpc1xuICAgICAgICAsIG5hbWUgPSAoJycgKyB0aGF0KS5tYXRjaChuYW1lUkUpWzFdO1xuICAgICAgaGFzKHRoYXQsIE5BTUUpIHx8ICFpc0V4dGVuc2libGUodGhhdCkgfHwgZFAodGhhdCwgTkFNRSwgY3JlYXRlRGVzYyg1LCBuYW1lKSk7XG4gICAgICByZXR1cm4gbmFtZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoMTkpO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoMjIpKCdNYXAnLCBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpe1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTsiLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpXG4gICwgbG9nMXAgICA9IHJlcXVpcmUoNjApXG4gICwgc3FydCAgICA9IE1hdGguc3FydFxuICAsICRhY29zaCAgPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTiBcbiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eVxuKSwgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KXtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKVxuICAsICRhc2luaCAgPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KXtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTAgXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7YXNpbmg6IGFzaW5ofSk7IiwiLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKVxuICAsICRhdGFuaCAgPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDAgXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCl7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpXG4gICwgc2lnbiAgICA9IHJlcXVpcmUoNjEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCl7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIE1hdGgucG93KE1hdGguYWJzKHgpLCAxIC8gMyk7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KXtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gTWF0aC5mbG9vcihNYXRoLmxvZyh4ICsgMC41KSAqIE1hdGguTE9HMkUpIDogMzI7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgzMilcbiAgLCBleHAgICAgID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KXtcbiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKVxuICAsICRleHBtMSAgPSByZXF1aXJlKDU5KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHtleHBtMTogJGV4cG0xfSk7IiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgzMilcbiAgLCBzaWduICAgICAgPSByZXF1aXJlKDYxKVxuICAsIHBvdyAgICAgICA9IE1hdGgucG93XG4gICwgRVBTSUxPTiAgID0gcG93KDIsIC01MilcbiAgLCBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKVxuICAsIE1BWDMyICAgICA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpXG4gICwgTUlOMzIgICAgID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24obil7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBmcm91bmQ6IGZ1bmN0aW9uIGZyb3VuZCh4KXtcbiAgICB2YXIgJGFicyAgPSBNYXRoLmFicyh4KVxuICAgICAgLCAkc2lnbiA9IHNpZ24oeClcbiAgICAgICwgYSwgcmVzdWx0O1xuICAgIGlmKCRhYnMgPCBNSU4zMilyZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICAgIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgICBpZihyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KXJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICAgIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpXG4gICwgYWJzICAgICA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMil7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtICA9IDBcbiAgICAgICwgaSAgICA9IDBcbiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbGFyZyA9IDBcbiAgICAgICwgYXJnLCBkaXY7XG4gICAgd2hpbGUoaSA8IGFMZW4pe1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmKGxhcmcgPCBhcmcpe1xuICAgICAgICBkaXYgID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtICA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYoYXJnID4gMCl7XG4gICAgICAgIGRpdiAgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpXG4gICwgJGltdWwgICA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgzNCkoZnVuY3Rpb24oKXtcbiAgcmV0dXJuICRpbXVsKDB4ZmZmZmZmZmYsIDUpICE9IC01IHx8ICRpbXVsLmxlbmd0aCAhPSAyO1xufSksICdNYXRoJywge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpe1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmZcbiAgICAgICwgeG4gPSAreFxuICAgICAgLCB5biA9ICt5XG4gICAgICAsIHhsID0gVUlOVDE2ICYgeG5cbiAgICAgICwgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCl7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjEwO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge2xvZzFwOiByZXF1aXJlKDYwKX0pOyIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgzMik7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KXtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge3NpZ246IHJlcXVpcmUoNjEpfSk7IiwiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKVxuICAsIGV4cG0xICAgPSByZXF1aXJlKDU5KVxuICAsIGV4cCAgICAgPSBNYXRoLmV4cDtcblxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoMzQpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpe1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKVxuICAsIGV4cG0xICAgPSByZXF1aXJlKDU5KVxuICAsIGV4cCAgICAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpe1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KVxuICAgICAgLCBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCl7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICAgICAgICA9IHJlcXVpcmUoMzgpXG4gICwgaGFzICAgICAgICAgICAgICAgPSByZXF1aXJlKDM5KVxuICAsIGNvZiAgICAgICAgICAgICAgID0gcmVxdWlyZSgxOClcbiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoNDMpXG4gICwgdG9QcmltaXRpdmUgICAgICAgPSByZXF1aXJlKDExMClcbiAgLCBmYWlscyAgICAgICAgICAgICA9IHJlcXVpcmUoMzQpXG4gICwgZ09QTiAgICAgICAgICAgICAgPSByZXF1aXJlKDcyKS5mXG4gICwgZ09QRCAgICAgICAgICAgICAgPSByZXF1aXJlKDcwKS5mXG4gICwgZFAgICAgICAgICAgICAgICAgPSByZXF1aXJlKDY3KS5mXG4gICwgJHRyaW0gICAgICAgICAgICAgPSByZXF1aXJlKDEwMikudHJpbVxuICAsIE5VTUJFUiAgICAgICAgICAgID0gJ051bWJlcidcbiAgLCAkTnVtYmVyICAgICAgICAgICA9IGdsb2JhbFtOVU1CRVJdXG4gICwgQmFzZSAgICAgICAgICAgICAgPSAkTnVtYmVyXG4gICwgcHJvdG8gICAgICAgICAgICAgPSAkTnVtYmVyLnByb3RvdHlwZVxuICAvLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmdcbiAgLCBCUk9LRU5fQ09GICAgICAgICA9IGNvZihyZXF1aXJlKDY2KShwcm90bykpID09IE5VTUJFUlxuICAsIFRSSU0gICAgICAgICAgICAgID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24oYXJndW1lbnQpe1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZih0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMil7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMClcbiAgICAgICwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpe1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZihmaXJzdCA9PT0gNDgpe1xuICAgICAgc3dpdGNoKGl0LmNoYXJDb2RlQXQoMSkpe1xuICAgICAgICBjYXNlIDY2IDogY2FzZSA5OCAgOiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzkgOiBjYXNlIDExMSA6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQgOiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKXtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKXJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSl7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpe1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlXG4gICAgICAsIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uKCl7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IodmFyIGtleXMgPSByZXF1aXJlKDI4KSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKXtcbiAgICBpZihoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKXtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKDg3KShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59IiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgzMik7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge0VQU0lMT046IE1hdGgucG93KDIsIC01Mil9KTsiLCIvLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKVxudmFyICRleHBvcnQgICA9IHJlcXVpcmUoMzIpXG4gICwgX2lzRmluaXRlID0gcmVxdWlyZSgzOCkuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpe1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTtcbiAgfVxufSk7IiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtpc0ludGVnZXI6IHJlcXVpcmUoNDgpfSk7IiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgzMik7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKXtcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7IiwiLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgICA9IHJlcXVpcmUoMzIpXG4gICwgaXNJbnRlZ2VyID0gcmVxdWlyZSg0OClcbiAgLCBhYnMgICAgICAgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKXtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7IiwiLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgzMik7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge01BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmZ9KTsiLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgzMik7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge01JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmfSk7IiwidmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgzMilcbiAgLCAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoODEpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHtwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdH0pOyIsInZhciAkZXhwb3J0ICAgPSByZXF1aXJlKDMyKVxuICAsICRwYXJzZUludCA9IHJlcXVpcmUoODIpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7cGFyc2VJbnQ6ICRwYXJzZUludH0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgPSByZXF1aXJlKDMyKVxuICAsIHRvSW50ZWdlciAgICA9IHJlcXVpcmUoMTA2KVxuICAsIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoNClcbiAgLCByZXBlYXQgICAgICAgPSByZXF1aXJlKDEwMSlcbiAgLCAkdG9GaXhlZCAgICAgPSAxLi50b0ZpeGVkXG4gICwgZmxvb3IgICAgICAgID0gTWF0aC5mbG9vclxuICAsIGRhdGEgICAgICAgICA9IFswLCAwLCAwLCAwLCAwLCAwXVxuICAsIEVSUk9SICAgICAgICA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJ1xuICAsIFpFUk8gICAgICAgICA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24obiwgYyl7XG4gIHZhciBpICA9IC0xXG4gICAgLCBjMiA9IGM7XG4gIHdoaWxlKCsraSA8IDYpe1xuICAgIGMyICs9IG4gKiBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBjMiAlIDFlNztcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcbiAgfVxufTtcbnZhciBkaXZpZGUgPSBmdW5jdGlvbihuKXtcbiAgdmFyIGkgPSA2XG4gICAgLCBjID0gMDtcbiAgd2hpbGUoLS1pID49IDApe1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24oKXtcbiAgdmFyIGkgPSA2XG4gICAgLCBzID0gJyc7XG4gIHdoaWxlKC0taSA+PSAwKXtcbiAgICBpZihzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApe1xuICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpXSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG52YXIgcG93ID0gZnVuY3Rpb24oeCwgbiwgYWNjKXtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbih4KXtcbiAgdmFyIG4gID0gMFxuICAgICwgeDIgPSB4O1xuICB3aGlsZSh4MiA+PSA0MDk2KXtcbiAgICBuICs9IDEyO1xuICAgIHgyIC89IDQwOTY7XG4gIH1cbiAgd2hpbGUoeDIgPj0gMil7XG4gICAgbiAgKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4Li50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIXJlcXVpcmUoMzQpKGZ1bmN0aW9uKCl7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKXtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUilcbiAgICAgICwgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cylcbiAgICAgICwgcyA9ICcnXG4gICAgICAsIG0gPSBaRVJPXG4gICAgICAsIGUsIHosIGosIGs7XG4gICAgaWYoZiA8IDAgfHwgZiA+IDIwKXRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIGlmKHggIT0geClyZXR1cm4gJ05hTic7XG4gICAgaWYoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZih4IDwgMCl7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZih4ID4gMWUtMjEpe1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZihlID4gMCl7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUoaiA+PSA3KXtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZShqID49IDIzKXtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmKGYgPiAwKXtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgID0gcmVxdWlyZSgzMilcbiAgLCAkZmFpbHMgICAgICAgPSByZXF1aXJlKDM0KVxuICAsIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoNClcbiAgLCAkdG9QcmVjaXNpb24gPSAxLi50b1ByZWNpc2lvbjtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24oKXtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKXtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7IFxuICB9XG59KTsiLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7YXNzaWduOiByZXF1aXJlKDY1KX0pOyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgzMilcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7Y3JlYXRlOiByZXF1aXJlKDY2KX0pOyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgzMik7XG4vLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKDI4KSwgJ09iamVjdCcsIHtkZWZpbmVQcm9wZXJ0aWVzOiByZXF1aXJlKDY4KX0pOyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgzMik7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgyOCksICdPYmplY3QnLCB7ZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoNjcpLmZ9KTsiLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKDQ5KVxuICAsIG1ldGEgICAgID0gcmVxdWlyZSg2Mikub25GcmVlemU7XG5cbnJlcXVpcmUoNzgpKCdmcmVlemUnLCBmdW5jdGlvbigkZnJlZXplKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCl7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgxMDcpXG4gICwgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoNzApLmY7XG5cbnJlcXVpcmUoNzgpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSg3OCkoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gcmVxdWlyZSg3MSkuZjtcbn0pOyIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoMTA5KVxuICAsICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoNzQpO1xuXG5yZXF1aXJlKDc4KSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpe1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKDQ5KTtcblxucmVxdWlyZSg3OCkoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uKCRpc0V4dGVuc2libGUpe1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSg0OSk7XG5cbnJlcXVpcmUoNzgpKCdpc0Zyb3plbicsIGZ1bmN0aW9uKCRpc0Zyb3plbil7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKDQ5KTtcblxucmVxdWlyZSg3OCkoJ2lzU2VhbGVkJywgZnVuY3Rpb24oJGlzU2VhbGVkKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7aXM6IHJlcXVpcmUoODkpfSk7IiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKDEwOSlcbiAgLCAka2V5cyAgICA9IHJlcXVpcmUoNzYpO1xuXG5yZXF1aXJlKDc4KSgna2V5cycsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KXtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoNDkpXG4gICwgbWV0YSAgICAgPSByZXF1aXJlKDYyKS5vbkZyZWV6ZTtcblxucmVxdWlyZSg3OCkoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24oJHByZXZlbnRFeHRlbnNpb25zKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KXtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSg0OSlcbiAgLCBtZXRhICAgICA9IHJlcXVpcmUoNjIpLm9uRnJlZXplO1xuXG5yZXF1aXJlKDc4KSgnc2VhbCcsIGZ1bmN0aW9uKCRzZWFsKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpe1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7c2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoOTApLnNldH0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKDE3KVxuICAsIHRlc3QgICAgPSB7fTtcbnRlc3RbcmVxdWlyZSgxMTcpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpe1xuICByZXF1aXJlKDg3KShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59IiwidmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgzMilcbiAgLCAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoODEpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHtwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdH0pOyIsInZhciAkZXhwb3J0ICAgPSByZXF1aXJlKDMyKVxuICAsICRwYXJzZUludCA9IHJlcXVpcmUoODIpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7cGFyc2VJbnQ6ICRwYXJzZUludH0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZICAgICAgICAgICAgPSByZXF1aXJlKDU4KVxuICAsIGdsb2JhbCAgICAgICAgICAgICA9IHJlcXVpcmUoMzgpXG4gICwgY3R4ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgyNSlcbiAgLCBjbGFzc29mICAgICAgICAgICAgPSByZXF1aXJlKDE3KVxuICAsICRleHBvcnQgICAgICAgICAgICA9IHJlcXVpcmUoMzIpXG4gICwgaXNPYmplY3QgICAgICAgICAgID0gcmVxdWlyZSg0OSlcbiAgLCBhRnVuY3Rpb24gICAgICAgICAgPSByZXF1aXJlKDMpXG4gICwgYW5JbnN0YW5jZSAgICAgICAgID0gcmVxdWlyZSg2KVxuICAsIGZvck9mICAgICAgICAgICAgICA9IHJlcXVpcmUoMzcpXG4gICwgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSg5NSlcbiAgLCB0YXNrICAgICAgICAgICAgICAgPSByZXF1aXJlKDEwNCkuc2V0XG4gICwgbWljcm90YXNrICAgICAgICAgID0gcmVxdWlyZSg2NCkoKVxuICAsIFBST01JU0UgICAgICAgICAgICA9ICdQcm9taXNlJ1xuICAsIFR5cGVFcnJvciAgICAgICAgICA9IGdsb2JhbC5UeXBlRXJyb3JcbiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2Vzc1xuICAsICRQcm9taXNlICAgICAgICAgICA9IGdsb2JhbFtQUk9NSVNFXVxuICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgaXNOb2RlICAgICAgICAgICAgID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2VzcydcbiAgLCBlbXB0eSAgICAgICAgICAgICAgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9XG4gICwgSW50ZXJuYWwsIEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uKCl7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgICAgID0gJFByb21pc2UucmVzb2x2ZSgxKVxuICAgICAgLCBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoMTE3KSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uKGV4ZWMpeyBleGVjKGVtcHR5LCBlbXB0eSk7IH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJykgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBzYW1lQ29uc3RydWN0b3IgPSBmdW5jdGlvbihhLCBiKXtcbiAgLy8gd2l0aCBsaWJyYXJ5IHdyYXBwZXIgc3BlY2lhbCBjYXNlXG4gIHJldHVybiBhID09PSBiIHx8IGEgPT09ICRQcm9taXNlICYmIGIgPT09IFdyYXBwZXI7XG59O1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbihpdCl7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24oQyl7XG4gIHJldHVybiBzYW1lQ29uc3RydWN0b3IoJFByb21pc2UsIEMpXG4gICAgPyBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICA6IG5ldyBHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xudmFyIFByb21pc2VDYXBhYmlsaXR5ID0gR2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24oQyl7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uKCQkcmVzb2x2ZSwgJCRyZWplY3Qpe1xuICAgIGlmKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ICA9IGFGdW5jdGlvbihyZWplY3QpO1xufTtcbnZhciBwZXJmb3JtID0gZnVuY3Rpb24oZXhlYyl7XG4gIHRyeSB7XG4gICAgZXhlYygpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB7ZXJyb3I6IGV9O1xuICB9XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uKHByb21pc2UsIGlzUmVqZWN0KXtcbiAgaWYocHJvbWlzZS5fbilyZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24oKXtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92XG4gICAgICAsIG9rICAgID0gcHJvbWlzZS5fcyA9PSAxXG4gICAgICAsIGkgICAgID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24ocmVhY3Rpb24pe1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbFxuICAgICAgICAsIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlXG4gICAgICAgICwgcmVqZWN0ICA9IHJlYWN0aW9uLnJlamVjdFxuICAgICAgICAsIGRvbWFpbiAgPSByZWFjdGlvbi5kb21haW5cbiAgICAgICAgLCByZXN1bHQsIHRoZW47XG4gICAgICB0cnkge1xuICAgICAgICBpZihoYW5kbGVyKXtcbiAgICAgICAgICBpZighb2spe1xuICAgICAgICAgICAgaWYocHJvbWlzZS5faCA9PSAyKW9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGhhbmRsZXIgPT09IHRydWUpcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZihkb21haW4pZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTtcbiAgICAgICAgICAgIGlmKGRvbWFpbilkb21haW4uZXhpdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZihyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2Upe1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSl7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUoY2hhaW4ubGVuZ3RoID4gaSlydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZihpc1JlamVjdCAmJiAhcHJvbWlzZS5faClvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24ocHJvbWlzZSl7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uKCl7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdlxuICAgICAgLCBhYnJ1cHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYoaXNVbmhhbmRsZWQocHJvbWlzZSkpe1xuICAgICAgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpe1xuICAgICAgICBpZihpc05vZGUpe1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbil7XG4gICAgICAgICAgaGFuZGxlcih7cHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZX0pO1xuICAgICAgICB9IGVsc2UgaWYoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcil7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmKGFicnVwdCl0aHJvdyBhYnJ1cHQuZXJyb3I7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2Upe1xuICBpZihwcm9taXNlLl9oID09IDEpcmV0dXJuIGZhbHNlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9hIHx8IHByb21pc2UuX2NcbiAgICAsIGkgICAgID0gMFxuICAgICwgcmVhY3Rpb247XG4gIHdoaWxlKGNoYWluLmxlbmd0aCA+IGkpe1xuICAgIHJlYWN0aW9uID0gY2hhaW5baSsrXTtcbiAgICBpZihyZWFjdGlvbi5mYWlsIHx8ICFpc1VuaGFuZGxlZChyZWFjdGlvbi5wcm9taXNlKSlyZXR1cm4gZmFsc2U7XG4gIH0gcmV0dXJuIHRydWU7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24ocHJvbWlzZSl7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uKCl7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYoaXNOb2RlKXtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZihoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCl7XG4gICAgICBoYW5kbGVyKHtwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3Z9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24odmFsdWUpe1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmKHByb21pc2UuX2QpcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmKCFwcm9taXNlLl9hKXByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbih2YWx1ZSl7XG4gIHZhciBwcm9taXNlID0gdGhpc1xuICAgICwgdGhlbjtcbiAgaWYocHJvbWlzZS5fZClyZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZihwcm9taXNlID09PSB2YWx1ZSl0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZih0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpe1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciB3cmFwcGVyID0ge193OiBwcm9taXNlLCBfZDogZmFsc2V9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2goZSl7XG4gICAgJHJlamVjdC5jYWxsKHtfdzogcHJvbWlzZSwgX2Q6IGZhbHNlfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmKCFVU0VfTkFUSVZFKXtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKXtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaChlcnIpe1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3Ipe1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoODYpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCl7XG4gICAgICB2YXIgcmVhY3Rpb24gICAgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rICAgICA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCAgID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYodGhpcy5fYSl0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYodGhpcy5fcylub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uKG9uUmVqZWN0ZWQpe1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgcHJvbWlzZSAgPSBuZXcgSW50ZXJuYWw7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ICA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwge1Byb21pc2U6ICRQcm9taXNlfSk7XG5yZXF1aXJlKDkyKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKDkxKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKDIzKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKXtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpXG4gICAgICAsICQkcmVqZWN0ICAgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpe1xuICAgIC8vIGluc3RhbmNlb2YgaW5zdGVhZCBvZiBpbnRlcm5hbCBzbG90IGNoZWNrIGJlY2F1c2Ugd2Ugc2hvdWxkIGZpeCBpdCB3aXRob3V0IHJlcGxhY2VtZW50IG5hdGl2ZSBQcm9taXNlIGNvcmVcbiAgICBpZih4IGluc3RhbmNlb2YgJFByb21pc2UgJiYgc2FtZUNvbnN0cnVjdG9yKHguY29uc3RydWN0b3IsIHRoaXMpKXJldHVybiB4O1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcylcbiAgICAgICwgJCRyZXNvbHZlICA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICAkJHJlc29sdmUoeCk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKDU0KShmdW5jdGlvbihpdGVyKXtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpe1xuICAgIHZhciBDICAgICAgICAgID0gdGhpc1xuICAgICAgLCBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgICwgcmVzb2x2ZSAgICA9IGNhcGFiaWxpdHkucmVzb2x2ZVxuICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgIHZhciB2YWx1ZXMgICAgPSBbXVxuICAgICAgICAsIGluZGV4ICAgICA9IDBcbiAgICAgICAgLCByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKXtcbiAgICAgICAgdmFyICRpbmRleCAgICAgICAgPSBpbmRleCsrXG4gICAgICAgICAgLCBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgaWYoYWxyZWFkeUNhbGxlZClyZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCAgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSl7XG4gICAgdmFyIEMgICAgICAgICAgPSB0aGlzXG4gICAgICAsIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24ocHJvbWlzZSl7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmKGFicnVwdClyZWplY3QoYWJydXB0LmVycm9yKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTsiLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKDMyKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoMylcbiAgLCBhbk9iamVjdCAgPSByZXF1aXJlKDcpXG4gICwgckFwcGx5ICAgID0gKHJlcXVpcmUoMzgpLlJlZmxlY3QgfHwge30pLmFwcGx5XG4gICwgZkFwcGx5ICAgID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoMzQpKGZ1bmN0aW9uKCl7XG4gIHJBcHBseShmdW5jdGlvbigpe30pO1xufSksICdSZWZsZWN0Jywge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3Qpe1xuICAgIHZhciBUID0gYUZ1bmN0aW9uKHRhcmdldClcbiAgICAgICwgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pOyIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ICAgID0gcmVxdWlyZSgzMilcbiAgLCBjcmVhdGUgICAgID0gcmVxdWlyZSg2NilcbiAgLCBhRnVuY3Rpb24gID0gcmVxdWlyZSgzKVxuICAsIGFuT2JqZWN0ICAgPSByZXF1aXJlKDcpXG4gICwgaXNPYmplY3QgICA9IHJlcXVpcmUoNDkpXG4gICwgZmFpbHMgICAgICA9IHJlcXVpcmUoMzQpXG4gICwgYmluZCAgICAgICA9IHJlcXVpcmUoMTYpXG4gICwgckNvbnN0cnVjdCA9IChyZXF1aXJlKDM4KS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24oKXtcbiAgZnVuY3Rpb24gRigpe31cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbigpe30sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgckNvbnN0cnVjdChmdW5jdGlvbigpe30pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiwgbmV3VGFyZ2V0Ki8pe1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRylyZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYoVGFyZ2V0ID09IG5ld1RhcmdldCl7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoKGFyZ3MubGVuZ3RoKXtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldDtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gICAgPSBuZXdUYXJnZXQucHJvdG90eXBlXG4gICAgICAsIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSlcbiAgICAgICwgcmVzdWx0ICAgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pOyIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgICAgICAgICAgPSByZXF1aXJlKDY3KVxuICAsICRleHBvcnQgICAgID0gcmVxdWlyZSgzMilcbiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoNylcbiAgLCB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoMTEwKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKDM0KShmdW5jdGlvbigpe1xuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHt2YWx1ZTogMX0pLCAxLCB7dmFsdWU6IDJ9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpe1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7IiwiLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoMzIpXG4gICwgZ09QRCAgICAgPSByZXF1aXJlKDcwKS5mXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKDcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KXtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKDMyKVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSg3KTtcbnZhciBFbnVtZXJhdGUgPSBmdW5jdGlvbihpdGVyYXRlZCl7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdICAgICAgIC8vIGtleXNcbiAgICAsIGtleTtcbiAgZm9yKGtleSBpbiBpdGVyYXRlZClrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKDUyKShFbnVtZXJhdGUsICdPYmplY3QnLCBmdW5jdGlvbigpe1xuICB2YXIgdGhhdCA9IHRoaXNcbiAgICAsIGtleXMgPSB0aGF0Ll9rXG4gICAgLCBrZXk7XG4gIGRvIHtcbiAgICBpZih0aGF0Ll9pID49IGtleXMubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07XG4gIH0gd2hpbGUoISgoa2V5ID0ga2V5c1t0aGF0Ll9pKytdKSBpbiB0aGF0Ll90KSk7XG4gIHJldHVybiB7dmFsdWU6IGtleSwgZG9uZTogZmFsc2V9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KXtcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZSh0YXJnZXQpO1xuICB9XG59KTsiLCIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEICAgICA9IHJlcXVpcmUoNzApXG4gICwgJGV4cG9ydCAgPSByZXF1aXJlKDMyKVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSg3KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KXtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7IiwiLy8gMjYuMS44IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KVxudmFyICRleHBvcnQgID0gcmVxdWlyZSgzMilcbiAgLCBnZXRQcm90byA9IHJlcXVpcmUoNzQpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKDcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpe1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7IiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgICAgICAgICAgID0gcmVxdWlyZSg3MClcbiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoNzQpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKDM5KVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgzMilcbiAgLCBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoNDkpXG4gICwgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKDcpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleS8qLCByZWNlaXZlciovKXtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl1cbiAgICAsIGRlc2MsIHByb3RvO1xuICBpZihhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcilyZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSlyZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSlyZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7Z2V0OiBnZXR9KTsiLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgzMik7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSl7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7IiwiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCAgICAgICA9IHJlcXVpcmUoMzIpXG4gICwgYW5PYmplY3QgICAgICA9IHJlcXVpcmUoNylcbiAgLCAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpe1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTsiLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7b3duS2V5czogcmVxdWlyZSg4MCl9KTsiLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgICAgICAgICAgICA9IHJlcXVpcmUoMzIpXG4gICwgYW5PYmplY3QgICAgICAgICAgID0gcmVxdWlyZSg3KVxuICAsICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KXtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHRyeSB7XG4gICAgICBpZigkcHJldmVudEV4dGVuc2lvbnMpJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7IiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKDMyKVxuICAsIHNldFByb3RvID0gcmVxdWlyZSg5MCk7XG5cbmlmKHNldFByb3RvKSRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pe1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7IiwiLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSlcbnZhciBkUCAgICAgICAgICAgICA9IHJlcXVpcmUoNjcpXG4gICwgZ09QRCAgICAgICAgICAgPSByZXF1aXJlKDcwKVxuICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSg3NClcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoMzkpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKDMyKVxuICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSg4NSlcbiAgLCBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoNylcbiAgLCBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoNDkpO1xuXG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgVi8qLCByZWNlaXZlciovKXtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM11cbiAgICAsIG93bkRlc2MgID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KVxuICAgICwgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bztcbiAgaWYoIW93bkRlc2Mpe1xuICAgIGlmKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpe1xuICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XG4gIH1cbiAgaWYoaGFzKG93bkRlc2MsICd2YWx1ZScpKXtcbiAgICBpZihvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKXJldHVybiBmYWxzZTtcbiAgICBleGlzdGluZ0Rlc2NyaXB0b3IgPSBnT1BELmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSB8fCBjcmVhdGVEZXNjKDApO1xuICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtzZXQ6IHNldH0pOyIsInZhciBnbG9iYWwgICAgICAgICAgICA9IHJlcXVpcmUoMzgpXG4gICwgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKDQzKVxuICAsIGRQICAgICAgICAgICAgICAgID0gcmVxdWlyZSg2NykuZlxuICAsIGdPUE4gICAgICAgICAgICAgID0gcmVxdWlyZSg3MikuZlxuICAsIGlzUmVnRXhwICAgICAgICAgID0gcmVxdWlyZSg1MClcbiAgLCAkZmxhZ3MgICAgICAgICAgICA9IHJlcXVpcmUoMzYpXG4gICwgJFJlZ0V4cCAgICAgICAgICAgPSBnbG9iYWwuUmVnRXhwXG4gICwgQmFzZSAgICAgICAgICAgICAgPSAkUmVnRXhwXG4gICwgcHJvdG8gICAgICAgICAgICAgPSAkUmVnRXhwLnByb3RvdHlwZVxuICAsIHJlMSAgICAgICAgICAgICAgID0gL2EvZ1xuICAsIHJlMiAgICAgICAgICAgICAgID0gL2EvZ1xuICAvLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbiAgLCBDT1JSRUNUX05FVyAgICAgICA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYocmVxdWlyZSgyOCkgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKDM0KShmdW5jdGlvbigpe1xuICByZTJbcmVxdWlyZSgxMTcpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSl7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZil7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cFxuICAgICAgLCBwaVJFID0gaXNSZWdFeHAocClcbiAgICAgICwgZmlVICA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbihrZXkpe1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbihpdCl7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvcih2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7IClwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoODcpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKDkxKSgnUmVnRXhwJyk7IiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYocmVxdWlyZSgyOCkgJiYgLy4vZy5mbGFncyAhPSAnZycpcmVxdWlyZSg2NykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKDM2KVxufSk7IiwiLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgzNSkoJ21hdGNoJywgMSwgZnVuY3Rpb24oZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCl7XG4gIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBtYXRjaChyZWdleHApe1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpXG4gICAgICAsIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRtYXRjaF07XG59KTsiLCIvLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoMzUpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24oZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2Upe1xuICAvLyAyMS4xLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpXG4gIHJldHVybiBbZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKXtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKVxuICAgICAgLCBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICB9LCAkcmVwbGFjZV07XG59KTsiLCIvLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgzNSkoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCl7XG4gIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPICA9IGRlZmluZWQodGhpcylcbiAgICAgICwgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICB9LCAkc2VhcmNoXTtcbn0pOyIsIi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoMzUpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uKGRlZmluZWQsIFNQTElULCAkc3BsaXQpe1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBpc1JlZ0V4cCAgID0gcmVxdWlyZSg1MClcbiAgICAsIF9zcGxpdCAgICAgPSAkc3BsaXRcbiAgICAsICRwdXNoICAgICAgPSBbXS5wdXNoXG4gICAgLCAkU1BMSVQgICAgID0gJ3NwbGl0J1xuICAgICwgTEVOR1RIICAgICA9ICdsZW5ndGgnXG4gICAgLCBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG4gIGlmKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApe1xuICAgIHZhciBOUENHID0gLygpPz8vLmV4ZWMoJycpWzFdID09PSB1bmRlZmluZWQ7IC8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwXG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24oc2VwYXJhdG9yLCBsaW1pdCl7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmKCFpc1JlZ0V4cChzZXBhcmF0b3IpKXJldHVybiBfc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IDQyOTQ5NjcyOTUgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIHNlcGFyYXRvcjIsIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGgsIGk7XG4gICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgIGlmKCFOUENHKXNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKCdeJyArIHNlcGFyYXRvckNvcHkuc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgICB3aGlsZShtYXRjaCA9IHNlcGFyYXRvckNvcHkuZXhlYyhzdHJpbmcpKXtcbiAgICAgICAgLy8gYHNlcGFyYXRvckNvcHkubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlclxuICAgICAgICBsYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgIGlmKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpe1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvciBOUENHXG4gICAgICAgICAgaWYoIU5QQ0cgJiYgbWF0Y2hbTEVOR1RIXSA+IDEpbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgZm9yKGkgPSAxOyBpIDwgYXJndW1lbnRzW0xFTkdUSF0gLSAyOyBpKyspaWYoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZihsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSl7XG4gICAgICAgIGlmKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSl7XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24oc2VwYXJhdG9yLCBsaW1pdCl7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6IF9zcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH1cbiAgLy8gMjEuMS4zLjE3IFN0cmluZy5wcm90b3R5cGUuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdClcbiAgcmV0dXJuIFtmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KXtcbiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpXG4gICAgICAsIGZuID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpIDogJHNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgfSwgJHNwbGl0XTtcbn0pOyIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoMjE0KTtcbnZhciBhbk9iamVjdCAgICA9IHJlcXVpcmUoNylcbiAgLCAkZmxhZ3MgICAgICA9IHJlcXVpcmUoMzYpXG4gICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKDI4KVxuICAsIFRPX1NUUklORyAgID0gJ3RvU3RyaW5nJ1xuICAsICR0b1N0cmluZyAgID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbihmbil7XG4gIHJlcXVpcmUoODcpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYocmVxdWlyZSgzNCkoZnVuY3Rpb24oKXsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHtzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJ30pICE9ICcvYS9iJzsgfSkpe1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZigkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpe1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufSIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKDE5KTtcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKDIyKSgnU2V0JywgZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKXtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih0aGlzLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSg5OSkoJ2FuY2hvcicsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5yZXF1aXJlKDk5KSgnYmlnJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoOTkpKCdibGluaycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5yZXF1aXJlKDk5KSgnYm9sZCcsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKVxuICAsICRhdCAgICAgPSByZXF1aXJlKDk3KShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3Mpe1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7IiwiLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICA9IHJlcXVpcmUoMzIpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgxMDgpXG4gICwgY29udGV4dCAgID0gcmVxdWlyZSg5OClcbiAgLCBFTkRTX1dJVEggPSAnZW5kc1dpdGgnXG4gICwgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKDMzKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pe1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSClcbiAgICAgICwgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZFxuICAgICAgLCBsZW4gICAgPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aClcbiAgICAgICwgZW5kICAgID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKVxuICAgICAgLCBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoOTkpKCdmaXhlZCcsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxucmVxdWlyZSg5OSkoJ2ZvbnRjb2xvcicsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpXG5yZXF1aXJlKDk5KSgnZm9udHNpemUnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfVxufSk7IiwidmFyICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgzMilcbiAgLCB0b0luZGV4ICAgICAgICA9IHJlcXVpcmUoMTA1KVxuICAsIGZyb21DaGFyQ29kZSAgID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuICAsICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyAgPSBbXVxuICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBpICAgID0gMFxuICAgICAgLCBjb2RlO1xuICAgIHdoaWxlKGFMZW4gPiBpKXtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZih0b0luZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSl0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTsiLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgID0gcmVxdWlyZSgzMilcbiAgLCBjb250ZXh0ICA9IHJlcXVpcmUoOTgpXG4gICwgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoMzMpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiwgcG9zaXRpb24gPSAwICovKXtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoOTkpKCdpdGFsaWNzJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ICA9IHJlcXVpcmUoOTcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKDUzKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbihpdGVyYXRlZCl7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uKCl7XG4gIHZhciBPICAgICA9IHRoaXMuX3RcbiAgICAsIGluZGV4ID0gdGhpcy5faVxuICAgICwgcG9pbnQ7XG4gIGlmKGluZGV4ID49IE8ubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7dmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZX07XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxucmVxdWlyZSg5OSkoJ2xpbmsnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfVxufSk7IiwidmFyICRleHBvcnQgICA9IHJlcXVpcmUoMzIpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgxMDcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgxMDgpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpe1xuICAgIHZhciB0cGwgID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdylcbiAgICAgICwgbGVuICA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpXG4gICAgICAsIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIHJlcyAgPSBbXVxuICAgICAgLCBpICAgID0gMDtcbiAgICB3aGlsZShsZW4gPiBpKXtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYoaSA8IGFMZW4pcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7IiwidmFyICRleHBvcnQgPSByZXF1aXJlKDMyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdChjb3VudClcbiAgcmVwZWF0OiByZXF1aXJlKDEwMSlcbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKVxucmVxdWlyZSg5OSkoJ3NtYWxsJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH1cbn0pOyIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKDMyKVxuICAsIHRvTGVuZ3RoICAgID0gcmVxdWlyZSgxMDgpXG4gICwgY29udGV4dCAgICAgPSByZXF1aXJlKDk4KVxuICAsIFNUQVJUU19XSVRIID0gJ3N0YXJ0c1dpdGgnXG4gICwgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgzMykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiwgcG9zaXRpb24gPSAwICovKXtcbiAgICB2YXIgdGhhdCAgID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKVxuICAgICAgLCBpbmRleCAgPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKVxuICAgICAgLCBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoOTkpKCdzdHJpa2UnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKDk5KSgnc3ViJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSg5OSkoJ3N1cCcsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxucmVxdWlyZSgxMDIpKCd0cmltJywgZnVuY3Rpb24oJHRyaW0pe1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpe1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoMzgpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKDM5KVxuICAsIERFU0NSSVBUT1JTICAgID0gcmVxdWlyZSgyOClcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoMzIpXG4gICwgcmVkZWZpbmUgICAgICAgPSByZXF1aXJlKDg3KVxuICAsIE1FVEEgICAgICAgICAgID0gcmVxdWlyZSg2MikuS0VZXG4gICwgJGZhaWxzICAgICAgICAgPSByZXF1aXJlKDM0KVxuICAsIHNoYXJlZCAgICAgICAgID0gcmVxdWlyZSg5NClcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoOTIpXG4gICwgdWlkICAgICAgICAgICAgPSByZXF1aXJlKDExNClcbiAgLCB3a3MgICAgICAgICAgICA9IHJlcXVpcmUoMTE3KVxuICAsIHdrc0V4dCAgICAgICAgID0gcmVxdWlyZSgxMTYpXG4gICwgd2tzRGVmaW5lICAgICAgPSByZXF1aXJlKDExNSlcbiAgLCBrZXlPZiAgICAgICAgICA9IHJlcXVpcmUoNTcpXG4gICwgZW51bUtleXMgICAgICAgPSByZXF1aXJlKDMxKVxuICAsIGlzQXJyYXkgICAgICAgID0gcmVxdWlyZSg0NylcbiAgLCBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoNylcbiAgLCB0b0lPYmplY3QgICAgICA9IHJlcXVpcmUoMTA3KVxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgxMTApXG4gICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKDg1KVxuICAsIF9jcmVhdGUgICAgICAgID0gcmVxdWlyZSg2NilcbiAgLCBnT1BORXh0ICAgICAgICA9IHJlcXVpcmUoNzEpXG4gICwgJEdPUEQgICAgICAgICAgPSByZXF1aXJlKDcwKVxuICAsICREUCAgICAgICAgICAgID0gcmVxdWlyZSg2NylcbiAgLCAka2V5cyAgICAgICAgICA9IHJlcXVpcmUoNzYpXG4gICwgZ09QRCAgICAgICAgICAgPSAkR09QRC5mXG4gICwgZFAgICAgICAgICAgICAgPSAkRFAuZlxuICAsIGdPUE4gICAgICAgICAgID0gZ09QTkV4dC5mXG4gICwgJFN5bWJvbCAgICAgICAgPSBnbG9iYWwuU3ltYm9sXG4gICwgJEpTT04gICAgICAgICAgPSBnbG9iYWwuSlNPTlxuICAsIF9zdHJpbmdpZnkgICAgID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5XG4gICwgUFJPVE9UWVBFICAgICAgPSAncHJvdG90eXBlJ1xuICAsIEhJRERFTiAgICAgICAgID0gd2tzKCdfaGlkZGVuJylcbiAgLCBUT19QUklNSVRJVkUgICA9IHdrcygndG9QcmltaXRpdmUnKVxuICAsIGlzRW51bSAgICAgICAgID0ge30ucHJvcGVydHlJc0VudW1lcmFibGVcbiAgLCBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5JylcbiAgLCBBbGxTeW1ib2xzICAgICA9IHNoYXJlZCgnc3ltYm9scycpXG4gICwgT1BTeW1ib2xzICAgICAgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKVxuICAsIE9iamVjdFByb3RvICAgID0gT2JqZWN0W1BST1RPVFlQRV1cbiAgLCBVU0VfTkFUSVZFICAgICA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbidcbiAgLCBRT2JqZWN0ICAgICAgICA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbigpe1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7dmFsdWU6IDd9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uKGl0LCBrZXksIEQpe1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYocHJvdG9EZXNjKWRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bylkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uKHRhZyl7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpe1xuICBpZihpdCA9PT0gT2JqZWN0UHJvdG8pJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYoaGFzKEFsbFN5bWJvbHMsIGtleSkpe1xuICAgIGlmKCFELmVudW1lcmFibGUpe1xuICAgICAgaWYoIWhhcyhpdCwgSElEREVOKSlkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZihoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKWl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwge2VudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCl7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKVxuICAgICwgaSAgICA9IDBcbiAgICAsIGwgPSBrZXlzLmxlbmd0aFxuICAgICwga2V5O1xuICB3aGlsZShsID4gaSkkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKXtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpe1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZih0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSlyZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcbiAgaXQgID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKXJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZihEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XG4gIHZhciBuYW1lcyAgPSBnT1BOKHRvSU9iamVjdChpdCkpXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwgaSAgICAgID0gMFxuICAgICwga2V5O1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXtcbiAgICBpZighaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KXtcbiAgdmFyIElTX09QICA9IGl0ID09PSBPYmplY3RQcm90b1xuICAgICwgbmFtZXMgID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwgaSAgICAgID0gMFxuICAgICwga2V5O1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXtcbiAgICBpZihoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZighVVNFX05BVElWRSl7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKXtcbiAgICBpZih0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCl0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIGlmKHRoaXMgPT09IE9iamVjdFByb3RvKSRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZihERVNDUklQVE9SUyAmJiBzZXR0ZXIpc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7Y29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXR9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiAgID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKDcyKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoNzcpLmYgID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKDczKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZihERVNDUklQVE9SUyAmJiAhcmVxdWlyZSg1OCkpe1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbihuYW1lKXtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHtTeW1ib2w6ICRTeW1ib2x9KTtcblxuZm9yKHZhciBzeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGkgPSAwOyBzeW1ib2xzLmxlbmd0aCA+IGk7ICl3a3Moc3ltYm9sc1tpKytdKTtcblxuZm9yKHZhciBzeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrc0RlZmluZShzeW1ib2xzW2krK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uKGtleSl7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihrZXkpe1xuICAgIGlmKGlzU3ltYm9sKGtleSkpcmV0dXJuIGtleU9mKFN5bWJvbFJlZ2lzdHJ5LCBrZXkpO1xuICAgIHRocm93IFR5cGVFcnJvcihrZXkgKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uKCl7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHthOiBTfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KXtcbiAgICBpZihpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSlyZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICB2YXIgYXJncyA9IFtpdF1cbiAgICAgICwgaSAgICA9IDFcbiAgICAgICwgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZih0eXBlb2YgcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykkcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICBpZigkcmVwbGFjZXIgfHwgIWlzQXJyYXkocmVwbGFjZXIpKXJlcGxhY2VyID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSl7XG4gICAgICBpZigkcmVwbGFjZXIpdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmKCFpc1N5bWJvbCh2YWx1ZSkpcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoNDApKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgPSByZXF1aXJlKDMyKVxuICAsICR0eXBlZCAgICAgICA9IHJlcXVpcmUoMTEzKVxuICAsIGJ1ZmZlciAgICAgICA9IHJlcXVpcmUoMTEyKVxuICAsIGFuT2JqZWN0ICAgICA9IHJlcXVpcmUoNylcbiAgLCB0b0luZGV4ICAgICAgPSByZXF1aXJlKDEwNSlcbiAgLCB0b0xlbmd0aCAgICAgPSByZXF1aXJlKDEwOClcbiAgLCBpc09iamVjdCAgICAgPSByZXF1aXJlKDQ5KVxuICAsIEFycmF5QnVmZmVyICA9IHJlcXVpcmUoMzgpLkFycmF5QnVmZmVyXG4gICwgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSg5NSlcbiAgLCAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXJcbiAgLCAkRGF0YVZpZXcgICAgPSBidWZmZXIuRGF0YVZpZXdcbiAgLCAkaXNWaWV3ICAgICAgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlld1xuICAsICRzbGljZSAgICAgICA9ICRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2VcbiAgLCBWSUVXICAgICAgICAgPSAkdHlwZWQuVklFV1xuICAsIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEFycmF5QnVmZmVyICE9PSAkQXJyYXlCdWZmZXIpLCB7QXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlcn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpe1xuICAgIHJldHVybiAkaXNWaWV3ICYmICRpc1ZpZXcoaXQpIHx8IGlzT2JqZWN0KGl0KSAmJiBWSUVXIGluIGl0O1xuICB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlUgKyAkZXhwb3J0LkYgKiByZXF1aXJlKDM0KShmdW5jdGlvbigpe1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpe1xuICAgIGlmKCRzbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKXJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuICAgID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aFxuICAgICAgLCBmaXJzdCAgPSB0b0luZGV4KHN0YXJ0LCBsZW4pXG4gICAgICAsIGZpbmFsICA9IHRvSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQsIGxlbilcbiAgICAgICwgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluYWwgLSBmaXJzdCkpXG4gICAgICAsIHZpZXdTICA9IG5ldyAkRGF0YVZpZXcodGhpcylcbiAgICAgICwgdmlld1QgID0gbmV3ICREYXRhVmlldyhyZXN1bHQpXG4gICAgICAsIGluZGV4ICA9IDA7XG4gICAgd2hpbGUoZmlyc3QgPCBmaW5hbCl7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSg5MSkoQVJSQVlfQlVGRkVSKTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgxMTMpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgxMTIpLkRhdGFWaWV3XG59KTsiLCJyZXF1aXJlKDExMSkoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKDExMSkoJ0Zsb2F0NjQnLCA4LCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKDExMSkoJ0ludDE2JywgMiwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoMTExKSgnSW50MzInLCA0LCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgxMTEpKCdJbnQ4JywgMSwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgxMTEpKCdVaW50MTYnLCAyLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoMTExKSgnVWludDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKDExMSkoJ1VpbnQ4JywgMSwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoMTExKSgnVWludDgnLCAxLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpOyIsIid1c2Ugc3RyaWN0JztcbnZhciBlYWNoICAgICAgICAgPSByZXF1aXJlKDEyKSgwKVxuICAsIHJlZGVmaW5lICAgICA9IHJlcXVpcmUoODcpXG4gICwgbWV0YSAgICAgICAgID0gcmVxdWlyZSg2MilcbiAgLCBhc3NpZ24gICAgICAgPSByZXF1aXJlKDY1KVxuICAsIHdlYWsgICAgICAgICA9IHJlcXVpcmUoMjEpXG4gICwgaXNPYmplY3QgICAgID0gcmVxdWlyZSg0OSlcbiAgLCBnZXRXZWFrICAgICAgPSBtZXRhLmdldFdlYWtcbiAgLCBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlXG4gICwgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZVxuICAsIHRtcCAgICAgICAgICA9IHt9XG4gICwgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKXtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpe1xuICAgIGlmKGlzT2JqZWN0KGtleSkpe1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZihkYXRhID09PSB0cnVlKXJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHRoaXMpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpe1xuICAgIHJldHVybiB3ZWFrLmRlZih0aGlzLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgyMikoJ1dlYWtNYXAnLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYobmV3ICRXZWFrTWFwKCkuc2V0KChPYmplY3QuZnJlZXplIHx8IE9iamVjdCkodG1wKSwgNykuZ2V0KHRtcCkgIT0gNyl7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24oa2V5KXtcbiAgICB2YXIgcHJvdG8gID0gJFdlYWtNYXAucHJvdG90eXBlXG4gICAgICAsIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24oYSwgYil7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpe1xuICAgICAgICBpZighdGhpcy5fZil0aGlzLl9mID0gbmV3IEludGVybmFsTWFwO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufSIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgyMSk7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKDIyKSgnV2Vha1NldCcsIGZ1bmN0aW9uKGdldCl7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKXtcbiAgICByZXR1cm4gd2Vhay5kZWYodGhpcywgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgzMilcbiAgLCAkaW5jbHVkZXMgPSByZXF1aXJlKDExKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qLCBmcm9tSW5kZXggPSAwICovKXtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKDUpKCdpbmNsdWRlcycpOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yd2FsZHJvbi90YzM5LW5vdGVzL2Jsb2IvbWFzdGVyL2VzNi8yMDE0LTA5L3NlcHQtMjUubWQjNTEwLWdsb2JhbGFzYXAtZm9yLWVucXVldWluZy1hLW1pY3JvdGFza1xudmFyICRleHBvcnQgICA9IHJlcXVpcmUoMzIpXG4gICwgbWljcm90YXNrID0gcmVxdWlyZSg2NCkoKVxuICAsIHByb2Nlc3MgICA9IHJlcXVpcmUoMzgpLnByb2Nlc3NcbiAgLCBpc05vZGUgICAgPSByZXF1aXJlKDE4KShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7XG4gIGFzYXA6IGZ1bmN0aW9uIGFzYXAoZm4pe1xuICAgIHZhciBkb21haW4gPSBpc05vZGUgJiYgcHJvY2Vzcy5kb21haW47XG4gICAgbWljcm90YXNrKGRvbWFpbiA/IGRvbWFpbi5iaW5kKGZuKSA6IGZuKTtcbiAgfVxufSk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvclxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKVxuICAsIGNvZiAgICAgPSByZXF1aXJlKDE4KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHtcbiAgaXNFcnJvcjogZnVuY3Rpb24gaXNFcnJvcihpdCl7XG4gICAgcmV0dXJuIGNvZihpdCkgPT09ICdFcnJvcic7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoMzIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHt0b0pTT046IHJlcXVpcmUoMjApKCdNYXAnKX0pOyIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlhZGRoOiBmdW5jdGlvbiBpYWRkaCh4MCwgeDEsIHkwLCB5MSl7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwXG4gICAgICAsICR4MSA9IHgxID4+PiAwXG4gICAgICAsICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgKyAoeTEgPj4+IDApICsgKCgkeDAgJiAkeTAgfCAoJHgwIHwgJHkwKSAmIH4oJHgwICsgJHkwID4+PiAwKSkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KXtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmXG4gICAgICAsICR1ID0gK3VcbiAgICAgICwgJHYgPSArdlxuICAgICAgLCB1MCA9ICR1ICYgVUlOVDE2XG4gICAgICAsIHYwID0gJHYgJiBVSU5UMTZcbiAgICAgICwgdTEgPSAkdSA+PiAxNlxuICAgICAgLCB2MSA9ICR2ID4+IDE2XG4gICAgICAsIHQgID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4gMTYpO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpe1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMFxuICAgICAgLCAkeDEgPSB4MSA+Pj4gMFxuICAgICAgLCAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHVtdWxoOiBmdW5jdGlvbiB1bXVsaCh1LCB2KXtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmXG4gICAgICAsICR1ID0gK3VcbiAgICAgICwgJHYgPSArdlxuICAgICAgLCB1MCA9ICR1ICYgVUlOVDE2XG4gICAgICAsIHYwID0gJHYgJiBVSU5UMTZcbiAgICAgICwgdTEgPSAkdSA+Pj4gMTZcbiAgICAgICwgdjEgPSAkdiA+Pj4gMTZcbiAgICAgICwgdCAgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgICA9IHJlcXVpcmUoMzIpXG4gICwgdG9PYmplY3QgICAgICAgID0gcmVxdWlyZSgxMDkpXG4gICwgYUZ1bmN0aW9uICAgICAgID0gcmVxdWlyZSgzKVxuICAsICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoNjcpO1xuXG4vLyBCLjIuMi4yIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpXG5yZXF1aXJlKDI4KSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoNjkpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcil7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHtnZXQ6IGFGdW5jdGlvbihnZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9KTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgICA9IHJlcXVpcmUoMzIpXG4gICwgdG9PYmplY3QgICAgICAgID0gcmVxdWlyZSgxMDkpXG4gICwgYUZ1bmN0aW9uICAgICAgID0gcmVxdWlyZSgzKVxuICAsICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoNjcpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5yZXF1aXJlKDI4KSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoNjkpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcil7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHtzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9KTtcbiAgfVxufSk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKDMyKVxuICAsICRlbnRyaWVzID0gcmVxdWlyZSg3OSkodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKGl0KXtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgzMilcbiAgLCBvd25LZXlzICAgICAgICA9IHJlcXVpcmUoODApXG4gICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKDEwNylcbiAgLCBnT1BEICAgICAgICAgICA9IHJlcXVpcmUoNzApXG4gICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKDI0KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KXtcbiAgICB2YXIgTyAgICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgICAsIGdldERlc2MgPSBnT1BELmZcbiAgICAgICwga2V5cyAgICA9IG93bktleXMoTylcbiAgICAgICwgcmVzdWx0ICA9IHt9XG4gICAgICAsIGkgICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShrZXlzLmxlbmd0aCA+IGkpY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXkgPSBrZXlzW2krK10sIGdldERlc2MoTywga2V5KSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoMzIpXG4gICwgdG9PYmplY3QgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgxMDkpXG4gICwgdG9QcmltaXRpdmUgICAgICAgICAgICAgID0gcmVxdWlyZSgxMTApXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICAgID0gcmVxdWlyZSg3NClcbiAgLCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKDcwKS5mO1xuXG4vLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKVxucmVxdWlyZSgyOCkgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKDY5KSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKXtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpXG4gICAgICAsIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKVxuICAgICAgLCBEO1xuICAgIGRvIHtcbiAgICAgIGlmKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpcmV0dXJuIEQuZ2V0O1xuICAgIH0gd2hpbGUoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoMzIpXG4gICwgdG9PYmplY3QgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgxMDkpXG4gICwgdG9QcmltaXRpdmUgICAgICAgICAgICAgID0gcmVxdWlyZSgxMTApXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICAgID0gcmVxdWlyZSg3NClcbiAgLCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKDcwKS5mO1xuXG4vLyBCLjIuMi41IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfXyhQKVxucmVxdWlyZSgyOCkgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKDY5KSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKXtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpXG4gICAgICAsIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKVxuICAgICAgLCBEO1xuICAgIGRvIHtcbiAgICAgIGlmKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpcmV0dXJuIEQuc2V0O1xuICAgIH0gd2hpbGUoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoMzIpXG4gICwgJHZhbHVlcyA9IHJlcXVpcmUoNzkpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KXtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGVcbnZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoMzIpXG4gICwgZ2xvYmFsICAgICAgPSByZXF1aXJlKDM4KVxuICAsIGNvcmUgICAgICAgID0gcmVxdWlyZSgyMylcbiAgLCBtaWNyb3Rhc2sgICA9IHJlcXVpcmUoNjQpKClcbiAgLCBPQlNFUlZBQkxFICA9IHJlcXVpcmUoMTE3KSgnb2JzZXJ2YWJsZScpXG4gICwgYUZ1bmN0aW9uICAgPSByZXF1aXJlKDMpXG4gICwgYW5PYmplY3QgICAgPSByZXF1aXJlKDcpXG4gICwgYW5JbnN0YW5jZSAgPSByZXF1aXJlKDYpXG4gICwgcmVkZWZpbmVBbGwgPSByZXF1aXJlKDg2KVxuICAsIGhpZGUgICAgICAgID0gcmVxdWlyZSg0MClcbiAgLCBmb3JPZiAgICAgICA9IHJlcXVpcmUoMzcpXG4gICwgUkVUVVJOICAgICAgPSBmb3JPZi5SRVRVUk47XG5cbnZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihmbil7XG4gIHJldHVybiBmbiA9PSBudWxsID8gdW5kZWZpbmVkIDogYUZ1bmN0aW9uKGZuKTtcbn07XG5cbnZhciBjbGVhbnVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXtcbiAgdmFyIGNsZWFudXAgPSBzdWJzY3JpcHRpb24uX2M7XG4gIGlmKGNsZWFudXApe1xuICAgIHN1YnNjcmlwdGlvbi5fYyA9IHVuZGVmaW5lZDtcbiAgICBjbGVhbnVwKCk7XG4gIH1cbn07XG5cbnZhciBzdWJzY3JpcHRpb25DbG9zZWQgPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pe1xuICByZXR1cm4gc3Vic2NyaXB0aW9uLl9vID09PSB1bmRlZmluZWQ7XG59O1xuXG52YXIgY2xvc2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pe1xuICBpZighc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpe1xuICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gIH1cbn07XG5cbnZhciBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbihvYnNlcnZlciwgc3Vic2NyaWJlcil7XG4gIGFuT2JqZWN0KG9ic2VydmVyKTtcbiAgdGhpcy5fYyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fbyA9IG9ic2VydmVyO1xuICBvYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTtcbiAgdHJ5IHtcbiAgICB2YXIgY2xlYW51cCAgICAgID0gc3Vic2NyaWJlcihvYnNlcnZlcilcbiAgICAgICwgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZihjbGVhbnVwICE9IG51bGwpe1xuICAgICAgaWYodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpY2xlYW51cCA9IGZ1bmN0aW9uKCl7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7XG4gICAgICB0aGlzLl9jID0gY2xlYW51cDtcbiAgICB9XG4gIH0gY2F0Y2goZSl7XG4gICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgcmV0dXJuO1xuICB9IGlmKHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSljbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpO1xufTtcblxuU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpeyBjbG9zZVN1YnNjcmlwdGlvbih0aGlzKTsgfVxufSk7XG5cbnZhciBTdWJzY3JpcHRpb25PYnNlcnZlciA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7XG4gIHRoaXMuX3MgPSBzdWJzY3JpcHRpb247XG59O1xuXG5TdWJzY3JpcHRpb25PYnNlcnZlci5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKXtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZighc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpe1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIubmV4dCk7XG4gICAgICAgIGlmKG0pcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbG9zZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGVycm9yOiBmdW5jdGlvbiBlcnJvcih2YWx1ZSl7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpdGhyb3cgdmFsdWU7XG4gICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICB0cnkge1xuICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuZXJyb3IpO1xuICAgICAgaWYoIW0pdGhyb3cgdmFsdWU7XG4gICAgICB2YWx1ZSA9IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICB0cnkge1xuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHZhbHVlKXtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZighc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpe1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpO1xuICAgICAgICB2YWx1ZSA9IG0gPyBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufSk7XG5cbnZhciAkT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlcil7XG4gIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJywgJ19mJykuX2YgPSBhRnVuY3Rpb24oc3Vic2NyaWJlcik7XG59O1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpe1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9mKTtcbiAgfSxcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChmbil7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgKGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSkoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICAgIGFGdW5jdGlvbihmbik7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhhdC5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0IDogZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZm4odmFsdWUpO1xuICAgICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgIGNvbXBsZXRlOiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20oeCl7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZTtcbiAgICB2YXIgbWV0aG9kID0gZ2V0TWV0aG9kKGFuT2JqZWN0KHgpW09CU0VSVkFCTEVdKTtcbiAgICBpZihtZXRob2Qpe1xuICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChtZXRob2QuY2FsbCh4KSk7XG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbihvYnNlcnZlcil7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uKG9ic2VydmVyKXtcbiAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoIWRvbmUpe1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZihmb3JPZih4LCBmYWxzZSwgZnVuY3Rpb24oaXQpe1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTtcbiAgICAgICAgICAgICAgaWYoZG9uZSlyZXR1cm4gUkVUVVJOO1xuICAgICAgICAgICAgfSkgPT09IFJFVFVSTilyZXR1cm47XG4gICAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIGlmKGRvbmUpdGhyb3cgZTtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKXsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH0sXG4gIG9mOiBmdW5jdGlvbiBvZigpe1xuICAgIGZvcih2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoLCBpdGVtcyA9IEFycmF5KGwpOyBpIDwgbDspaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZSkoZnVuY3Rpb24ob2JzZXJ2ZXIpe1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbigpe1xuICAgICAgICBpZighZG9uZSl7XG4gICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbaV0pO1xuICAgICAgICAgICAgaWYoZG9uZSlyZXR1cm47XG4gICAgICAgICAgfSBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7T2JzZXJ2YWJsZTogJE9ic2VydmFibGV9KTtcblxucmVxdWlyZSg5MSkoJ09ic2VydmFibGUnKTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoNjMpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoNylcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5XG4gICwgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHtkZWZpbmVNZXRhZGF0YTogZnVuY3Rpb24gZGVmaW5lTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgdGFyZ2V0S2V5KXtcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSg2MylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSg3KVxuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXlcbiAgLCBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gbWV0YWRhdGEubWFwXG4gICwgc3RvcmUgICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLnN0b3JlO1xuXG5tZXRhZGF0YS5leHAoe2RlbGV0ZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICB2YXIgdGFyZ2V0S2V5ICAgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pXG4gICAgLCBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIGlmKG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgfHwgIW1ldGFkYXRhTWFwWydkZWxldGUnXShtZXRhZGF0YUtleSkpcmV0dXJuIGZhbHNlO1xuICBpZihtZXRhZGF0YU1hcC5zaXplKXJldHVybiB0cnVlO1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgdGFyZ2V0TWV0YWRhdGFbJ2RlbGV0ZSddKHRhcmdldEtleSk7XG4gIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7XG59fSk7IiwidmFyIFNldCAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgyMjApXG4gICwgZnJvbSAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKDEwKVxuICAsIG1ldGFkYXRhICAgICAgICAgICAgICAgID0gcmVxdWlyZSg2MylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoNylcbiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgICA9IHJlcXVpcmUoNzQpXG4gICwgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeU1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uKE8sIFApe1xuICB2YXIgb0tleXMgID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUClcbiAgICAsIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICBpZihwYXJlbnQgPT09IG51bGwpcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgID0gb3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTtcbiAgcmV0dXJuIHBLZXlzLmxlbmd0aCA/IG9LZXlzLmxlbmd0aCA/IGZyb20obmV3IFNldChvS2V5cy5jb25jYXQocEtleXMpKSkgOiBwS2V5cyA6IG9LZXlzO1xufTtcblxubWV0YWRhdGEuZXhwKHtnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeU1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoNjMpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoNylcbiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgID0gcmVxdWlyZSg3NClcbiAgLCBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzXG4gICwgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldFxuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUdldE1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE8sIFApe1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmKGhhc093bilyZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiB1bmRlZmluZWQ7XG59O1xuXG5tZXRhZGF0YS5leHAoe2dldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlHZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59fSk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgID0gcmVxdWlyZSg2MylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoNylcbiAgLCBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXNcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHtnZXRPd25NZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhS2V5cyh0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoNjMpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoNylcbiAgLCBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0XG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHtnZXRPd25NZXRhZGF0YTogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSg2MylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSg3KVxuICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgPSByZXF1aXJlKDc0KVxuICAsIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXNcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlIYXNNZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZihoYXNPd24pcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbm1ldGFkYXRhLmV4cCh7aGFzTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoNjMpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoNylcbiAgLCBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHtoYXNPd25NZXRhZGF0YTogZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSg2MylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSg3KVxuICAsIGFGdW5jdGlvbiAgICAgICAgICAgICAgICAgPSByZXF1aXJlKDMpXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleVxuICAsIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7bWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHRhcmdldEtleSl7XG4gICAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShcbiAgICAgIG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLFxuICAgICAgKHRhcmdldEtleSAhPT0gdW5kZWZpbmVkID8gYW5PYmplY3QgOiBhRnVuY3Rpb24pKHRhcmdldCksXG4gICAgICB0b01ldGFLZXkodGFyZ2V0S2V5KVxuICAgICk7XG4gIH07XG59fSk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgID0gcmVxdWlyZSgzMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0Jywge3RvSlNPTjogcmVxdWlyZSgyMCkoJ1NldCcpfSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKVxuICAsICRhdCAgICAgPSByZXF1aXJlKDk3KSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIGF0OiBmdW5jdGlvbiBhdChwb3Mpe1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9TdHJpbmcucHJvdG90eXBlLm1hdGNoQWxsL1xudmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgzMilcbiAgLCBkZWZpbmVkICAgICA9IHJlcXVpcmUoMjcpXG4gICwgdG9MZW5ndGggICAgPSByZXF1aXJlKDEwOClcbiAgLCBpc1JlZ0V4cCAgICA9IHJlcXVpcmUoNTApXG4gICwgZ2V0RmxhZ3MgICAgPSByZXF1aXJlKDM2KVxuICAsIFJlZ0V4cFByb3RvID0gUmVnRXhwLnByb3RvdHlwZTtcblxudmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uKHJlZ2V4cCwgc3RyaW5nKXtcbiAgdGhpcy5fciA9IHJlZ2V4cDtcbiAgdGhpcy5fcyA9IHN0cmluZztcbn07XG5cbnJlcXVpcmUoNTIpKCRSZWdFeHBTdHJpbmdJdGVyYXRvciwgJ1JlZ0V4cCBTdHJpbmcnLCBmdW5jdGlvbiBuZXh0KCl7XG4gIHZhciBtYXRjaCA9IHRoaXMuX3IuZXhlYyh0aGlzLl9zKTtcbiAgcmV0dXJuIHt2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgbWF0Y2hBbGw6IGZ1bmN0aW9uIG1hdGNoQWxsKHJlZ2V4cCl7XG4gICAgZGVmaW5lZCh0aGlzKTtcbiAgICBpZighaXNSZWdFeHAocmVnZXhwKSl0aHJvdyBUeXBlRXJyb3IocmVnZXhwICsgJyBpcyBub3QgYSByZWdleHAhJyk7XG4gICAgdmFyIFMgICAgID0gU3RyaW5nKHRoaXMpXG4gICAgICAsIGZsYWdzID0gJ2ZsYWdzJyBpbiBSZWdFeHBQcm90byA/IFN0cmluZyhyZWdleHAuZmxhZ3MpIDogZ2V0RmxhZ3MuY2FsbChyZWdleHApXG4gICAgICAsIHJ4ICAgID0gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLCB+ZmxhZ3MuaW5kZXhPZignZycpID8gZmxhZ3MgOiAnZycgKyBmbGFncyk7XG4gICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7XG4gICAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IocngsIFMpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKDMyKVxuICAsICRwYWQgICAgPSByZXF1aXJlKDEwMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyosIGZpbGxTdHJpbmcgPSAnICcgKi8pe1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZhbHNlKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgzMilcbiAgLCAkcGFkICAgID0gcmVxdWlyZSgxMDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiwgZmlsbFN0cmluZyA9ICcgJyAqLyl7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoMTAyKSgndHJpbUxlZnQnLCBmdW5jdGlvbigkdHJpbSl7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpe1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKDEwMikoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uKCR0cmltKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpe1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7IiwicmVxdWlyZSgxMTUpKCdhc3luY0l0ZXJhdG9yJyk7IiwicmVxdWlyZSgxMTUpKCdvYnNlcnZhYmxlJyk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgzMik7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywge2dsb2JhbDogcmVxdWlyZSgzOCl9KTsiLCJ2YXIgJGl0ZXJhdG9ycyAgICA9IHJlcXVpcmUoMTMwKVxuICAsIHJlZGVmaW5lICAgICAgPSByZXF1aXJlKDg3KVxuICAsIGdsb2JhbCAgICAgICAgPSByZXF1aXJlKDM4KVxuICAsIGhpZGUgICAgICAgICAgPSByZXF1aXJlKDQwKVxuICAsIEl0ZXJhdG9ycyAgICAgPSByZXF1aXJlKDU2KVxuICAsIHdrcyAgICAgICAgICAgPSByZXF1aXJlKDExNylcbiAgLCBJVEVSQVRPUiAgICAgID0gd2tzKCdpdGVyYXRvcicpXG4gICwgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKVxuICAsIEFycmF5VmFsdWVzICAgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmZvcih2YXIgY29sbGVjdGlvbnMgPSBbJ05vZGVMaXN0JywgJ0RPTVRva2VuTGlzdCcsICdNZWRpYUxpc3QnLCAnU3R5bGVTaGVldExpc3QnLCAnQ1NTUnVsZUxpc3QnXSwgaSA9IDA7IGkgPCA1OyBpKyspe1xuICB2YXIgTkFNRSAgICAgICA9IGNvbGxlY3Rpb25zW2ldXG4gICAgLCBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdXG4gICAgLCBwcm90byAgICAgID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZVxuICAgICwga2V5O1xuICBpZihwcm90byl7XG4gICAgaWYoIXByb3RvW0lURVJBVE9SXSloaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmKCFwcm90b1tUT19TVFJJTkdfVEFHXSloaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBmb3Ioa2V5IGluICRpdGVyYXRvcnMpaWYoIXByb3RvW2tleV0pcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufSIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgzMilcbiAgLCAkdGFzayAgID0gcmVxdWlyZSgxMDQpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAgICR0YXNrLnNldCxcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXG59KTsiLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsICAgICA9IHJlcXVpcmUoMzgpXG4gICwgJGV4cG9ydCAgICA9IHJlcXVpcmUoMzIpXG4gICwgaW52b2tlICAgICA9IHJlcXVpcmUoNDQpXG4gICwgcGFydGlhbCAgICA9IHJlcXVpcmUoODMpXG4gICwgbmF2aWdhdG9yICA9IGdsb2JhbC5uYXZpZ2F0b3JcbiAgLCBNU0lFICAgICAgID0gISFuYXZpZ2F0b3IgJiYgL01TSUUgLlxcLi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbihzZXQpe1xuICByZXR1cm4gTVNJRSA/IGZ1bmN0aW9uKGZuLCB0aW1lIC8qLCAuLi5hcmdzICovKXtcbiAgICByZXR1cm4gc2V0KGludm9rZShcbiAgICAgIHBhcnRpYWwsXG4gICAgICBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMiksXG4gICAgICB0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pXG4gICAgKSwgdGltZSk7XG4gIH0gOiBzZXQ7XG59O1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6ICB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7IiwicmVxdWlyZSgyNDMpO1xucmVxdWlyZSgxODApO1xucmVxdWlyZSgxODIpO1xucmVxdWlyZSgxODEpO1xucmVxdWlyZSgxODQpO1xucmVxdWlyZSgxODYpO1xucmVxdWlyZSgxOTEpO1xucmVxdWlyZSgxODUpO1xucmVxdWlyZSgxODMpO1xucmVxdWlyZSgxOTMpO1xucmVxdWlyZSgxOTIpO1xucmVxdWlyZSgxODgpO1xucmVxdWlyZSgxODkpO1xucmVxdWlyZSgxODcpO1xucmVxdWlyZSgxNzkpO1xucmVxdWlyZSgxOTApO1xucmVxdWlyZSgxOTQpO1xucmVxdWlyZSgxOTUpO1xucmVxdWlyZSgxNDYpO1xucmVxdWlyZSgxNDgpO1xucmVxdWlyZSgxNDcpO1xucmVxdWlyZSgxOTcpO1xucmVxdWlyZSgxOTYpO1xucmVxdWlyZSgxNjcpO1xucmVxdWlyZSgxNzcpO1xucmVxdWlyZSgxNzgpO1xucmVxdWlyZSgxNjgpO1xucmVxdWlyZSgxNjkpO1xucmVxdWlyZSgxNzApO1xucmVxdWlyZSgxNzEpO1xucmVxdWlyZSgxNzIpO1xucmVxdWlyZSgxNzMpO1xucmVxdWlyZSgxNzQpO1xucmVxdWlyZSgxNzUpO1xucmVxdWlyZSgxNzYpO1xucmVxdWlyZSgxNTApO1xucmVxdWlyZSgxNTEpO1xucmVxdWlyZSgxNTIpO1xucmVxdWlyZSgxNTMpO1xucmVxdWlyZSgxNTQpO1xucmVxdWlyZSgxNTUpO1xucmVxdWlyZSgxNTYpO1xucmVxdWlyZSgxNTcpO1xucmVxdWlyZSgxNTgpO1xucmVxdWlyZSgxNTkpO1xucmVxdWlyZSgxNjApO1xucmVxdWlyZSgxNjEpO1xucmVxdWlyZSgxNjIpO1xucmVxdWlyZSgxNjMpO1xucmVxdWlyZSgxNjQpO1xucmVxdWlyZSgxNjUpO1xucmVxdWlyZSgxNjYpO1xucmVxdWlyZSgyMzApO1xucmVxdWlyZSgyMzUpO1xucmVxdWlyZSgyNDIpO1xucmVxdWlyZSgyMzMpO1xucmVxdWlyZSgyMjUpO1xucmVxdWlyZSgyMjYpO1xucmVxdWlyZSgyMzEpO1xucmVxdWlyZSgyMzYpO1xucmVxdWlyZSgyMzgpO1xucmVxdWlyZSgyMjEpO1xucmVxdWlyZSgyMjIpO1xucmVxdWlyZSgyMjMpO1xucmVxdWlyZSgyMjQpO1xucmVxdWlyZSgyMjcpO1xucmVxdWlyZSgyMjgpO1xucmVxdWlyZSgyMjkpO1xucmVxdWlyZSgyMzIpO1xucmVxdWlyZSgyMzQpO1xucmVxdWlyZSgyMzcpO1xucmVxdWlyZSgyMzkpO1xucmVxdWlyZSgyNDApO1xucmVxdWlyZSgyNDEpO1xucmVxdWlyZSgxNDEpO1xucmVxdWlyZSgxNDMpO1xucmVxdWlyZSgxNDIpO1xucmVxdWlyZSgxNDUpO1xucmVxdWlyZSgxNDQpO1xucmVxdWlyZSgxMjkpO1xucmVxdWlyZSgxMjcpO1xucmVxdWlyZSgxMzQpO1xucmVxdWlyZSgxMzEpO1xucmVxdWlyZSgxMzcpO1xucmVxdWlyZSgxMzkpO1xucmVxdWlyZSgxMjYpO1xucmVxdWlyZSgxMzMpO1xucmVxdWlyZSgxMjMpO1xucmVxdWlyZSgxMzgpO1xucmVxdWlyZSgxMjEpO1xucmVxdWlyZSgxMzYpO1xucmVxdWlyZSgxMzUpO1xucmVxdWlyZSgxMjgpO1xucmVxdWlyZSgxMzIpO1xucmVxdWlyZSgxMjApO1xucmVxdWlyZSgxMjIpO1xucmVxdWlyZSgxMjUpO1xucmVxdWlyZSgxMjQpO1xucmVxdWlyZSgxNDApO1xucmVxdWlyZSgxMzApO1xucmVxdWlyZSgyMTMpO1xucmVxdWlyZSgyMTkpO1xucmVxdWlyZSgyMTQpO1xucmVxdWlyZSgyMTUpO1xucmVxdWlyZSgyMTYpO1xucmVxdWlyZSgyMTcpO1xucmVxdWlyZSgyMTgpO1xucmVxdWlyZSgxOTgpO1xucmVxdWlyZSgxNDkpO1xucmVxdWlyZSgyMjApO1xucmVxdWlyZSgyNTUpO1xucmVxdWlyZSgyNTYpO1xucmVxdWlyZSgyNDQpO1xucmVxdWlyZSgyNDUpO1xucmVxdWlyZSgyNTApO1xucmVxdWlyZSgyNTMpO1xucmVxdWlyZSgyNTQpO1xucmVxdWlyZSgyNDgpO1xucmVxdWlyZSgyNTEpO1xucmVxdWlyZSgyNDkpO1xucmVxdWlyZSgyNTIpO1xucmVxdWlyZSgyNDYpO1xucmVxdWlyZSgyNDcpO1xucmVxdWlyZSgxOTkpO1xucmVxdWlyZSgyMDApO1xucmVxdWlyZSgyMDEpO1xucmVxdWlyZSgyMDIpO1xucmVxdWlyZSgyMDMpO1xucmVxdWlyZSgyMDYpO1xucmVxdWlyZSgyMDQpO1xucmVxdWlyZSgyMDUpO1xucmVxdWlyZSgyMDcpO1xucmVxdWlyZSgyMDgpO1xucmVxdWlyZSgyMDkpO1xucmVxdWlyZSgyMTApO1xucmVxdWlyZSgyMTIpO1xucmVxdWlyZSgyMTEpO1xucmVxdWlyZSgyNTcpO1xucmVxdWlyZSgyODMpO1xucmVxdWlyZSgyODYpO1xucmVxdWlyZSgyODUpO1xucmVxdWlyZSgyODcpO1xucmVxdWlyZSgyODgpO1xucmVxdWlyZSgyODQpO1xucmVxdWlyZSgyODkpO1xucmVxdWlyZSgyOTApO1xucmVxdWlyZSgyNjgpO1xucmVxdWlyZSgyNzEpO1xucmVxdWlyZSgyNjcpO1xucmVxdWlyZSgyNjUpO1xucmVxdWlyZSgyNjYpO1xucmVxdWlyZSgyNjkpO1xucmVxdWlyZSgyNzApO1xucmVxdWlyZSgyNjApO1xucmVxdWlyZSgyODIpO1xucmVxdWlyZSgyOTEpO1xucmVxdWlyZSgyNTkpO1xucmVxdWlyZSgyNjEpO1xucmVxdWlyZSgyNjMpO1xucmVxdWlyZSgyNjIpO1xucmVxdWlyZSgyNjQpO1xucmVxdWlyZSgyNzMpO1xucmVxdWlyZSgyNzQpO1xucmVxdWlyZSgyNzYpO1xucmVxdWlyZSgyNzUpO1xucmVxdWlyZSgyNzgpO1xucmVxdWlyZSgyNzcpO1xucmVxdWlyZSgyNzkpO1xucmVxdWlyZSgyODApO1xucmVxdWlyZSgyODEpO1xucmVxdWlyZSgyNTgpO1xucmVxdWlyZSgyNzIpO1xucmVxdWlyZSgyOTQpO1xucmVxdWlyZSgyOTMpO1xucmVxdWlyZSgyOTIpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKDIzKTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBodHRwczovL3Jhdy5naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL21hc3Rlci9MSUNFTlNFIGZpbGUuIEFuXG4gKiBhZGRpdGlvbmFsIGdyYW50IG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW5cbiAqIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBob3dldmVyLCB0aGVcbiAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZVxuICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90XG4gICAgICAgICAgLy8gdGhyb3duIGJhY2sgaW50byB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBhcyBpcyB0aGUgY2FzZVxuICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW5cbiAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXRcbiAgICAgICAgICAvLyBhbGxvd3MgdGhlIGNvbnN1bWVyIHRvIGRlY2lkZSB3aGF0IHRvIGRvIHdpdGggdGhlIHlpZWxkZWRcbiAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5kIGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aFxuICAgICAgICAgIC8vIGF3YWl0LCBieSBjb250cmFzdCwgdGhlcmUgaXMgbm8gb3Bwb3J0dW5pdHkgdG8gZXhhbWluZSB0aGVcbiAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlXG4gICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kXG4gICAgICAgICAgLy8gbGV0IHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gaGFuZGxlIHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGdsb2JhbC5wcm9jZXNzID09PSBcIm9iamVjdFwiICYmIGdsb2JhbC5wcm9jZXNzLmRvbWFpbikge1xuICAgICAgaW52b2tlID0gZ2xvYmFsLnByb2Nlc3MuZG9tYWluLmJpbmQoaW52b2tlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xufSkoXG4gIC8vIEFtb25nIHRoZSB2YXJpb3VzIHRyaWNrcyBmb3Igb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWxcbiAgLy8gb2JqZWN0LCB0aGlzIHNlZW1zIHRvIGJlIHRoZSBtb3N0IHJlbGlhYmxlIHRlY2huaXF1ZSB0aGF0IGRvZXMgbm90XG4gIC8vIHVzZSBpbmRpcmVjdCBldmFsICh3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuXG4gIHR5cGVvZiBnbG9iYWwgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwgOlxuICB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiID8gd2luZG93IDpcbiAgdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDogdGhpc1xuKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gKGEsIGIpID0+IGIuZmlsdGVyKGl0ZW0gPT4gYS5pbmRleE9mKGl0ZW0pID09PSAtMSk7XG4iLCIvLyBBcnJheSBmaW5kXG4vLyBSZXR1cm5zIHRoZSBmaXJzdCBub24gdW5kZWZpbmVkIHJlc3BvbnNlXG4vLyBJZiB0aGUgcmVzcG9uc2UgaXMgKEJvb2xlYW4pIFRydWUsIHRoZW4gdGhlIHZhbHVlIG9mIHRoYXQgYXJyYXkgaXRlbSBpcyByZXR1cm5lZCBpbnN0ZWFkLi4uXG5tb2R1bGUuZXhwb3J0cyA9IChhcnIsIGNhbGxiYWNrLCB0aGlzQXJnID0gbnVsbCkgPT4ge1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuXHRcdGNvbnN0IHZhbHVlID0gY2FsbGJhY2suY2FsbCh0aGlzQXJnLCBhcnJbaV0pO1xuXHRcdGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHRydWUgPyBhcnJbaV0gOiB2YWx1ZTtcblx0XHR9XG5cdH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IG9iaiA9PiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvYmopO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBhID0+IHtcblx0aWYgKCFBcnJheS5pc0FycmF5KGEpKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblx0Ly8gSXMgdGhpcyB0aGUgZmlyc3QgbG9jYXRpb24gb2YgaXRlbVxuXHRyZXR1cm4gYS5maWx0ZXIoKGl0ZW0sIGluZGV4KSA9PiBhLmluZGV4T2YoaXRlbSkgPT09IGluZGV4KTtcbn07XG4iLCJjb25zdCBqc29uUGFyc2UgPSByZXF1aXJlKCcuLi8uLi9zdHJpbmcvanNvblBhcnNlLmpzJyk7XG5jb25zdCBleHRlbmQgPSByZXF1aXJlKCcuLi8uLi9vYmplY3QvZXh0ZW5kLmpzJyk7XG5cbi8vIFJldHVybiBoYW5kbGVyXG5tb2R1bGUuZXhwb3J0cyA9IFN0b3JhZ2U7XG5cbmZ1bmN0aW9uIFN0b3JhZ2UobWV0aG9kKSB7XG5cblx0dGhpcy5uYXRpdmUgPSBtZXRob2Q7XG5cblx0cmV0dXJuIGV4dGVuZCh0aGlzLmFwaS5iaW5kKHRoaXMpLCB0aGlzKTtcbn1cblxuU3RvcmFnZS5wcm90b3R5cGUuYXBpID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcblx0Ly8gcmVjdXJzaXZlXG5cdGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcblx0XHRmb3IgKGNvbnN0IHggaW4gbmFtZSkge1xuXHRcdFx0dGhpcy5hcGkoeCwgbmFtZVt4XSk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gTG9jYWwgc3RvcmFnZVxuXHRlbHNlIGlmICghbmFtZSkge1xuXHRcdHRocm93ICdhZ2VudC9zdG9yZSBtdXN0IGhhdmUgYSB2YWxpZCBuYW1lJztcblx0fVxuXHRlbHNlIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0SXRlbShuYW1lKTtcblx0fVxuXHRlbHNlIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdHRoaXMucmVtb3ZlSXRlbShuYW1lKTtcblx0fVxuXHRlbHNlIHtcblx0XHR0aGlzLnNldEl0ZW0obmFtZSwgdmFsdWUpO1xuXHR9XG59O1xuXG5TdG9yYWdlLnByb3RvdHlwZS5nZXRJdGVtID0gZnVuY3Rpb24obmFtZSkge1xuXHRyZXR1cm4ganNvblBhcnNlKHRoaXMubmF0aXZlLmdldEl0ZW0obmFtZSkpO1xufTtcblxuU3RvcmFnZS5wcm90b3R5cGUuc2V0SXRlbSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG5cdHRoaXMubmF0aXZlLnNldEl0ZW0obmFtZSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbn07XG5cblN0b3JhZ2UucHJvdG90eXBlLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbihuYW1lKSB7XG5cdHRoaXMubmF0aXZlLnJlbW92ZUl0ZW0obmFtZSk7XG59O1xuIiwiLy8gUHJvdmlkZSBhbiBBUEkgZm9yIHNldHRpbmcgYW5kIHJldHJpZXZpbmcgY29va2llc1xuY29uc3QgYXJyYXlGaW5kID0gcmVxdWlyZSgnLi4vLi4vYXJyYXkvZmluZC5qcycpO1xuY29uc3QgU3RvcmFnZSA9IHJlcXVpcmUoJy4vU3RvcmFnZS5qcycpO1xuXG4vLyBFbXVsYXRlIGxvY2FsU3RvcmFnZSB1c2luZyBjb29raWVzXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBTdG9yYWdlKHtcblx0Z2V0SXRlbTogbmFtZSA9PiB7XG5cdFx0Y29uc3Qga2V5ID0gYCR7bmFtZSB9PWA7XG5cdFx0Y29uc3QgbSA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xuXHRcdHJldHVybiBhcnJheUZpbmQobSwgaXRlbSA9PiB7XG5cdFx0XHRpdGVtID0gaXRlbS5yZXBsYWNlKC8oXlxccyt8XFxzKyQpLywgJycpO1xuXHRcdFx0aWYgKGl0ZW0gJiYgaXRlbS5pbmRleE9mKGtleSkgPT09IDApIHtcblx0XHRcdFx0cmV0dXJuIGl0ZW0uc3Vic3RyKGtleS5sZW5ndGgpO1xuXHRcdFx0fVxuXHRcdH0pIHx8IG51bGw7XG5cblx0fSxcblxuXHRzZXRJdGVtOiAobmFtZSwgdmFsdWUpID0+IHtcblx0XHRkb2N1bWVudC5jb29raWUgPSBgJHtuYW1lIH09JHsgdmFsdWV9YDtcblx0fSxcblxuXHRyZW1vdmVJdGVtOiBuYW1lID0+IHtcblx0XHRkb2N1bWVudC5jb29raWUgPSBgJHtuYW1lIH09OyBleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDEgR01UO2A7XG5cdH1cbn0pO1xuIiwiLy8gc2Vzc2lvblN0b3JhZ2Vcbi8vIFNoaW1tZWQgdXAgc2Vzc2lvblN0b3JhZ2VcblxuY29uc3Qgc2Vzc2lvblN0b3JhZ2UgPSByZXF1aXJlKCcuL3Nlc3Npb25TdG9yYWdlLmpzJyk7XG5jb25zdCBTdG9yYWdlID0gcmVxdWlyZSgnLi9TdG9yYWdlLmpzJyk7XG5cbi8vIFRlc3QgdGhlIGVudmlyb25tZW50XG50cnkge1xuXHRjb25zdCB0ZW1wID0gJ19fdHJpY2tzX3RlbXBfXyc7XG5cdC8vIEluIENocm9tZSB3aXRoIGNvb2tpZXMgYmxvY2tlZCwgY2FsbGluZyBsb2NhbFN0b3JhZ2UgdGhyb3dzIGFuIGVycm9yXG5cdGNvbnN0IHN0b3JhZ2UgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xuXHRzdG9yYWdlLnNldEl0ZW0odGVtcCwgMSk7XG5cdHN0b3JhZ2UucmVtb3ZlSXRlbSh0ZW1wKTtcblx0bW9kdWxlLmV4cG9ydHMgPSBuZXcgU3RvcmFnZShzdG9yYWdlKTtcblxufVxuY2F0Y2ggKGUpIHtcblx0bW9kdWxlLmV4cG9ydHMgPSBzZXNzaW9uU3RvcmFnZTtcbn1cbiIsIi8vIHNlc3Npb25TdG9yYWdlXG4vLyBTaGltbWVkIHVwIHNlc3Npb25TdG9yYWdlXG5cbmNvbnN0IGNvb2tpZVN0b3JhZ2UgPSByZXF1aXJlKCcuL2Nvb2tpZVN0b3JhZ2UuanMnKTtcbmNvbnN0IFN0b3JhZ2UgPSByZXF1aXJlKCcuL1N0b3JhZ2UuanMnKTtcblxuLy8gVGVzdCB0aGUgZW52aXJvbm1lbnRcbnRyeSB7XG5cdGNvbnN0IHRlbXAgPSAnX190cmlja3NfdGVtcF9fJztcblx0Ly8gSW4gQ2hyb21lIHdpdGggY29va2llcyBibG9ja2VkLCBjYWxsaW5nIGxvY2FsU3RvcmFnZSB0aHJvd3MgYW4gZXJyb3Jcblx0Y29uc3Qgc3RvcmFnZSA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZTtcblx0c3RvcmFnZS5zZXRJdGVtKHRlbXAsIDEpO1xuXHRzdG9yYWdlLnJlbW92ZUl0ZW0odGVtcCk7XG5cdG1vZHVsZS5leHBvcnRzID0gbmV3IFN0b3JhZ2Uoc3RvcmFnZSk7XG5cbn1cbmNhdGNoIChlKSB7XG5cdG1vZHVsZS5leHBvcnRzID0gY29va2llU3RvcmFnZTtcbn1cbiIsIi8vIFBvc3Rcbi8vIFNlbmQgaW5mb3JtYXRpb24gdG8gYSByZW1vdGUgbG9jYXRpb24gdXNpbmcgdGhlIHBvc3QgbWVjaGFuaXNtXG4vLyBAcGFyYW0gc3RyaW5nIHVyaSBwYXRoXG4vLyBAcGFyYW0gb2JqZWN0IGRhdGEsIGtleSB2YWx1ZSBkYXRhIHRvIHNlbmRcbi8vIEBwYXJhbSBmdW5jdGlvbiBjYWxsYmFjaywgZnVuY3Rpb24gdG8gZXhlY3V0ZSBpbiByZXNwb25zZVxuXG5jb25zdCBhcHBlbmQgPSByZXF1aXJlKCcuLi8uLi9kb20vYXBwZW5kLmpzJyk7XG5jb25zdCBhdHRyID0gcmVxdWlyZSgnLi4vLi4vZG9tL2F0dHIuanMnKTtcbmNvbnN0IGRvbUluc3RhbmNlID0gcmVxdWlyZSgnLi4vLi4vZG9tL2RvbUluc3RhbmNlLmpzJyk7XG5jb25zdCBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vLi4vZG9tL2NyZWF0ZUVsZW1lbnQuanMnKTtcbmNvbnN0IGdsb2JhbENhbGxiYWNrID0gcmVxdWlyZSgnLi4vLi4vZXZlbnRzL2dsb2JhbENhbGxiYWNrLmpzJyk7XG5jb25zdCB0b0FycmF5ID0gcmVxdWlyZSgnLi4vLi4vYXJyYXkvdG9BcnJheS5qcycpO1xuY29uc3QgaW5zdGFuY2VPZiA9IHJlcXVpcmUoJy4uLy4uL29iamVjdC9pbnN0YW5jZU9mLmpzJyk7XG5jb25zdCBvbiA9IHJlcXVpcmUoJy4uLy4uL2V2ZW50cy9vbi5qcycpO1xuY29uc3QgZW1pdCA9IHJlcXVpcmUoJy4uLy4uL2V2ZW50cy9lbWl0LmpzJyk7XG5jb25zdCBzZXRJbW1lZGlhdGUgPSByZXF1aXJlKCcuLi8uLi90aW1lL3NldEltbWVkaWF0ZS5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICh1cmwsIGRhdGEsIG9wdGlvbnMsIGNhbGxiYWNrLCBjYWxsYmFja19uYW1lLCB0aW1lb3V0ID0gNjAwMDApID0+IHtcblxuXHRsZXQgdGltZXI7XG5cdGxldCBib29sID0gMDtcblx0Y29uc3QgY2IgPSByID0+IHtcblx0XHRpZiAoIShib29sKyspKSB7XG5cdFx0XHRpZiAodGltZXIpIHtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVyKTtcblx0XHRcdFx0dGltZXIgPSBudWxsO1xuXHRcdFx0fVxuXHRcdFx0Y2FsbGJhY2socik7XG5cblx0XHRcdC8vIFRyaWdnZXIgb25zdWJtaXQgb24gdGhlIGZvcm0uXG5cdFx0XHQvLyBUeXBpY2FsbHkgdGhpcyBpc24ndCBhY3RpdmF0ZWQgdW50aWwgYWZ0ZXJ3YXJkc1xuXHRcdFx0ZW1pdChmb3JtLCAnc3VibWl0Jyk7XG5cblx0XHRcdC8vIFRoZSBzZXRJbW1lZGlhdGUgZml4ZXMgdGhlIHRlc3QgcnVubmVyIGluIHBoYW50b21qc1xuXHRcdFx0c2V0SW1tZWRpYXRlKCgpID0+IGZyYW1lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZnJhbWUpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHQvLyBXaGF0IGlzIHRoZSBuYW1lIG9mIHRoZSBjYWxsYmFjayB0byBjb250YWluXG5cdC8vIFdlJ2xsIGFsc28gdXNlIHRoaXMgdG8gbmFtZSB0aGUgaWZyYW1lXG5cdGNhbGxiYWNrX25hbWUgPSBnbG9iYWxDYWxsYmFjayhjYiwgY2FsbGJhY2tfbmFtZSk7XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vIENyZWF0ZSB0aGUgRlJBTUVcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0Y29uc3QgZnJhbWUgPSBjcmVhdGVGcmFtZShjYWxsYmFja19uYW1lKTtcblxuXHQvLyBPdmVycmlkZSBjYWxsYmFjayBtZWNoYW5pc20uIFRyaWdnZ2VyIGEgcmVzcG9uc2Ugb25sb2FkL29uZXJyb3Jcblx0aWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5jYWxsYmFja29ubG9hZCkge1xuXG5cdFx0Ly8gT25sb2FkIGlzIGJlaW5nIGZpcmVkIHR3aWNlXG5cdFx0ZnJhbWUub25sb2FkID0gY2IuYmluZChudWxsLCB7XG5cdFx0XHRyZXNwb25zZTogJ3Bvc3RlZCcsXG5cdFx0XHRtZXNzYWdlOiAnQ29udGVudCB3YXMgcG9zdGVkJ1xuXHRcdH0pO1xuXHR9XG5cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8gU2V0IGEgdGltZW91dFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRpZiAodGltZW91dCkge1xuXHRcdHRpbWVyID0gc2V0VGltZW91dChjYi5iaW5kKG51bGwsIG5ldyBFcnJvcigndGltZW91dCcpKSwgdGltZW91dCk7XG5cdH1cblxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLyBDcmVhdGUgYSBmb3JtXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdGNvbnN0IGZvcm0gPSBjcmVhdGVGb3JtRnJvbURhdGEoZGF0YSk7XG5cblx0Ly8gVGhlIFVSTCBpcyBhIGZ1bmN0aW9uIGZvciBzb21lIGNhc2VzIGFuZCBhcyBzdWNoXG5cdC8vIERldGVybWluZSBpdHMgdmFsdWUgd2l0aCBhIGNhbGxiYWNrIGNvbnRhaW5pbmcgdGhlIG5ldyBwYXJhbWV0ZXJzIG9mIHRoaXMgZnVuY3Rpb24uXG5cdHVybCA9IHVybC5yZXBsYWNlKG5ldyBSZWdFeHAoJz1cXFxcPygmfCQpJyksIGA9JHsgY2FsbGJhY2tfbmFtZSB9JDFgKTtcblxuXHQvLyBTZXQgdGhlIHRhcmdldCBvZiB0aGUgZm9ybVxuXHRhdHRyKGZvcm0sIHtcblx0XHRtZXRob2Q6ICdQT1NUJyxcblx0XHR0YXJnZXQ6IGNhbGxiYWNrX25hbWUsXG5cdFx0YWN0aW9uOiB1cmxcblx0fSk7XG5cblx0Zm9ybS50YXJnZXQgPSBjYWxsYmFja19uYW1lO1xuXG5cdC8vIFN1Ym1pdCB0aGUgZm9ybVxuXHQvLyBTb21lIHJlYXNvbiB0aGlzIG5lZWRzIHRvIGJlIG9mZnNldCBmcm9tIHRoZSBjdXJyZW50IHdpbmRvdyBleGVjdXRpb25cblx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0Zm9ybS5zdWJtaXQoKTtcblx0fSwgMTAwKTtcbn07XG5cblxuZnVuY3Rpb24gY3JlYXRlRnJhbWUoY2FsbGJhY2tfbmFtZSkge1xuXHRsZXQgZnJhbWU7XG5cblx0dHJ5IHtcblx0XHQvLyBJRTcgaGFjaywgb25seSBsZXRzIHVzIGRlZmluZSB0aGUgbmFtZSBoZXJlLCBub3QgbGF0ZXIuXG5cdFx0ZnJhbWUgPSBjcmVhdGVFbGVtZW50KGA8aWZyYW1lIG5hbWU9XCIkeyBjYWxsYmFja19uYW1lIH1cIj5gKTtcblx0fVxuXHRjYXRjaCAoZSkge1xuXHRcdGZyYW1lID0gY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG5cdH1cblxuXHQvLyBBdHRhY2ggdGhlIGZyYW1lIHdpdGggdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzIHRvIHRoZSBkb2N1bWVudCBib2R5LlxuXHRhdHRyKGZyYW1lLCB7XG5cdFx0bmFtZTogY2FsbGJhY2tfbmFtZSxcblx0XHRpZDogY2FsbGJhY2tfbmFtZSxcblx0XHRzdHlsZTogJ2Rpc3BsYXk6bm9uZTsnXG5cdH0pO1xuXG5cdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZnJhbWUpO1xuXG5cdHJldHVybiBmcmFtZTtcbn1cblxuXG5mdW5jdGlvbiBjcmVhdGVGb3JtRnJvbURhdGEoZGF0YSkge1xuXG5cdC8vIFRoaXMgaGFjayBuZWVkcyBhIGZvcm1cblx0bGV0IGZvcm0gPSBudWxsO1xuXHRjb25zdCByZWVuYWJsZUFmdGVyU3VibWl0ID0gW107XG5cdGxldCBpID0gMDtcblx0bGV0IHggPSBudWxsO1xuXG5cblx0Ly8gSWYgd2UgYXJlIGp1c3QgcG9zdGluZyBhIHNpbmdsZSBpdGVtXG5cdGlmIChkb21JbnN0YW5jZSgnaW5wdXQnLCBkYXRhKSkge1xuXHRcdC8vIEdldCB0aGUgcGFyZW50IGZvcm1cblx0XHRmb3JtID0gZGF0YS5mb3JtO1xuXG5cdFx0Ly8gTG9vcCB0aHJvdWdoIGFuZCBkaXNhYmxlIGFsbCBvZiBpdHMgc2libGluZ3Ncblx0XHR0b0FycmF5KGZvcm0uZWxlbWVudHMpLmZvckVhY2goaW5wdXQgPT4ge1xuXHRcdFx0aWYgKGlucHV0ICE9PSBkYXRhKSB7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIE1vdmUgdGhlIGZvY3VzIHRvIHRoZSBmb3JtXG5cdFx0ZGF0YSA9IGZvcm07XG5cdH1cblxuXHQvLyBQb3N0aW5nIGEgZm9ybVxuXHRpZiAoZG9tSW5zdGFuY2UoJ2Zvcm0nLCBkYXRhKSkge1xuXHRcdC8vIFRoaXMgaXMgYSBmb3JtIGVsZW1lbnRcblx0XHRmb3JtID0gZGF0YTtcblxuXHRcdC8vIERvZXMgdGhpcyBmb3JtIG5lZWQgdG8gYmUgYSBtdWx0aXBhcnQgZm9ybT9cblx0XHR0b0FycmF5KGZvcm0uZWxlbWVudHMpLmZvckVhY2goaW5wdXQgPT4ge1xuXHRcdFx0aWYgKCFpbnB1dC5kaXNhYmxlZCAmJiBpbnB1dC50eXBlID09PSAnZmlsZScpIHtcblx0XHRcdFx0Zm9ybS5lbmNvZGluZyA9IGZvcm0uZW5jdHlwZSA9ICdtdWx0aXBhcnQvZm9ybS1kYXRhJztcblx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCduYW1lJywgJ2ZpbGUnKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBJdHMgbm90IGEgZm9ybSBlbGVtZW50LFxuXHRcdC8vIFRoZXJlZm9yZSBpdCBtdXN0IGJlIGEgSlNPTiBvYmplY3Qgb2YgS2V5PT5WYWx1ZSBvciBLZXk9PkVsZW1lbnRcblx0XHQvLyBJZiBhbnlvbmUgb2YgdGhvc2UgdmFsdWVzIGFyZSBhIGlucHV0IHR5cGU9ZmlsZSB3ZSBzaGFsbCBzaGFsbCBpbnNlcnQgaXRzIHNpYmxpbmdzIGludG8gdGhlIGZvcm0gZm9yIHdoaWNoIGl0IGJlbG9uZ3MuXG5cdFx0Zm9yICh4IGluIGRhdGEpIGlmIChkYXRhLmhhc093blByb3BlcnR5KHgpKSB7XG5cdFx0XHQvLyBJcyB0aGlzIGFuIGlucHV0IEVsZW1lbnQ/XG5cdFx0XHRpZiAoZG9tSW5zdGFuY2UoJ2lucHV0JywgZGF0YVt4XSkgJiYgZGF0YVt4XS50eXBlID09PSAnZmlsZScpIHtcblx0XHRcdFx0Zm9ybSA9IGRhdGFbeF0uZm9ybTtcblx0XHRcdFx0Zm9ybS5lbmNvZGluZyA9IGZvcm0uZW5jdHlwZSA9ICdtdWx0aXBhcnQvZm9ybS1kYXRhJztcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBEbyBJZiB0aGVyZSBpcyBubyBkZWZpbmVkIGZvcm0gZWxlbWVudCwgbGV0cyBjcmVhdGUgb25lLlxuXHRcdGlmICghZm9ybSkge1xuXHRcdFx0Ly8gQnVpbGQgZm9ybVxuXHRcdFx0Zm9ybSA9IGFwcGVuZCgnZm9ybScpO1xuXG5cdFx0XHQvLyBCaW5kIHRoZSByZW1vdmFsIG9mIHRoZSBmb3JtXG5cdFx0XHRvbihmb3JtLCAnc3VibWl0JywgKCkgPT4ge1xuXHRcdFx0XHRzZXRJbW1lZGlhdGUoKCkgPT4ge1xuXHRcdFx0XHRcdGZvcm0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChmb3JtKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHQvLyBCaW5kIHRoZSBjbGVhbiB1cCBvZiB0aGUgZXhpc3RpbmcgZm9ybS5cblx0XHRcdG9uKGZvcm0sICdzdWJtaXQnLCAoKSA9PiB7XG5cdFx0XHRcdHNldEltbWVkaWF0ZSgoKSA9PiB7XG5cdFx0XHRcdFx0cmVlbmFibGVBZnRlclN1Ym1pdC5mb3JFYWNoKGlucHV0ID0+IHtcblx0XHRcdFx0XHRcdGlmIChpbnB1dCkge1xuXHRcdFx0XHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgZmFsc2UpO1xuXHRcdFx0XHRcdFx0XHRpbnB1dC5kaXNhYmxlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0Ly8gUmVzZXQsIGluY2FzZSB0aGlzIGlzIGNhbGxlZCBhZ2Fpbi5cblx0XHRcdFx0XHRyZWVuYWJsZUFmdGVyU3VibWl0Lmxlbmd0aCA9IDA7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0bGV0IGlucHV0O1xuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHRoZSBmb3JtIGlmIHRoZXkgZG9udCBleGlzdFxuXHRcdGZvciAoeCBpbiBkYXRhKSBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSh4KSkge1xuXG5cdFx0XHQvLyBJcyB0aGlzIGFuIGVsZW1lbnQ/XG5cdFx0XHRjb25zdCBlbCA9IChkb21JbnN0YW5jZSgnaW5wdXQnLCBkYXRhW3hdKSB8fCBkb21JbnN0YW5jZSgndGV4dEFyZWEnLCBkYXRhW3hdKSB8fCBkb21JbnN0YW5jZSgnc2VsZWN0JywgZGF0YVt4XSkpO1xuXG5cdFx0XHQvLyBJcyB0aGlzIG5vdCBhbiBpbnB1dCBlbGVtZW50LCBvciBvbmUgdGhhdCBleGlzdHMgb3V0c2lkZSB0aGUgZm9ybS5cblx0XHRcdGlmICghZWwgfHwgZGF0YVt4XS5mb3JtICE9PSBmb3JtKSB7XG5cblx0XHRcdFx0Ly8gRG9lcyBhbiBlbGVtZW50IGhhdmUgdGhlIHNhbWUgbmFtZT9cblx0XHRcdFx0bGV0IGlucHV0cyA9IGZvcm0uZWxlbWVudHNbeF07XG5cdFx0XHRcdGlmIChpbnB1dCkge1xuXHRcdFx0XHRcdC8vIFJlbW92ZSBpdC5cblx0XHRcdFx0XHRpZiAoIWluc3RhbmNlT2YoaW5wdXRzLCB3aW5kb3cuTm9kZUxpc3QpKSB7XG5cdFx0XHRcdFx0XHRpbnB1dHMgPSBbaW5wdXRzXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgaW5wdXRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRpbnB1dHNbaV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpbnB1dHNbaV0pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIGFuIGlucHV0IGVsZW1lbnRcblx0XHRcdFx0aW5wdXQgPSBhcHBlbmQoJ2lucHV0Jywge1xuXHRcdFx0XHRcdHR5cGU6ICdoaWRkZW4nLFxuXHRcdFx0XHRcdG5hbWU6IHhcblx0XHRcdFx0fSwgZm9ybSk7XG5cblx0XHRcdFx0Ly8gRG9lcyBpdCBoYXZlIGEgdmFsdWUgYXR0cmlidXRlP1xuXHRcdFx0XHRpZiAoZWwpIHtcblx0XHRcdFx0XHRpbnB1dC52YWx1ZSA9IGRhdGFbeF0udmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZiAoZG9tSW5zdGFuY2UobnVsbCwgZGF0YVt4XSkpIHtcblx0XHRcdFx0XHRpbnB1dC52YWx1ZSA9IGRhdGFbeF0uaW5uZXJIVE1MIHx8IGRhdGFbeF0uaW5uZXJUZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdGlucHV0LnZhbHVlID0gZGF0YVt4XTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIEl0IGlzIGFuIGVsZW1lbnQsIHdoaWNoIGV4aXN0cyB3aXRoaW4gdGhlIGZvcm0sIGJ1dCB0aGUgbmFtZSBpcyB3cm9uZ1xuXHRcdFx0ZWxzZSBpZiAoZWwgJiYgZGF0YVt4XS5uYW1lICE9PSB4KSB7XG5cdFx0XHRcdGRhdGFbeF0uc2V0QXR0cmlidXRlKCduYW1lJywgeCk7XG5cdFx0XHRcdGRhdGFbeF0ubmFtZSA9IHg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRGlzYWJsZSBlbGVtZW50cyBmcm9tIHdpdGhpbiB0aGUgZm9ybSBpZiB0aGV5IHdlcmVuJ3Qgc3BlY2lmaWVkXG5cdFx0dG9BcnJheShmb3JtLmVsZW1lbnRzKS5mb3JFYWNoKGlucHV0ID0+IHtcblxuXHRcdFx0Ly8gRG9lcyB0aGUgc2FtZSBuYW1lIGFuZCB2YWx1ZSBleGlzdCBpbiB0aGUgcGFyZW50XG5cdFx0XHRpZiAoIShpbnB1dC5uYW1lIGluIGRhdGEpICYmIGlucHV0LmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKSAhPT0gdHJ1ZSkge1xuXHRcdFx0XHQvLyBEaXNhYmxlXG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcblxuXHRcdFx0XHQvLyBBZGQgcmUtZW5hYmxlIHRvIGNhbGxiYWNrXG5cdFx0XHRcdHJlZW5hYmxlQWZ0ZXJTdWJtaXQucHVzaChpbnB1dCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gZm9ybTtcbn1cbiIsImNvbnN0IGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi8uLi9kb20vY3JlYXRlRWxlbWVudC5qcycpO1xuY29uc3QgY3JlYXRlRXZlbnQgPSByZXF1aXJlKCcuLi8uLi9ldmVudHMvY3JlYXRlRXZlbnQuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAodXJsLCBjYWxsYmFjaywgdGltZW91dCA9IDApID0+IHtcblxuXHQvLyBJbmplY3QgYSBzY3JpcHQgdGFnXG5cdGxldCBib29sID0gMDtcblx0bGV0IHRpbWVyO1xuXHRjb25zdCBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdLnBhcmVudE5vZGU7XG5cdGNvbnN0IGNiID0gZSA9PiB7XG5cdFx0aWYgKCEoYm9vbCsrKSAmJiBjYWxsYmFjaykge1xuXHRcdFx0Y2FsbGJhY2soZSk7XG5cdFx0fVxuXHRcdGlmICh0aW1lcikge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVyKTtcblx0XHR9XG5cdH07XG5cblx0Ly8gQWRkIHRpbWVvdXRcblx0aWYgKHRpbWVvdXQpIHtcblx0XHR0aW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdGNiKGNyZWF0ZUV2ZW50KCd0aW1lb3V0JykpO1xuXHRcdH0sIHRpbWVvdXQpO1xuXHR9XG5cblx0Ly8gQnVpbGQgc2NyaXB0IHRhZ1xuXHRjb25zdCBzY3JpcHQgPSBjcmVhdGVFbGVtZW50KCdzY3JpcHQnLCB7XG5cdFx0c3JjOiB1cmwsXG5cdFx0b25lcnJvcjogY2IsXG5cdFx0b25sb2FkOiBjYixcblx0XHRvbnJlYWR5c3RhdGVjaGFuZ2U6ICgpID0+IHtcblx0XHRcdGlmICgvbG9hZGVkfGNvbXBsZXRlL2kudGVzdChzY3JpcHQucmVhZHlTdGF0ZSkpIHtcblx0XHRcdFx0Y2IoY3JlYXRlRXZlbnQoJ2xvYWQnKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBTZXQgQXN5bmNcblx0c2NyaXB0LmFzeW5jID0gdHJ1ZTtcblxuXHQvLyBJbmplY3Qgc2NyaXB0IHRhZyBpbnRvIHRoZSBoZWFkIGVsZW1lbnRcblx0aGVhZC5pbnNlcnRCZWZvcmUoc2NyaXB0LCBoZWFkLmZpcnN0Q2hpbGQpO1xuXG5cdHJldHVybiBzY3JpcHQ7XG59O1xuIiwiLy8gSlNPTlBcbmNvbnN0IGdsb2JhbENhbGxiYWNrID0gcmVxdWlyZSgnLi4vLi4vZXZlbnRzL2dsb2JhbENhbGxiYWNrLmpzJyk7XG5jb25zdCBnZXRTY3JpcHQgPSByZXF1aXJlKCcuL2dldFNjcmlwdC5qcycpO1xuXG5jb25zdCBNQVRDSF9DQUxMQkFDS19QTEFDRUhPTERFUiA9IC89XFw/KCZ8JCkvO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICh1cmwsIGNhbGxiYWNrLCBjYWxsYmFja19uYW1lLCB0aW1lb3V0ID0gNjAwMDApID0+IHtcblxuXHQvLyBDaGFuZ2UgdGhlIG5hbWUgb2YgdGhlIGNhbGxiYWNrXG5cdGxldCByZXN1bHQ7XG5cblx0Ly8gQWRkIGNhbGxiYWNrIHRvIHRoZSB3aW5kb3cgb2JqZWN0XG5cdGNhbGxiYWNrX25hbWUgPSBnbG9iYWxDYWxsYmFjayhqc29uID0+IHtcblx0XHRyZXN1bHQgPSBqc29uO1xuXHRcdHJldHVybiB0cnVlOyAvLyB0aGlzIGVuc3VyZSB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyByZW1vdmVkXG5cdH0sIGNhbGxiYWNrX25hbWUpO1xuXG5cdC8vIFRoZSBVUkwgaXMgYSBmdW5jdGlvbiBmb3Igc29tZSBjYXNlcyBhbmQgYXMgc3VjaFxuXHQvLyBEZXRlcm1pbmUgaXRzIHZhbHVlIHdpdGggYSBjYWxsYmFjayBjb250YWluaW5nIHRoZSBuZXcgcGFyYW1ldGVycyBvZiB0aGlzIGZ1bmN0aW9uLlxuXHR1cmwgPSB1cmwucmVwbGFjZShNQVRDSF9DQUxMQkFDS19QTEFDRUhPTERFUiwgYD0keyBjYWxsYmFja19uYW1lIH0kMWApO1xuXG5cdGNvbnN0IHNjcmlwdCA9IGdldFNjcmlwdCh1cmwsICgpID0+IHtcblx0XHRjYWxsYmFjayhyZXN1bHQpO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdH0sIHRpbWVvdXQpO1xuXG5cdHJldHVybiBzY3JpcHQ7XG59O1xuIiwiLy8gUmVxdWVzdFxuLy8gTWFrZXMgYW4gUkVTVCByZXF1ZXN0IGdpdmVuIGFuIG9iamVjdCB3aGljaCBkZXNjcmliZXMgaG93IChha2EsIHhociwganNvbnAsIGZvcm1wb3N0KVxuY29uc3QganNvbnAgPSByZXF1aXJlKCcuL2pzb25wLmpzJyk7XG5jb25zdCB4aHIgPSByZXF1aXJlKCcuL3hoci5qcycpO1xuY29uc3QgZm9ybXBvc3QgPSByZXF1aXJlKCcuL2Zvcm1wb3N0LmpzJyk7XG5jb25zdCBTdXBwb3J0Q09SUyA9IHJlcXVpcmUoJy4uLy4uL3N1cHBvcnQvY29ycy5qcycpO1xuY29uc3QgZ2xvYmFsQ2FsbGJhY2sgPSByZXF1aXJlKCcuLi8uLi9ldmVudHMvZ2xvYmFsQ2FsbGJhY2suanMnKTtcbmNvbnN0IGNyZWF0ZVVybCA9IHJlcXVpcmUoJy4uLy4uL3N0cmluZy9jcmVhdGVVcmwuanMnKTtcbmNvbnN0IGV4dGVuZCA9IHJlcXVpcmUoJy4uLy4uL29iamVjdC9leHRlbmQuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAocCwgY2FsbGJhY2spID0+IHtcblxuXHRpZiAodHlwZW9mIHAgPT09ICdzdHJpbmcnKSB7XG5cdFx0cCA9IHtcblx0XHRcdHVybDogcFxuXHRcdH07XG5cdH1cblxuXHQvLyBVc2UgaW50ZXJjaGFuZ2VhYmx5XG5cdHAudXJsID0gcC51cmwgfHwgcC51cmk7XG5cblx0Ly8gU2V0IGRlZmF1bHRzXG5cdHAucXVlcnkgPSBwLnF1ZXJ5IHx8IHAucXMgfHwge307XG5cblx0Ly8gRGVmYXVsdCBtZXRob2Rcblx0cC5tZXRob2QgPSAocC5tZXRob2QgfHwgJ2dldCcpLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRGVmYXVsdCBwcm94eSByZXNwb25zZVxuXHRwLnByb3h5SGFuZGxlciA9IHAucHJveHlIYW5kbGVyIHx8ICgocCwgY2IpID0+IHtcblx0XHRjYigpO1xuXHR9KTtcblxuXHQvLyBDT1JTXG5cdGlmIChTdXBwb3J0Q09SUyAmJiAodHlwZW9mIChwLnhocikgPT09ICdmdW5jdGlvbicgPyBwLnhocihwLCBwLnF1ZXJ5KSA6IHAueGhyICE9PSBmYWxzZSkpIHtcblxuXHRcdC8vIFBhc3MgdGhlIHNlbGVjdGVkIHJlcXVlc3QgdGhyb3VnaCBhIHByb3h5XG5cdFx0cC5wcm94eUhhbmRsZXIocCwgKCkgPT4ge1xuXHRcdFx0Ly8gVGhlIGFnZW50IGFuZCB0aGUgcHJvdmlkZXIgc3VwcG9ydCBDT1JTXG5cdFx0XHRjb25zdCB1cmwgPSBjcmVhdGVVcmwocC51cmwsIHAucXVlcnkpO1xuXHRcdFx0Y29uc3QgeCA9IHhocihwLm1ldGhvZCwgdXJsLCBwLnJlc3BvbnNlVHlwZSwgcC5oZWFkZXJzLCBwLmRhdGEsIGNhbGxiYWNrKTtcblx0XHRcdHgub25wcm9ncmVzcyA9IHAub25wcm9ncmVzcyB8fCBudWxsO1xuXG5cdFx0XHQvLyBGZWF0dXJlIGRldGVjdCwgbm90IGF2YWlsYWJsZSBvbiBhbGwgaW1wbGVtZW50YXRpb25zIG9mIFhNTEh0dHBSZXF1ZXN0XG5cdFx0XHRpZiAoeC51cGxvYWQgJiYgcC5vbnVwbG9hZHByb2dyZXNzKSB7XG5cdFx0XHRcdHgudXBsb2FkLm9ucHJvZ3Jlc3MgPSBwLm9udXBsb2FkcHJvZ3Jlc3M7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBBcHBseSBhIGdsb2JhbENhbGxiYWNrXG5cdHAuY2FsbGJhY2tJRCA9IHAucXVlcnkuY2FsbGJhY2sgPSBnbG9iYWxDYWxsYmFjayhjYWxsYmFjayk7XG5cblx0Ly8gSlNPTlBcblx0aWYgKHAuanNvbnAgIT09IGZhbHNlKSB7XG5cblx0XHQvLyBDYWxsIHAuanNvbnAgaGFuZGxlclxuXHRcdGlmICh0eXBlb2YgKHAuanNvbnApID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHQvLyBGb3JtYXQgdGhlIHJlcXVlc3QgdmlhIEpTT05QXG5cdFx0XHRwLmpzb25wKHAsIHAucXVlcnkpO1xuXHRcdH1cblxuXHRcdC8vIExldHMgdXNlIEpTT05QIGlmIHRoZSBtZXRob2QgaXMgJ2dldCdcblx0XHRpZiAocC5tZXRob2QgPT09ICdnZXQnKSB7XG5cblx0XHRcdHAucHJveHlIYW5kbGVyKHAsICgpID0+IHtcblx0XHRcdFx0Y29uc3QgdXJsID0gY3JlYXRlVXJsKHAudXJsLCBleHRlbmQocC5xdWVyeSwgcC5kYXRhIHx8IHt9KSk7XG5cdFx0XHRcdGpzb25wKHVybCwgY2FsbGJhY2ssIHAuY2FsbGJhY2tJRCwgcC50aW1lb3V0KTtcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHR9XG5cblx0Ly8gT3RoZXJ3aXNlIHdlJ3JlIG9uIHRvIHRoZSBvbGQgc2Nob29sLCBpZnJhbWUgaGFja3MgYW5kIEpTT05QXG5cdGlmIChwLmZvcm0gIT09IGZhbHNlKSB7XG5cblx0XHQvLyBBZGQgc29tZSBhZGRpdGlvbmFsIHF1ZXJ5IHBhcmFtZXRlcnMgdG8gdGhlIFVSTFxuXHRcdC8vIFdlJ3JlIHByZXR0eSBzdHVmZmVkIGlmIHRoZSBlbmRwb2ludCBkb2Vzbid0IGxpa2UgdGhlc2Vcblx0XHRwLnF1ZXJ5LnJlZGlyZWN0X3VyaSA9IHAucmVkaXJlY3RfdXJpO1xuXHRcdHAucXVlcnkuc3RhdGUgPSBKU09OLnN0cmluZ2lmeSh7Y2FsbGJhY2s6IHAuY2FsbGJhY2tJRH0pO1xuXHRcdGRlbGV0ZSBwLnF1ZXJ5LmNhbGxiYWNrO1xuXG5cdFx0bGV0IG9wdHM7XG5cblx0XHRpZiAodHlwZW9mIChwLmZvcm0pID09PSAnZnVuY3Rpb24nKSB7XG5cblx0XHRcdC8vIEZvcm1hdCB0aGUgcmVxdWVzdFxuXHRcdFx0b3B0cyA9IHAuZm9ybShwLCBwLnF1ZXJ5KTtcblx0XHR9XG5cblx0XHRpZiAocC5tZXRob2QgPT09ICdwb3N0JyAmJiBvcHRzICE9PSBmYWxzZSkge1xuXG5cdFx0XHRwLnByb3h5SGFuZGxlcihwLCAoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHVybCA9IGNyZWF0ZVVybChwLnVybCwgcC5xdWVyeSk7XG5cdFx0XHRcdGZvcm1wb3N0KHVybCwgcC5kYXRhLCBvcHRzLCBjYWxsYmFjaywgcC5jYWxsYmFja0lELCBwLnRpbWVvdXQpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH1cblxuXHRjYWxsYmFjayh7ZXJyb3I6ICdpbnZhbGlkX3JlcXVlc3QnfSk7XG59O1xuIiwiLy8gWEhSOiB1c2VzIENPUlMgdG8gbWFrZSByZXF1ZXN0c1xuY29uc3QgaW5zdGFuY2VPZiA9IHJlcXVpcmUoJy4uLy4uL29iamVjdC9pbnN0YW5jZU9mLmpzJyk7XG5jb25zdCBleHRyYWN0ID0gcmVxdWlyZSgnLi4vLi4vc3RyaW5nL2V4dHJhY3QuanMnKTtcbmNvbnN0IGpzb25QYXJzZSA9IHJlcXVpcmUoJy4uLy4uL3N0cmluZy9qc29uUGFyc2UuanMnKTtcbmNvbnN0IHRyeUNhdGNoID0gcmVxdWlyZSgnLi4vLi4vb2JqZWN0L3RyeUNhdGNoLmpzJyk7XG5jb25zdCByZXdpcmUgPSByZXF1aXJlKCcuLi8uLi9vYmplY3QvcmV3aXJlLmpzJyk7XG5cbmNvbnN0IG1hdGNoX2hlYWRlcnMgPSAvKFthLXowLTlcXC1dKyk6XFxzKiguKik7Py9naTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXdpcmUoeGhyKTtcblxuZnVuY3Rpb24geGhyKG1ldGhvZCwgdXJsLCByZXNwb25zZVR5cGUsIGhlYWRlcnMsIGRhdGEsIGNhbGxiYWNrKSB7XG5cblx0Y29uc3QgciA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG5cdC8vIE1ha2UgaXQgQ0FQSVRBTFxuXHRtZXRob2QgPSBtZXRob2QudG9VcHBlckNhc2UoKTtcblxuXHQvLyBEZWZpbmUgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG5cdHIub25sb2FkID0gKCkgPT4ge1xuXHRcdC8vIFJlc3BvbnNlXG5cdFx0bGV0IHJlc3BvbnNlID0gci5yZXNwb25zZTtcblxuXHRcdC8vIFdhcyB0aGlzIHRleHRcblx0XHRpZiAoIXJlc3BvbnNlICYmIChyLnJlc3BvbnNlVHlwZSA9PT0gJycgfHwgci5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JykpIHtcblx0XHRcdHJlc3BvbnNlID0gci5yZXNwb25zZVRleHQ7XG5cdFx0fVxuXG5cdFx0Ly8gSXMgdGhpcyBqc29uP1xuXHRcdGlmICh0eXBlb2YocmVzcG9uc2UpID09PSAnc3RyaW5nJyAmJiByZXNwb25zZVR5cGUgPT09ICdqc29uJykge1xuXG5cdFx0XHQvLyBTZXQgdGhpcyB0byB0aGUganNvbiByZXNwb25zZVxuXHRcdFx0Ly8gRmFsbGJhY2sgaWYgdGhlIGJyb3dzZXIgZGlkIG5vdCBkZWZpbmVkIHJlc3BvbnNlSlNPTi4uLlxuXHRcdFx0cmVzcG9uc2UgPSByLnJlc3BvbnNlSlNPTiB8fCBqc29uUGFyc2Uoci5yZXNwb25zZVRleHQgfHwgci5yZXNwb25zZSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgaGVhZGVycyA9IGV4dHJhY3Qoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSwgbWF0Y2hfaGVhZGVycyk7XG5cdFx0aGVhZGVycy5zdGF0dXNDb2RlID0gci5zdGF0dXM7XG5cblx0XHRjYWxsYmFjayhyZXNwb25zZSwgaGVhZGVycyk7XG5cdH07XG5cblx0ci5vbmVycm9yID0gci5vbmxvYWQ7XG5cblx0Ly8gU2hvdWxkIHdlIGFkZCB0aGUgcXVlcnkgdG8gdGhlIFVSTD9cblx0aWYgKG1ldGhvZCA9PT0gJ0dFVCcgfHwgbWV0aG9kID09PSAnREVMRVRFJykge1xuXHRcdGRhdGEgPSBudWxsO1xuXHR9XG5cdGVsc2UgaWYgKGRhdGEgJiYgdHlwZW9mIChkYXRhKSAhPT0gJ3N0cmluZycgJiZcblx0XHQhaW5zdGFuY2VPZihkYXRhLCB3aW5kb3cuRm9ybURhdGEpICYmXG5cdFx0IWluc3RhbmNlT2YoZGF0YSwgd2luZG93LkZpbGUpICYmXG5cdFx0IWluc3RhbmNlT2YoZGF0YSwgd2luZG93LkJsb2IpKVx0e1xuXHRcdC8vIExvb3AgdGhyb3VnaCBhbmQgYWRkIGZvcm1EYXRhXG5cdFx0ZGF0YSA9IHRvRm9ybURhdGEoZGF0YSk7XG5cdH1cblxuXHQvLyBPcGVuIHRoZSBwYXRoLCBhc3luY1xuXHRyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuXG5cdC8vIFNldCByZXNwb25zZVR5cGUgaWYgc3VwcG9ydGVkXG5cdGlmICgncmVzcG9uc2VUeXBlJyBpbiByKSB7XG5cblx0XHR0cnlDYXRjaCgoKSA9PiB7XG5cdFx0XHQvLyBTZXR0aW5nIHRoaXMgdG8gYW4gdW5zdXBwb3J0ZWQgdmFsdWUgY2FuIHJlc3VsdCBpbiBhIFwiU1lOVEFYX0VSUjogRE9NIEV4Y2VwdGlvbiAxMlwiXG5cdFx0XHRyLnJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZTtcblx0XHR9KTtcblx0fVxuXHRlbHNlIGlmIChyZXNwb25zZVR5cGUgPT09ICdibG9iJykge1xuXHRcdHIub3ZlcnJpZGVNaW1lVHlwZSgndGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZCcpO1xuXHR9XG5cblx0Ly8gU2V0IGFueSBiZXNwb2tlIGhlYWRlcnNcblx0aWYgKGhlYWRlcnMpIHtcblx0XHRmb3IgKGNvbnN0IHggaW4gaGVhZGVycykge1xuXHRcdFx0ci5zZXRSZXF1ZXN0SGVhZGVyKHgsIGhlYWRlcnNbeF0pO1xuXHRcdH1cblx0fVxuXG5cdHIuc2VuZChkYXRhKTtcblxuXHRyZXR1cm4gcjtcbn1cblxuXG5mdW5jdGlvbiB0b0Zvcm1EYXRhKGRhdGEpIHtcblx0Y29uc3QgZiA9IG5ldyBGb3JtRGF0YSgpO1xuXHRmb3IgKGNvbnN0IHggaW4gZGF0YSkge1xuXHRcdGlmIChkYXRhLmhhc093blByb3BlcnR5KHgpKSB7XG5cdFx0XHRpZiAoaW5zdGFuY2VPZihkYXRhW3hdLCB3aW5kb3cuSFRNTElucHV0RWxlbWVudCkgJiYgJ2ZpbGVzJyBpbiBkYXRhW3hdKSB7XG5cdFx0XHRcdGlmIChkYXRhW3hdLmZpbGVzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRmLmFwcGVuZCh4LCBkYXRhW3hdLmZpbGVzWzBdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoaW5zdGFuY2VPZihkYXRhW3hdLCB3aW5kb3cuQmxvYikpIHtcblx0XHRcdFx0Zi5hcHBlbmQoeCwgZGF0YVt4XSwgZGF0YS5uYW1lKTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRmLmFwcGVuZCh4LCBkYXRhW3hdKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIGY7XG59XG4iLCJjb25zdCBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi9jcmVhdGVFbGVtZW50LmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKHRhZ05hbWUsIHByb3AsIHBhcmVudCA9IGRvY3VtZW50LmJvZHkpID0+IHtcblx0Y29uc3QgZWxtID0gY3JlYXRlRWxlbWVudCh0YWdOYW1lLCBwcm9wKTtcblx0cGFyZW50LmFwcGVuZENoaWxkKGVsbSk7XG5cdHJldHVybiBlbG07XG59O1xuIiwiY29uc3QgZWFjaCA9IHJlcXVpcmUoJy4vZWFjaC5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChlbGVtZW50cywgcHJvcHMpID0+XG5cdGVhY2goZWxlbWVudHMsIGVsZW1lbnQgPT4ge1xuXHRcdGZvciAoY29uc3QgeCBpbiBwcm9wcykge1xuXHRcdFx0Y29uc3QgcHJvcCA9IHByb3BzW3hdO1xuXHRcdFx0aWYgKHR5cGVvZiBwcm9wID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdGVsZW1lbnRbeF0gPSBwcm9wO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKHgsIHByb3ApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG4iLCJjb25zdCBhdHRyID0gcmVxdWlyZSgnLi9hdHRyLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKHRhZ05hbWUsIGF0dHJzKSA9PiB7XG5cdGNvbnN0IGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG5cdGF0dHIoZWxtLCBhdHRycyk7XG5cdHJldHVybiBlbG07XG59O1xuIiwiY29uc3QgaW5zdGFuY2VPZiA9IHJlcXVpcmUoJy4uL29iamVjdC9pbnN0YW5jZU9mLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKHR5cGUsIGRhdGEpID0+IHtcblx0Y29uc3QgdGVzdCA9IGBIVE1MJHsgKHR5cGUgfHwgJycpLnJlcGxhY2UoXG5cdFx0L15bYS16XS8sXG5cdFx0bSA9PiBtLnRvVXBwZXJDYXNlKClcblx0KX1FbGVtZW50YDtcblxuXHRpZiAoIWRhdGEpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAod2luZG93W3Rlc3RdKSB7XG5cdFx0cmV0dXJuIGluc3RhbmNlT2YoZGF0YSwgd2luZG93W3Rlc3RdKTtcblx0fVxuXHRlbHNlIGlmICh3aW5kb3cuRWxlbWVudCkge1xuXHRcdHJldHVybiBpbnN0YW5jZU9mKGRhdGEsIHdpbmRvdy5FbGVtZW50KSAmJiAoIXR5cGUgfHwgKGRhdGEudGFnTmFtZSAmJiBkYXRhLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gdHlwZSkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdHJldHVybiAoIShpbnN0YW5jZU9mKGRhdGEsIE9iamVjdCkgfHwgaW5zdGFuY2VPZihkYXRhLCBBcnJheSkgfHwgaW5zdGFuY2VPZihkYXRhLCBTdHJpbmcpIHx8IGluc3RhbmNlT2YoZGF0YSwgTnVtYmVyKSkgJiYgZGF0YS50YWdOYW1lICYmIGRhdGEudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSB0eXBlKTtcblx0fVxufTtcbiIsImNvbnN0IGlzRG9tID0gcmVxdWlyZSgnLi9pc0RvbS5qcycpO1xuY29uc3QgaW5zdGFuY2VPZiA9IHJlcXVpcmUoJy4uL29iamVjdC9pbnN0YW5jZU9mLmpzJyk7XG5jb25zdCB0b0FycmF5ID0gcmVxdWlyZSgnLi4vYXJyYXkvdG9BcnJheS5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChtYXRjaGVzLCBjYWxsYmFjayA9ICgpID0+IHt9KSA9PiB7XG5cblx0aWYgKGlzRG9tKG1hdGNoZXMpKSB7XG5cdFx0bWF0Y2hlcyA9IFttYXRjaGVzXTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YobWF0Y2hlcykgPT09ICdzdHJpbmcnKSB7XG5cdFx0bWF0Y2hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwobWF0Y2hlcyk7XG5cdH1cblxuXHRpZiAoIWluc3RhbmNlT2YobWF0Y2hlcywgQXJyYXkpKSB7XG5cdFx0bWF0Y2hlcyA9IHRvQXJyYXkobWF0Y2hlcyk7XG5cdH1cblxuXHRpZiAoY2FsbGJhY2spIHtcblx0XHRtYXRjaGVzLmZvckVhY2goY2FsbGJhY2spO1xuXHR9XG5cblx0cmV0dXJuIG1hdGNoZXM7XG59O1xuIiwiY29uc3QgYXBwZW5kID0gcmVxdWlyZSgnLi9hcHBlbmQuanMnKTtcbmNvbnN0IHBhcmFtID0gcmVxdWlyZSgnLi4vc3RyaW5nL3BhcmFtLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3JjID0+IHtcblxuXHRjb25zdCBzdHlsZSA9IHBhcmFtKHtcblx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJyxcblx0XHRsZWZ0OiAnLTEwMDBweCcsXG5cdFx0Ym90dG9tOiAwLFxuXHRcdGhlaWdodDogJzFweCcsXG5cdFx0d2lkdGg6ICcxcHgnXG5cdH0sICc7JywgJzonKTtcblxuXHRyZXR1cm4gYXBwZW5kKCdpZnJhbWUnLCB7c3JjLCBzdHlsZX0pO1xufTtcbiIsImNvbnN0IGluc3RhbmNlT2YgPSByZXF1aXJlKCcuLi9vYmplY3QvaW5zdGFuY2VPZi5qcycpO1xuXG5jb25zdCBfSFRNTEVsZW1lbnQgPSB0eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gSFRNTEVsZW1lbnQgOiBFbGVtZW50O1xuY29uc3QgX0hUTUxEb2N1bWVudCA9IHR5cGVvZiBIVE1MRG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gSFRNTERvY3VtZW50IDogRG9jdW1lbnQ7XG5jb25zdCBfV2luZG93ID0gd2luZG93LmNvbnN0cnVjdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRlc3QgPT5cblx0aW5zdGFuY2VPZih0ZXN0LCBfSFRNTEVsZW1lbnQpIHx8XG5cdFx0aW5zdGFuY2VPZih0ZXN0LCBfSFRNTERvY3VtZW50KSB8fFxuXHRcdGluc3RhbmNlT2YodGVzdCwgX1dpbmRvdylcbjtcbiIsIi8vIElFIGRvZXMgbm90IHN1cHBvcnQgYG5ldyBFdmVudCgpYFxuLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0d1aWRlL0V2ZW50cy9DcmVhdGluZ19hbmRfdHJpZ2dlcmluZ19ldmVudHMgZm9yIGRldGFpbHNcbmNvbnN0IGRpY3QgPSB7YnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZX07XG5cbmxldCBjcmVhdGVFdmVudCA9IChldmVudG5hbWUsIG9wdGlvbnMgPSBkaWN0KSA9PlxuXHRuZXcgRXZlbnQoZXZlbnRuYW1lLCBvcHRpb25zKTtcblxudHJ5IHtcblx0Y3JlYXRlRXZlbnQoJ3Rlc3QnKTtcbn1cbmNhdGNoIChlKSB7XG5cdGNyZWF0ZUV2ZW50ID0gKGV2ZW50bmFtZSwgb3B0aW9ucyA9IGRpY3QpID0+IHtcblx0XHRjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG5cdFx0ZS5pbml0RXZlbnQoZXZlbnRuYW1lLCAhIW9wdGlvbnMuYnViYmxlcywgISFvcHRpb25zLmNhbmNlbGFibGUpO1xuXHRcdHJldHVybiBlO1xuXHR9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUV2ZW50O1xuIiwiLy8gb24uanNcbi8vIExpc3RlbiB0byBldmVudHMsIHRoaXMgaXMgYSB3cmFwcGVyIGZvciBhZGRFdmVudExpc3RlbmVyXG5jb25zdCBlYWNoID0gcmVxdWlyZSgnLi4vZG9tL2VhY2guanMnKTtcbmNvbnN0IGNyZWF0ZUV2ZW50ID0gcmVxdWlyZSgnLi9jcmVhdGVFdmVudC5qcycpO1xuXG4vLyBSZXR1cm5cbm1vZHVsZS5leHBvcnRzID0gKGVsZW1lbnRzLCBldmVudG5hbWUpID0+IGVhY2goZWxlbWVudHMsIGVsID0+IGVsLmRpc3BhdGNoRXZlbnQoY3JlYXRlRXZlbnQoZXZlbnRuYW1lKSkpO1xuXG4iLCIvLyBHbG9iYWwgRXZlbnRzXG4vLyBBdHRhY2ggdGhlIGNhbGxiYWNrIHRvIHRoZSB3aW5kb3cgb2JqZWN0XG4vLyBSZXR1cm4gaXRzIHVuaXF1ZSByZWZlcmVuY2VcbmNvbnN0IHJhbmRvbSA9IHJlcXVpcmUoJy4uL3N0cmluZy9yYW5kb20uanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoY2FsbGJhY2ssIGd1aWQsIHByZWZpeCA9ICdfdHJpY2tzXycpID0+IHtcblxuXHQvLyBJZiB0aGUgZ3VpZCBoYXMgbm90IGJlZW4gc3VwcGxpZWQgdGhlbiBjcmVhdGUgYSBuZXcgb25lLlxuXHRndWlkID0gZ3VpZCB8fCBwcmVmaXggKyByYW5kb20oKTtcblxuXHQvLyBEZWZpbmUgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG5cdHdpbmRvd1tndWlkXSA9IGhhbmRsZS5iaW5kKG51bGwsIGd1aWQsIGNhbGxiYWNrKTtcblxuXHRyZXR1cm4gZ3VpZDtcbn07XG5cbmZ1bmN0aW9uIGhhbmRsZShndWlkLCBjYWxsYmFjaywgLi4uYXJncykge1xuXHRjYWxsYmFjayguLi5hcmdzKSAmJiBkZWxldGUgd2luZG93W2d1aWRdO1xufVxuIiwiLy8gb24uanNcbi8vIExpc3RlbiB0byBldmVudHMsIHRoaXMgaXMgYSB3cmFwcGVyIGZvciBhZGRFdmVudExpc3RlbmVyXG5cbmNvbnN0IGVhY2ggPSByZXF1aXJlKCcuLi9kb20vZWFjaC5qcycpO1xuY29uc3QgU0VQRVJBVE9SID0gL1tcXHNcXCxdKy87XG5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9FdmVudExpc3RlbmVyT3B0aW9ucy9ibG9iL2doLXBhZ2VzL2V4cGxhaW5lci5tZCNmZWF0dXJlLWRldGVjdGlvblxubGV0IHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xudHJ5IHtcblx0Y29uc3Qgb3B0cyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG5cdFx0Z2V0KCkge1xuXHRcdFx0c3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcblx0XHR9XG5cdH0pO1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdHMpO1xufVxuY2F0Y2ggKGUpIHtcblx0Ly8gQ29udGludWVcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IChlbGVtZW50cywgZXZlbnRuYW1lcywgY2FsbGJhY2ssIG9wdGlvbnMgPSBmYWxzZSkgPT4ge1xuXG5cdGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcgJiYgb3B0aW9ucy5wYXNzaXZlICYmICFzdXBwb3J0c1Bhc3NpdmUpIHtcblx0XHQvLyBPdmVycmlkZSB0aGUgcGFzc2l2ZSBtYXJrXG5cdFx0b3B0aW9ucyA9IGZhbHNlO1xuXHR9XG5cblx0ZXZlbnRuYW1lcyA9IGV2ZW50bmFtZXMuc3BsaXQoU0VQRVJBVE9SKTtcblx0cmV0dXJuIGVhY2goZWxlbWVudHMsIGVsID0+IGV2ZW50bmFtZXMuZm9yRWFjaChldmVudG5hbWUgPT4gZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudG5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKSkpO1xufTtcbiIsIi8vIE1ha2VzIGl0IGVhc2llciB0byBhc3NpZ24gcGFyYW1ldGVycywgd2hlcmUgc29tZSBhcmUgb3B0aW9uYWxcbi8vIEBwYXJhbSBvIG9iamVjdFxuLy8gQHBhcmFtIGEgYXJndW1lbnRzXG5tb2R1bGUuZXhwb3J0cyA9IChvLCBhcmdzKSA9PiB7XG5cblx0Y29uc3QgcCA9IHt9O1xuXHRsZXQgaSA9IDA7XG5cdGxldCB0ID0gbnVsbDtcblx0bGV0IHggPSBudWxsO1xuXG5cdC8vICd4JyBpcyB0aGUgZmlyc3Qga2V5IGluIHRoZSBsaXN0IG9mIG9iamVjdCBwYXJhbWV0ZXJzXG5cdGZvciAoeCBpbiBvKSB7XG5cdFx0aWYgKG8uaGFzT3duUHJvcGVydHkoeCkpIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFBhc3NpbmcgaW4gaGFzaCBvYmplY3Qgb2YgYXJndW1lbnRzP1xuXHQvLyBXaGVyZSB0aGUgZmlyc3QgYXJndW1lbnQgY2FuJ3QgYmUgYW4gb2JqZWN0XG5cdGlmICgoYXJncy5sZW5ndGggPT09IDEpICYmICh0eXBlb2YgKGFyZ3NbMF0pID09PSAnb2JqZWN0JykgJiYgb1t4XSAhPT0gJ28hJykge1xuXG5cdFx0Ly8gQ291bGQgdGhpcyBvYmplY3Qgc3RpbGwgYmVsb25nIHRvIGEgcHJvcGVydHk/XG5cdFx0Ly8gQ2hlY2sgdGhlIG9iamVjdCBrZXlzIGlmIHRoZXkgbWF0Y2ggYW55IG9mIHRoZSBwcm9wZXJ0eSBrZXlzXG5cdFx0Zm9yICh4IGluIGFyZ3NbMF0pIHtcblx0XHRcdGlmIChvLmhhc093blByb3BlcnR5KHgpKSB7XG5cdFx0XHRcdC8vIERvZXMgdGhpcyBrZXkgZXhpc3QgaW4gdGhlIHByb3BlcnR5IGxpc3Q/XG5cdFx0XHRcdGlmICh4IGluIG8pIHtcblx0XHRcdFx0XHQvLyBZZXMgdGhpcyBrZXkgZG9lcyBleGlzdCBzbyBpdHMgbW9zdCBsaWtlbHkgdGhpcyBmdW5jdGlvbiBoYXMgYmVlbiBpbnZva2VkIHdpdGggYW4gb2JqZWN0IHBhcmFtZXRlclxuXHRcdFx0XHRcdC8vIFJldHVybiBmaXJzdCBhcmd1bWVudCBhcyB0aGUgaGFzaCBvZiBhbGwgYXJndW1lbnRzXG5cdFx0XHRcdFx0cmV0dXJuIGFyZ3NbMF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBFbHNlIGxvb3AgdGhyb3VnaCBhbmQgYWNjb3VudCBmb3IgdGhlIG1pc3Npbmcgb25lcy5cblx0Zm9yICh4IGluIG8pIHtcblx0XHRpZiAoby5oYXNPd25Qcm9wZXJ0eSh4KSkge1xuXG5cdFx0XHR0ID0gdHlwZW9mIChhcmdzW2ldKTtcblxuXHRcdFx0aWYgKCh0eXBlb2YgKG9beF0pID09PSAnZnVuY3Rpb24nICYmIG9beF0udGVzdChhcmdzW2ldKSkgfHwgKHR5cGVvZiAob1t4XSkgPT09ICdzdHJpbmcnICYmIChcblx0XHRcdFx0KG9beF0uaW5kZXhPZigncycpID4gLTEgJiYgdCA9PT0gJ3N0cmluZycpIHx8XG5cdFx0XHRcdChvW3hdLmluZGV4T2YoJ28nKSA+IC0xICYmIHQgPT09ICdvYmplY3QnKSB8fFxuXHRcdFx0XHQob1t4XS5pbmRleE9mKCdpJykgPiAtMSAmJiB0ID09PSAnbnVtYmVyJykgfHxcblx0XHRcdFx0KG9beF0uaW5kZXhPZignYScpID4gLTEgJiYgdCA9PT0gJ29iamVjdCcpIHx8XG5cdFx0XHRcdChvW3hdLmluZGV4T2YoJ2YnKSA+IC0xICYmIHQgPT09ICdmdW5jdGlvbicpXG5cdFx0XHRcdCkpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRwW3hdID0gYXJnc1tpKytdO1xuXHRcdFx0fVxuXG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgKG9beF0pID09PSAnc3RyaW5nJyAmJiBvW3hdLmluZGV4T2YoJyEnKSA+IC0xKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcDtcbn07XG4iLCJjb25zdCBpc0JpbmFyeSA9IHJlcXVpcmUoJy4vaXNCaW5hcnkuanMnKTtcblxuLy8gQ3JlYXRlIGEgY2xvbmUgb2YgYW4gb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNsb25lKG9iaikge1xuXHQvLyBEb2VzIG5vdCBjbG9uZSBET00gZWxlbWVudHMsIG5vciBCaW5hcnkgZGF0YSwgZS5nLiBCbG9icywgRmlsZWxpc3RzXG5cdGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIChvYmopICE9PSAnb2JqZWN0JyB8fCBvYmogaW5zdGFuY2VvZiBEYXRlIHx8ICdub2RlTmFtZScgaW4gb2JqIHx8IGlzQmluYXJ5KG9iaikgfHwgKHR5cGVvZiBGb3JtRGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmogaW5zdGFuY2VvZiBGb3JtRGF0YSkpIHtcblx0XHRyZXR1cm4gb2JqO1xuXHR9XG5cblx0aWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuXHRcdC8vIENsb25lIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXlcblx0XHRyZXR1cm4gb2JqLm1hcChjbG9uZS5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdC8vIEJ1dCBkb2VzIGNsb25lIGV2ZXJ5dGhpbmcgZWxzZS5cblx0Y29uc3QgX2Nsb25lID0ge307XG5cdGZvciAoY29uc3QgeCBpbiBvYmopIHtcblx0XHRfY2xvbmVbeF0gPSBjbG9uZShvYmpbeF0pO1xuXHR9XG5cblx0cmV0dXJuIF9jbG9uZTtcbn07XG4iLCIvLyBSZXR1cm4gYWxsIHRoZSBwcm9wZXJ0aWVzIGluICdhJyB3aGljaCBhcmVuJ3QgaW4gJ2InO1xubW9kdWxlLmV4cG9ydHMgPSAoYSwgYikgPT4ge1xuXHRpZiAoYSB8fCAhYikge1xuXHRcdGNvbnN0IHIgPSB7fTtcblx0XHRmb3IgKGNvbnN0IHggaW4gYSkge1xuXHRcdFx0Ly8gaXMgdGhpcyBhIGN1c3RvbSBwcm9wZXJ0eT9cblx0XHRcdGlmICghKHggaW4gYikpIHtcblx0XHRcdFx0clt4XSA9IGFbeF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiByO1xuXHR9XG5cdHJldHVybiBhO1xufTtcbiIsImNvbnN0IGluc3RhbmNlT2YgPSByZXF1aXJlKCcuL2luc3RhbmNlT2YuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHRlbmQociwgLi4uYXJncykge1xuXHRhcmdzLmZvckVhY2gobyA9PiB7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkocikgJiYgQXJyYXkuaXNBcnJheShvKSkge1xuXHRcdFx0QXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkociwgbyk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGluc3RhbmNlT2YociwgT2JqZWN0KSAmJiBpbnN0YW5jZU9mKG8sIE9iamVjdCkgJiYgciAhPT0gbykge1xuXHRcdFx0Zm9yIChjb25zdCB4IGluIG8pIHtcblx0XHRcdFx0clt4XSA9IGV4dGVuZChyW3hdLCBvW3hdKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvKSkge1xuXHRcdFx0Ly8gQ2xvbmUgaXRcblx0XHRcdHIgPSBvLnNsaWNlKDApO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHIgPSBvO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiByO1xufTtcbiIsImNvbnN0IGlzQmluYXJ5ID0gcmVxdWlyZSgnLi9pc0JpbmFyeS5qcycpO1xuXG4vLyBTb21lIG9mIHRoZSBwcm92aWRlcnMgcmVxdWlyZSB0aGF0IG9ubHkgbXVsdGlwYXJ0IGlzIHVzZWQgd2l0aCBub24tYmluYXJ5IGZvcm1zLlxuLy8gVGhpcyBmdW5jdGlvbiBjaGVja3Mgd2hldGhlciB0aGUgZm9ybSBjb250YWlucyBiaW5hcnkgZGF0YVxubW9kdWxlLmV4cG9ydHMgPSBkYXRhID0+IHtcblx0Zm9yIChjb25zdCB4IGluIGRhdGEpIHtcblx0XHRpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSh4KSkge1xuXHRcdFx0aWYgKGlzQmluYXJ5KGRhdGFbeF0pKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmYWxzZTtcbn07XG5cbiIsIm1vZHVsZS5leHBvcnRzID0gKHRlc3QsIHJvb3QpID0+IHJvb3QgJiYgdGVzdCBpbnN0YW5jZW9mIHJvb3Q7XG4iLCJjb25zdCBpbnN0YW5jZU9mID0gcmVxdWlyZSgnLi9pbnN0YW5jZU9mLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGF0YSA9PlxuXHRpbnN0YW5jZU9mKGRhdGEsIE9iamVjdCkgJiYgKFxuXHQoaW5zdGFuY2VPZihkYXRhLCB0eXBlb2YgSFRNTElucHV0RWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBIVE1MSW5wdXRFbGVtZW50IDogdW5kZWZpbmVkKSAmJiBkYXRhLnR5cGUgPT09ICdmaWxlJykgfHxcblx0KGluc3RhbmNlT2YoZGF0YSwgdHlwZW9mIEhUTUxJbnB1dCAhPT0gJ3VuZGVmaW5lZCcgPyBIVE1MSW5wdXQgOiB1bmRlZmluZWQpICYmIGRhdGEudHlwZSA9PT0gJ2ZpbGUnKSB8fFxuXHRpbnN0YW5jZU9mKGRhdGEsIHR5cGVvZiBGaWxlTGlzdCAhPT0gJ3VuZGVmaW5lZCcgPyBGaWxlTGlzdCA6IHVuZGVmaW5lZCkgfHxcblx0aW5zdGFuY2VPZihkYXRhLCB0eXBlb2YgRmlsZSAhPT0gJ3VuZGVmaW5lZCcgPyBGaWxlIDogdW5kZWZpbmVkKSB8fFxuXHRpbnN0YW5jZU9mKGRhdGEsIHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyA/IEJsb2IgOiB1bmRlZmluZWQpKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gb2JqID0+IHtcblxuXHQvLyBTY2FsYXJcblx0aWYgKCFvYmopXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0Ly8gQXJyYXlcblx0aWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuXHRcdHJldHVybiAhb2JqLmxlbmd0aDtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgKG9iaikgPT09ICdvYmplY3QnKSB7XG5cdFx0Ly8gT2JqZWN0XG5cdFx0Zm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG5cdFx0XHRpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcbiIsIi8vIEV4dGVuZCBhbiBvYmplY3RcbmNvbnN0IGV4dGVuZCA9IHJlcXVpcmUoJy4vZXh0ZW5kLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKC4uLmFyZ3MpID0+IHtcblx0YXJncy51bnNoaWZ0KHt9KTtcblx0cmV0dXJuIGV4dGVuZCguLi5hcmdzKTtcbn07XG4iLCIvLyBQdWJzdWIgZXh0ZW5zaW9uXG4vLyBBIGNvbnRydWN0b3Igc3VwZXJjbGFzcyBmb3IgYWRkaW5nIGV2ZW50IG1lbnRob2RzLCBvbiwgb2ZmLCBlbWl0LlxuY29uc3Qgc2V0SW1tZWRpYXRlID0gcmVxdWlyZSgnLi4vdGltZS9zZXRJbW1lZGlhdGUuanMnKTtcblxuY29uc3Qgc2VwYXJhdG9yID0gL1tcXHNcXCxdKy87XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cblx0Ly8gSWYgdGhpcyBkb2Vzbid0IHN1cHBvcnQgZ2V0UHJvdG90eXBlIHRoZW4gd2UgY2FuJ3QgZ2V0IHByb3RvdHlwZS5ldmVudHMgb2YgdGhlIHBhcmVudFxuXHQvLyBTbyBsZXRzIGdldCB0aGUgY3VycmVudCBpbnN0YW5jZSBldmVudHMsIGFuZCBhZGQgdGhvc2UgdG8gYSBwYXJlbnQgcHJvcGVydHlcblx0dGhpcy5wYXJlbnQgPSB7XG5cdFx0ZXZlbnRzOiB0aGlzLmV2ZW50cyxcblx0XHRmaW5kRXZlbnRzOiB0aGlzLmZpbmRFdmVudHMsXG5cdFx0cGFyZW50OiB0aGlzLnBhcmVudCxcblx0XHR1dGlsczogdGhpcy51dGlsc1xuXHR9O1xuXG5cdHRoaXMuZXZlbnRzID0ge307XG5cblx0dGhpcy5vZmYgPSBvZmY7XG5cdHRoaXMub24gPSBvbjtcblx0dGhpcy5lbWl0ID0gZW1pdDtcblx0dGhpcy5lbWl0QWZ0ZXIgPSBlbWl0QWZ0ZXI7XG5cdHRoaXMuZmluZEV2ZW50cyA9IGZpbmRFdmVudHM7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cbi8vIE9uLCBzdWJzY3JpYmUgdG8gZXZlbnRzXG4vLyBAcGFyYW0gZXZ0ICAgc3RyaW5nXG4vLyBAcGFyYW0gY2FsbGJhY2sgIGZ1bmN0aW9uXG5mdW5jdGlvbiBvbihldnQsIGNhbGxiYWNrKSB7XG5cblx0aWYgKGNhbGxiYWNrICYmIHR5cGVvZiAoY2FsbGJhY2spID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0ZXZ0LnNwbGl0KHNlcGFyYXRvcikuZm9yRWFjaChuYW1lID0+IHtcblx0XHRcdC8vIEhhcyB0aGlzIGV2ZW50IGFscmVhZHkgYmVlbiBmaXJlZCBvbiB0aGlzIGluc3RhbmNlP1xuXHRcdFx0dGhpcy5ldmVudHNbbmFtZV0gPSBbY2FsbGJhY2tdLmNvbmNhdCh0aGlzLmV2ZW50c1tuYW1lXSB8fCBbXSk7XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn1cblxuXG4vLyBPZmYsIHVuc3Vic2NyaWJlIHRvIGV2ZW50c1xuLy8gQHBhcmFtIGV2dCAgIHN0cmluZ1xuLy8gQHBhcmFtIGNhbGxiYWNrICBmdW5jdGlvblxuZnVuY3Rpb24gb2ZmKGV2dCwgY2FsbGJhY2spIHtcblxuXHR0aGlzLmZpbmRFdmVudHMoZXZ0LCBmdW5jdGlvbihuYW1lLCBpbmRleCkge1xuXHRcdGlmICghY2FsbGJhY2sgfHwgdGhpcy5ldmVudHNbbmFtZV1baW5kZXhdID09PSBjYWxsYmFjaykge1xuXHRcdFx0dGhpcy5ldmVudHNbbmFtZV1baW5kZXhdID0gbnVsbDtcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiB0aGlzO1xufVxuXG4vLyBFbWl0XG4vLyBUcmlnZ2VycyBhbnkgc3Vic2NyaWJlZCBldmVudHNcbmZ1bmN0aW9uIGVtaXQoZXZ0LCAuLi5hcmdzKSB7XG5cblx0Ly8gQXBwZW5kIHRoZSBldmVudG5hbWUgdG8gdGhlIGVuZCBvZiB0aGUgYXJndW1lbnRzXG5cdGFyZ3MucHVzaChldnQpO1xuXG5cdC8vIEhhbmRsZXJcblx0Y29uc3QgaGFuZGxlciA9IGZ1bmN0aW9uKG5hbWUsIGluZGV4KSB7XG5cblx0XHQvLyBSZXBsYWNlIHRoZSBsYXN0IHByb3BlcnR5IHdpdGggdGhlIGV2ZW50IG5hbWVcblx0XHRhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPSAobmFtZSA9PT0gJyonID8gZXZ0IDogbmFtZSk7XG5cblx0XHQvLyBUcmlnZ2VyXG5cdFx0dGhpcy5ldmVudHNbbmFtZV1baW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHR9O1xuXG5cdC8vIEZpbmQgdGhlIGNhbGxiYWNrcyB3aGljaCBtYXRjaCB0aGUgY29uZGl0aW9uIGFuZCBjYWxsXG5cdGxldCBfdGhpcyA9IHRoaXM7XG5cdHdoaWxlIChfdGhpcyAmJiBfdGhpcy5maW5kRXZlbnRzKSB7XG5cblx0XHQvLyBGaW5kIGV2ZW50cyB3aGljaCBtYXRjaFxuXHRcdF90aGlzLmZpbmRFdmVudHMoYCR7ZXZ0IH0sKmAsIGhhbmRsZXIpO1xuXHRcdF90aGlzID0gX3RoaXMucGFyZW50O1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59XG5cbi8vIEVhc3kgZnVuY3Rpb25zXG5mdW5jdGlvbiBlbWl0QWZ0ZXIoLi4uYXJncykge1xuXG5cdHNldEltbWVkaWF0ZSgoKSA9PiB7XG5cdFx0dGhpcy5lbWl0KC4uLmFyZ3MpO1xuXHR9KTtcblxuXHRyZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZmluZEV2ZW50cyhldnQsIGNhbGxiYWNrKSB7XG5cblx0Y29uc3QgYSA9IGV2dC5zcGxpdChzZXBhcmF0b3IpO1xuXG5cdGZvciAoY29uc3QgbmFtZSBpbiB0aGlzLmV2ZW50cykge1xuXHRcdGlmICh0aGlzLmV2ZW50cy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuXG5cdFx0XHRpZiAoYS5pbmRleE9mKG5hbWUpID4gLTEpIHtcblxuXHRcdFx0XHR0aGlzLmV2ZW50c1tuYW1lXS5mb3JFYWNoKHRyaWdnZXJDYWxsYmFjay5iaW5kKHRoaXMsIG5hbWUsIGNhbGxiYWNrKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXJDYWxsYmFjayhuYW1lLCBjYWxsYmFjaywgaGFuZGxlciwgaSkge1xuXHQvLyBEb2VzIHRoZSBldmVudCBoYW5kbGVyIGV4aXN0P1xuXHRpZiAoaGFuZGxlcikge1xuXHRcdC8vIEVtaXQgb24gdGhlIGxvY2FsIGluc3RhbmNlIG9mIHRoaXNcblx0XHRjYWxsYmFjay5jYWxsKHRoaXMsIG5hbWUsIGkpO1xuXHR9XG59XG4iLCIvLyBSZXdpcmUgZnVuY3Rpb25zXG5tb2R1bGUuZXhwb3J0cyA9IGZuID0+IHtcblx0Y29uc3QgZiA9ICguLi5hcmdzKSA9PiBmLmZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuXHRmLmZuID0gZm47XG5cdHJldHVybiBmO1xufTtcbiIsIi8vIENvbnZlcnQgRGF0YS1VUkkgdG8gQmxvYiBzdHJpbmdcblxuY29uc3QgcmVnID0gL15kYXRhXFw6KFteOyxdKyhcXDtjaGFyc2V0PVteOyxdKyk/KShcXDtiYXNlNjQpPywvaTtcblxubW9kdWxlLmV4cG9ydHMgPSBkYXRhVVJJID0+IHtcblx0Y29uc3QgbSA9IGRhdGFVUkkubWF0Y2gocmVnKTtcblx0aWYgKCFtKSB7XG5cdFx0cmV0dXJuIGRhdGFVUkk7XG5cdH1cblxuXHRjb25zdCBiaW5hcnkgPSBhdG9iKGRhdGFVUkkucmVwbGFjZShyZWcsICcnKSk7XG5cdGNvbnN0IGxlbiA9IGJpbmFyeS5sZW5ndGg7XG5cdGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGxlbik7XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdGFycltpXSA9IGJpbmFyeS5jaGFyQ29kZUF0KGkpO1xuXHR9XG5cblx0cmV0dXJuIG5ldyBCbG9iKFthcnJdLCB7dHlwZTogbVsxXX0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZm4gPT4ge1xuXHR0cnkge1xuXHRcdHJldHVybiBmbi5jYWxsKG51bGwpO1xuXHR9XG5cdGNhdGNoIChlKSB7XG5cdFx0Ly8gQ29udGludWVcblx0fVxufTtcbiIsImNvbnN0IHF1ZXJ5c3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9xdWVyeXN0cmluZ2lmeS5qcycpO1xuY29uc3QgaXNFbXB0eSA9IHJlcXVpcmUoJy4uL29iamVjdC9pc0VtcHR5LmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKHVybCwgcGFyYW1zLCBmb3JtYXRGdW5jdGlvbikgPT4ge1xuXG5cdGxldCByZWc7XG5cblx0aWYgKHBhcmFtcykge1xuXHRcdC8vIFNldCBkZWZhdWx0IGZvcm1hdHRpbmcgZnVuY3Rpb25cblx0XHRmb3JtYXRGdW5jdGlvbiA9IGZvcm1hdEZ1bmN0aW9uIHx8IGVuY29kZVVSSUNvbXBvbmVudDtcblxuXHRcdC8vIE92ZXJyaWRlIHRoZSBpdGVtcyBpbiB0aGUgVVJMIHdoaWNoIGFscmVhZHkgZXhpc3Rcblx0XHRmb3IgKGNvbnN0IHggaW4gcGFyYW1zKSB7XG5cdFx0XHRjb25zdCBzdHIgPSBgKFtcXFxcP1xcXFwmXSkkeyB4IH09W15cXFxcJl0qYDtcblx0XHRcdHJlZyA9IG5ldyBSZWdFeHAoc3RyKTtcblx0XHRcdGlmICh1cmwubWF0Y2gocmVnKSkge1xuXHRcdFx0XHR1cmwgPSB1cmwucmVwbGFjZShyZWcsIGAkMSR7IHggfT0keyBmb3JtYXRGdW5jdGlvbihwYXJhbXNbeF0pfWApO1xuXHRcdFx0XHRkZWxldGUgcGFyYW1zW3hdO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICghaXNFbXB0eShwYXJhbXMpKSB7XG5cdFx0cmV0dXJuIHVybCArICh1cmwuaW5kZXhPZignPycpID4gLTEgPyAnJicgOiAnPycpICsgcXVlcnlzdHJpbmdpZnkocGFyYW1zLCBmb3JtYXRGdW5jdGlvbik7XG5cdH1cblxuXHRyZXR1cm4gdXJsO1xufTtcbiIsIi8vIEV4dHJhY3Rcbi8vIEV4dHJhY3QgdGhlIHBhcmFtZXRlcnMgb2YgYW4gVVJMIHN0cmluZ1xuLy8gQHBhcmFtIHN0cmluZyBzLCBzdHJpbmcgdG8gZGVjb2RlXG5cbm1vZHVsZS5leHBvcnRzID0gKHN0ciwgbWF0Y2hfcGFyYW1zLCBmb3JtYXRGdW5jdGlvbiA9IHggPT4geCkgPT4ge1xuXHRjb25zdCBhID0ge307XG5cdGxldCBtO1xuXHR3aGlsZSAoKG0gPSBtYXRjaF9wYXJhbXMuZXhlYyhzdHIpKSkge1xuXHRcdGFbbVsxXV0gPSBmb3JtYXRGdW5jdGlvbihtWzJdKTtcblx0fVxuXHRyZXR1cm4gYTtcbn07XG4iLCJjb25zdCB0cnlDYXRjaCA9IHJlcXVpcmUoJy4uL29iamVjdC90cnlDYXRjaC5qcycpO1xubW9kdWxlLmV4cG9ydHMgPSBzdHIgPT4gdHJ5Q2F0Y2goKCkgPT4gSlNPTi5wYXJzZShzdHIpKTtcbiIsIi8vIFBhcmFtXG4vLyBFeHBsb2RlL2VuY29kZSB0aGUgcGFyYW1ldGVycyBvZiBhbiBVUkwgc3RyaW5nL29iamVjdFxuLy8gQHBhcmFtIHN0cmluZyBzLCBzdHJpbmcgdG8gZGVjb2RlXG5tb2R1bGUuZXhwb3J0cyA9IChoYXNoLCBkZWxpbWl0ZXIgPSAnJicsIHNlcGVyYXRvciA9ICc9JywgZm9ybWF0RnVuY3Rpb24gPSBvID0+IG8pID0+XG5cdE9iamVjdC5rZXlzKGhhc2gpLm1hcChuYW1lID0+IHtcblx0XHRjb25zdCB2YWx1ZSA9IGZvcm1hdEZ1bmN0aW9uKGhhc2hbbmFtZV0pO1xuXHRcdHJldHVybiBuYW1lICsgKHZhbHVlICE9PSBudWxsID8gc2VwZXJhdG9yICsgdmFsdWUgOiAnJyk7XG5cdH0pLmpvaW4oZGVsaW1pdGVyKVxuO1xuIiwiLy8gQ3JlYXRlIGEgUXVlcnkgc3RyaW5nXG5jb25zdCBleHRyYWN0ID0gcmVxdWlyZSgnLi9leHRyYWN0LmpzJyk7XG5cbmNvbnN0IHRyaW1fbGVmdCA9IC9eW1xcI1xcP10vO1xuY29uc3QgbWF0Y2hfcGFyYW1zID0gLyhbXj1cXC9cXCZdKyk9KFteXFwmXSspL2c7XG5cbm1vZHVsZS5leHBvcnRzID0gKHN0ciwgZm9ybWF0RnVuY3Rpb24gPSBkZWNvZGVVUklDb21wb25lbnQpID0+IHtcblx0c3RyID0gc3RyLnJlcGxhY2UodHJpbV9sZWZ0LCAnJyk7XG5cdHJldHVybiBleHRyYWN0KHN0ciwgbWF0Y2hfcGFyYW1zLCBmb3JtYXRGdW5jdGlvbik7XG59O1xuIiwiLy8gQ3JlYXRlIGEgUXVlcnkgc3RyaW5nXG5jb25zdCBwYXJhbSA9IHJlcXVpcmUoJy4vcGFyYW0uanMnKTtcbmNvbnN0IGZuID0gdmFsdWUgPT4gKHZhbHVlID09PSAnPycgPyAnPycgOiBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxubW9kdWxlLmV4cG9ydHMgPSAobywgZm9ybWF0dGVyID0gZm4pID0+IHBhcmFtKG8sICcmJywgJz0nLCBmb3JtYXR0ZXIpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAoKSA9PiBwYXJzZUludChNYXRoLnJhbmRvbSgpICogMWUxMiwgMTApLnRvU3RyaW5nKDM2KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gKCd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IHNldEltbWVkaWF0ZSA6IChjYiA9PiBzZXRUaW1lb3V0KGNiLCAwKSk7XG4iLCIvLyBDbG9zZSBhIHdpbmRvd1xubW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cgPT4ge1xuXG5cdC8vIElzIHRoaXMgd2luZG93IHdpdGhpbiBhbiBJZnJhbWU/XG5cdGlmICh3aW5kb3cuZnJhbWVFbGVtZW50KSB7XG5cdFx0d2luZG93LnBhcmVudC5kb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHdpbmRvdy5mcmFtZUVsZW1lbnQpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIENsb3NlIHRoaXMgY3VycmVudCB3aW5kb3dcblx0XHR0cnkge1xuXHRcdFx0d2luZG93LmNsb3NlKCk7XG5cdFx0fVxuXHRcdGNhdGNoIChlKSB7XG5cdFx0XHQvLyBDb250aW51ZVxuXHRcdH1cblxuXHRcdC8vIElPUyBidWcgd29udCBsZXQgdXMgY2xvc2UgYSBwb3B1cCBpZiBzdGlsbCBsb2FkaW5nXG5cdFx0aWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHdpbmRvdy5jbG9zZSgpKTtcblx0XHR9XG5cdH1cbn07XG4iLCIvLyBwb3B1cFxuLy8gRWFzeSBvcHRpb25zIGFzIGEgaGFzaFxuY29uc3QgcGFyYW0gPSByZXF1aXJlKCcuLi9zdHJpbmcvcGFyYW0uanMnKTtcblxuY29uc3QgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuY29uc3QgZGltZW5zaW9ucyA9IFtbJ1RvcCcsICdIZWlnaHQnXSwgWydMZWZ0JywgJ1dpZHRoJ11dO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICh1cmwsIHRhcmdldCwgb3B0aW9ucyA9IHt9KSA9PiB7XG5cblx0Ly8gY2VudGVycyB0aGUgcG9wdXAgY29ycmVjdGx5IHRvIHRoZSBjdXJyZW50IGRpc3BsYXkgb2YgYSBtdWx0aS1zY3JlZW4gZGlzcGxheS5cblx0ZGltZW5zaW9ucy5mb3JFYWNoKGdlbmVyYXRlUG9zaXRpb24uYmluZChvcHRpb25zKSk7XG5cblx0Ly8gT3BlblxuXHRyZXR1cm4gd2luZG93Lm9wZW4odXJsLCB0YXJnZXQsIHBhcmFtKG9wdGlvbnMsICcsJykpO1xufTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVQb3NpdGlvbiAoW1Bvc2l0aW9uLCBEaW1lbnNpb25dKSB7XG5cdGNvbnN0IHBvc2l0aW9uID0gUG9zaXRpb24udG9Mb3dlckNhc2UoKTtcblx0Y29uc3QgZGltZW5zaW9uID0gRGltZW5zaW9uLnRvTG93ZXJDYXNlKCk7XG5cdGlmICh0aGlzW2RpbWVuc2lvbl0gJiYgIShwb3NpdGlvbiBpbiB0aGlzKSkge1xuXHRcdGNvbnN0IGR1YWxTY3JlZW5Qb3MgPSB3aW5kb3dbYHNjcmVlbiR7IFBvc2l0aW9ufWBdICE9PSB1bmRlZmluZWQgPyB3aW5kb3dbYHNjcmVlbiR7IFBvc2l0aW9ufWBdIDogc2NyZWVuW3Bvc2l0aW9uXTtcblx0XHRjb25zdCBkID0gc2NyZWVuW2RpbWVuc2lvbl0gfHwgd2luZG93W2Bpbm5lciR7IERpbWVuc2lvbn1gXSB8fCBkb2N1bWVudEVsZW1lbnRbYGNsaWVudCR7IERpbWVuc2lvbn1gXTtcblx0XHR0aGlzW3Bvc2l0aW9uXSA9IHBhcnNlSW50KChkIC0gdGhpc1tkaW1lbnNpb25dKSAvIDIsIDEwKSArIGR1YWxTY3JlZW5Qb3M7XG5cdH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcGF0aCA9PiB7XG5cblx0Ly8gSWYgdGhlIHBhdGggaXMgZW1wdHlcblx0aWYgKCFwYXRoKSB7XG5cdFx0cmV0dXJuIHdpbmRvdy5sb2NhdGlvbjtcblx0fVxuXG5cdC8vIENocm9tZSBhbmQgRmlyZUZveCBzdXBwb3J0IG5ldyBVUkwoKSB0byBleHRyYWN0IFVSTCBvYmplY3RzXG5cdGVsc2UgaWYgKHdpbmRvdy5VUkwgJiYgVVJMIGluc3RhbmNlb2YgRnVuY3Rpb24gJiYgVVJMLmxlbmd0aCAhPT0gMCkge1xuXHRcdHJldHVybiBuZXcgVVJMKHBhdGgsIHdpbmRvdy5sb2NhdGlvbik7XG5cdH1cblxuXHQvLyBVZ2x5IHNoaW0sIGl0IHdvcmtzIVxuXHRlbHNlIHtcblx0XHRjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXHRcdGEuaHJlZiA9IHBhdGg7XG5cdFx0Ly8gUmV0dXJuIGNsb25lIGZvciBJRSBjb21wYXRpYmlsaXR5IHZpZXcuXG5cdFx0cmV0dXJuIGEuY2xvbmVOb2RlKGZhbHNlKTtcblx0fVxufTtcbiIsInJlcXVpcmUoJ2JhYmVsLXBvbHlmaWxsJyk7XG5cbi8vIFNlcnZpY2VzXG5yZXF1aXJlKCcuL21vZHVsZXMvZHJvcGJveC5qcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2ZhY2Vib29rLmpzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZmxpY2tyLmpzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZm91cnNxdWFyZS5qcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2dpdGh1Yi5qcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2dvb2dsZS5qcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2luc3RhZ3JhbS5qcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2pvaW5tZS5qcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2xpbmtlZGluLmpzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvc291bmRjbG91ZC5qcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3R3aXR0ZXIuanMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy92ay5qcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dpbmRvd3MuanMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy95YWhvby5qcycpO1xuXG4vLyBFbnZpcm9ubWVudCB0d2Vha3NcbnJlcXVpcmUoJy4vaGVsbG8ucGhvbmVnYXAuanMnKTtcbnJlcXVpcmUoJy4vaGVsbG8uY2hyb21lYXBwLmpzJyk7XG5cbi8vIEV4cG9ydCBIZWxsb0pTXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaGVsbG8uanMnKTtcbiIsIi8qIGdsb2JhbCBjaHJvbWUgKi9cbi8vIFNjcmlwdCB0byBzdXBwb3J0IENocm9tZUFwcHNcbi8vIFRoaXMgb3ZlcmlkZXMgdGhlIGhlbGxvLnV0aWxzLnBvcHVwIG1ldGhvZCB0byBzdXBwb3J0IGNocm9tZS5pZGVudGl0eS5sYXVuY2hXZWJBdXRoRmxvd1xuLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vYXBwcy9hcHBfaWRlbnRpdHkjbm9uXG5cbmNvbnN0IFVSTCA9IHJlcXVpcmUoJ3RyaWNrcy93aW5kb3cvdXJsJyk7XG5jb25zdCBoZWxsbyA9IHJlcXVpcmUoJy4vaGVsbG8nKTtcblxuLy8gSXMgdGhpcyBhIGNocm9tZSBhcHA/XG5pZiAodHlwZW9mIGNocm9tZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGNocm9tZS5pZGVudGl0eSA9PT0gJ29iamVjdCcgJiYgY2hyb21lLmlkZW50aXR5LmxhdW5jaFdlYkF1dGhGbG93KSB7XG5cblx0Ly8gU3dhcCB0aGUgcG9wdXAgbWV0aG9kXG5cdGhlbGxvLnV0aWxzLnBvcHVwID0gZnVuY3Rpb24odXJsKSB7XG5cblx0XHRyZXR1cm4gX29wZW4odXJsLCB0cnVlKTtcblxuXHR9O1xuXG5cdC8vIFN3YXAgdGhlIGhpZGRlbiBpZnJhbWUgbWV0aG9kXG5cdGhlbGxvLnV0aWxzLmlmcmFtZSA9IGZ1bmN0aW9uKHVybCkge1xuXG5cdFx0X29wZW4odXJsLCBmYWxzZSk7XG5cblx0fTtcblxuXHQvLyBTd2FwIHRoZSByZXF1ZXN0X2NvcnMgbWV0aG9kXG5cdGhlbGxvLnV0aWxzLnJlcXVlc3RfY29ycyA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cblx0XHRjYWxsYmFjaygpO1xuXG5cdFx0Ly8gQWx3YXlzIHJ1biBhcyBDT1JTXG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHQvLyBTd2FwIHRoZSBzdG9yYWdlIG1ldGhvZFxuXHRsZXQgX2NhY2hlID0ge307XG5cdGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldCgnaGVsbG8nLCByID0+IHtcblx0XHQvLyBVcGRhdGUgdGhlIGNhY2hlXG5cdFx0X2NhY2hlID0gci5oZWxsbyB8fCB7fTtcblx0fSk7XG5cblx0aGVsbG8udXRpbHMuc3RvcmUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuXG5cdFx0Ly8gR2V0IGFsbFxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gX2NhY2hlO1xuXHRcdH1cblxuXHRcdC8vIEdldFxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRyZXR1cm4gX2NhY2hlW25hbWVdIHx8IG51bGw7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0XG5cdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHRfY2FjaGVbbmFtZV0gPSB2YWx1ZTtcblx0XHRcdGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7aGVsbG86IF9jYWNoZX0pO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdC8vIERlbGV0ZVxuXHRcdGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdFx0ZGVsZXRlIF9jYWNoZVtuYW1lXTtcblx0XHRcdGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7aGVsbG86IF9jYWNoZX0pO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBPcGVuIGZ1bmN0aW9uXG5mdW5jdGlvbiBfb3Blbih1cmwsIGludGVyYWN0aXZlKSB7XG5cblx0Ly8gTGF1bmNoXG5cdGNvbnN0IHJlZiA9IHtcblx0XHRjbG9zZWQ6IGZhbHNlXG5cdH07XG5cblx0XHQvLyBMYXVuY2ggdGhlIHdlYkF1dGhGbG93XG5cdGNocm9tZS5pZGVudGl0eS5sYXVuY2hXZWJBdXRoRmxvdyh7XG5cdFx0dXJsLFxuXHRcdGludGVyYWN0aXZlXG5cdH0sIHJlc3BvbnNlVXJsID0+IHtcblxuXHRcdC8vIERpZCB0aGUgdXNlciBjYW5jZWwgdGhpcyBwcmVtYXR1cmVseVxuXHRcdGlmIChyZXNwb25zZVVybCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZWYuY2xvc2VkID0gdHJ1ZTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBTcGxpdCBhcHBhcnQgdGhlIFVSTFxuXHRcdGNvbnN0IGEgPSBVUkwocmVzcG9uc2VVcmwpO1xuXG5cdFx0Ly8gVGhlIGxvY2F0aW9uIGNhbiBiZSBhdWdtZW50ZWQgaW4gdG8gYSBsb2NhdGlvbiBvYmplY3QgbGlrZSBzby4uLlxuXHRcdC8vIFdlIGRvbnQgaGF2ZSB3aW5kb3cgb3BlcmF0aW9ucyBvbiB0aGUgcG9wdXAgc28gbGV0cyBjcmVhdGUgc29tZVxuXHRcdGNvbnN0IF9wb3B1cCA9IHtcblx0XHRcdGxvY2F0aW9uOiB7XG5cblx0XHRcdFx0Ly8gQ2hhbmdlIHRoZSBsb2NhdGlvbiBvZiB0aGUgcG9wdXBcblx0XHRcdFx0YXNzaWduKHVybCkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYSBzZWNvbmRhcnkgcmVhc3NpZ25cblx0XHRcdFx0XHQvLyBJbiB0aGUgY2FzZSBvZiBPQXV0aDFcblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoaXMgaW4gbm9uLWludGVyYWN0aXZlIG1vZGUuXG5cdFx0XHRcdFx0X29wZW4odXJsLCBmYWxzZSk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0c2VhcmNoOiBhLnNlYXJjaCxcblx0XHRcdFx0aGFzaDogYS5oYXNoLFxuXHRcdFx0XHRocmVmOiBhLmhyZWZcblx0XHRcdH0sXG5cdFx0XHRjbG9zZSgpIHt9XG5cdFx0fTtcblxuXHRcdFx0Ly8gVGhlbiB0aGlzIFVSTCBjb250YWlucyBpbmZvcm1hdGlvbiB3aGljaCBIZWxsb0pTIG11c3QgcHJvY2Vzc1xuXHRcdFx0Ly8gVVJMIHN0cmluZ1xuXHRcdFx0Ly8gV2luZG93IC0gYW55IGFjdGlvbiBzdWNoIGFzIHdpbmRvdyByZWxvY2F0aW9uIGdvZXMgaGVyZVxuXHRcdFx0Ly8gT3BlbmVyIC0gdGhlIHBhcmVudCB3aW5kb3cgd2hpY2ggb3BlbmVkIHRoaXMsIGFrYSB0aGlzIHNjcmlwdFxuXG5cdFx0aGVsbG8udXRpbHMucmVzcG9uc2VIYW5kbGVyKF9wb3B1cCwgd2luZG93KTtcblx0fSk7XG5cblx0Ly8gUmV0dXJuIHRoZSByZWZlcmVuY2Vcblx0cmV0dXJuIHJlZjtcbn1cbiIsIi8qKlxuICogQGhlbGxvLmpzXG4gKlxuICogSGVsbG9KUyBpcyBhIGNsaWVudCBzaWRlIEphdmFzY3JpcHQgU0RLIGZvciBtYWtpbmcgT0F1dGgyIGxvZ2lucyBhbmQgc3Vic2VxdWVudCBSRVNUIGNhbGxzLlxuICpcbiAqIEBhdXRob3IgQW5kcmV3IERvZHNvblxuICogQHdlYnNpdGUgaHR0cHM6Ly9hZG9kc29uLmNvbS9oZWxsby5qcy9cblxuICogQGNvcHlyaWdodCBBbmRyZXcgRG9kc29uLCAyMDEyIC0gMjAxNVxuICogQGxpY2Vuc2UgTUlUOiBZb3UgYXJlIGZyZWUgdG8gdXNlIGFuZCBtb2RpZnkgdGhpcyBjb2RlIGZvciBhbnkgdXNlLCBvbiB0aGUgY29uZGl0aW9uIHRoYXQgdGhpcyBjb3B5cmlnaHQgbm90aWNlIHJlbWFpbnMuXG4gKi9cblxuY29uc3QgYXJnbWFwID0gcmVxdWlyZSgndHJpY2tzL29iamVjdC9hcmdzJyk7XG5jb25zdCBjbG9uZSA9IHJlcXVpcmUoJ3RyaWNrcy9vYmplY3QvY2xvbmUnKTtcbmNvbnN0IGNsb3NlV2luZG93ID0gcmVxdWlyZSgndHJpY2tzL3dpbmRvdy9jbG9zZScpO1xuY29uc3QgY3JlYXRlVXJsID0gcmVxdWlyZSgndHJpY2tzL3N0cmluZy9jcmVhdGVVcmwnKTtcbmNvbnN0IGRpZmZLZXkgPSByZXF1aXJlKCd0cmlja3Mvb2JqZWN0L2RpZmZLZXknKTtcbmNvbnN0IGRpZmYgPSByZXF1aXJlKCd0cmlja3MvYXJyYXkvZGlmZicpO1xuY29uc3QgZXh0ZW5kID0gcmVxdWlyZSgndHJpY2tzL29iamVjdC9leHRlbmQnKTtcbmNvbnN0IGdsb2JhbENhbGxiYWNrID0gcmVxdWlyZSgndHJpY2tzL2V2ZW50cy9nbG9iYWxDYWxsYmFjaycpO1xuY29uc3QgaWZyYW1lID0gcmVxdWlyZSgndHJpY2tzL2RvbS9oaWRkZW5GcmFtZScpO1xuY29uc3QgaXNFbXB0eSA9IHJlcXVpcmUoJ3RyaWNrcy9vYmplY3QvaXNFbXB0eScpO1xuY29uc3QgbWVyZ2UgPSByZXF1aXJlKCd0cmlja3Mvb2JqZWN0L21lcmdlJyk7XG5jb25zdCBwYXJhbSA9IHJlcXVpcmUoJ3RyaWNrcy9zdHJpbmcvcXVlcnlwYXJzZScpO1xuY29uc3QgcG9wdXAgPSByZXF1aXJlKCd0cmlja3Mvd2luZG93L3BvcHVwJyk7XG5jb25zdCBwdWJzdWIgPSByZXF1aXJlKCd0cmlja3Mvb2JqZWN0L3B1YnN1YicpO1xuY29uc3QgcmFuZG9tID0gcmVxdWlyZSgndHJpY2tzL3N0cmluZy9yYW5kb20nKTtcbmNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCd0cmlja3MvaHR0cC9yZXF1ZXN0Jyk7XG5jb25zdCBzdG9yZSA9IHJlcXVpcmUoJ3RyaWNrcy9icm93c2VyL2FnZW50L2xvY2FsU3RvcmFnZScpO1xuY29uc3QgdW5pcXVlID0gcmVxdWlyZSgndHJpY2tzL2FycmF5L3VuaXF1ZScpO1xuY29uc3QgVXJsID0gcmVxdWlyZSgndHJpY2tzL3dpbmRvdy91cmwnKTtcblxuY29uc3QgaGVsbG8gPSBmdW5jdGlvbihuYW1lKSB7XG5cdHJldHVybiBoZWxsby51c2UobmFtZSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhlbGxvO1xuXG5leHRlbmQoaGVsbG8sIHtcblxuXHRzZXR0aW5nczoge1xuXG5cdFx0Ly8gT0F1dGgyIGF1dGhlbnRpY2F0aW9uIGRlZmF1bHRzXG5cdFx0cmVkaXJlY3RfdXJpOiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyA/IGxvY2F0aW9uLmhyZWYuc3BsaXQoJyMnKVswXSA6IG51bGwpLFxuXHRcdHJlc3BvbnNlX3R5cGU6ICd0b2tlbicsXG5cdFx0ZGlzcGxheTogJ3BvcHVwJyxcblx0XHRzdGF0ZTogJycsXG5cblx0XHQvLyBPQXV0aDEgc2hpbVxuXHRcdC8vIFRoZSBwYXRoIHRvIHRoZSBPQXV0aDEgc2VydmVyIGZvciBzaWduaW5nIHVzZXIgcmVxdWVzdHNcblx0XHQvLyBXYW50IHRvIHJlY3JlYXRlIHlvdXIgb3duPyBDaGVja291dCBodHRwczovL2dpdGh1Yi5jb20vTXJTd2l0Y2gvbm9kZS1vYXV0aC1zaGltXG5cdFx0b2F1dGhfcHJveHk6ICdodHRwczovL2F1dGgtc2VydmVyLmhlcm9rdWFwcC5jb20vcHJveHknLFxuXG5cdFx0Ly8gQVBJIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzXG5cdFx0dGltZW91dDogMjAwMDAsXG5cblx0XHQvLyBQb3B1cCBPcHRpb25zXG5cdFx0cG9wdXA6IHtcblx0XHRcdHJlc2l6YWJsZTogMSxcblx0XHRcdHNjcm9sbGJhcnM6IDEsXG5cdFx0XHR3aWR0aDogNTAwLFxuXHRcdFx0aGVpZ2h0OiA1NTBcblx0XHR9LFxuXG5cdFx0Ly8gRGVmYXVsdCBzY29wZVxuXHRcdC8vIE1hbnkgc2VydmljZXMgcmVxdWlyZSBhdGxlYXN0IGEgcHJvZmlsZSBzY29wZSxcblx0XHQvLyBIZWxsb0pTIGF1dG9tYXRpYWxseSBpbmNsdWRlcyB0aGUgdmFsdWUgb2YgcHJvdmlkZXIuc2NvcGVfbWFwLmJhc2ljXG5cdFx0Ly8gSWYgdGhhdCdzIG5vdCByZXF1aXJlZCBpdCBjYW4gYmUgcmVtb3ZlZCB2aWEgaGVsbG8uc2V0dGluZ3Muc2NvcGUubGVuZ3RoID0gMDtcblx0XHRzY29wZTogWydiYXNpYyddLFxuXG5cdFx0Ly8gU2NvcGUgTWFwc1xuXHRcdC8vIFRoaXMgaXMgdGhlIGRlZmF1bHQgbW9kdWxlIHNjb3BlLCB0aGVzZSBhcmUgdGhlIGRlZmF1bHRzIHdoaWNoIGVhY2ggc2VydmljZSBpcyBtYXBwZWQgdG9vLlxuXHRcdC8vIEJ5IGluY2x1ZGluZyB0aGVtIGhlcmUgaXQgcHJldmVudHMgdGhlIHNjb3BlIGZyb20gYmVpbmcgYXBwbGllZCBhY2NpZGVudGFsbHlcblx0XHRzY29wZV9tYXA6IHtcblx0XHRcdGJhc2ljOiAnJ1xuXHRcdH0sXG5cblx0XHQvLyBEZWZhdWx0IHNlcnZpY2UgLyBuZXR3b3JrXG5cdFx0ZGVmYXVsdF9zZXJ2aWNlOiBudWxsLFxuXG5cdFx0Ly8gRm9yY2UgYXV0aGVudGljYXRpb25cblx0XHQvLyBXaGVuIGhlbGxvLmxvZ2luIGlzIGZpcmVkLlxuXHRcdC8vIChudWxsKTogaWdub3JlIGN1cnJlbnQgc2Vzc2lvbiBleHBpcnkgYW5kIGNvbnRpbnVlIHdpdGggbG9naW5cblx0XHQvLyAodHJ1ZSk6IGlnbm9yZSBjdXJyZW50IHNlc3Npb24gZXhwaXJ5IGFuZCBjb250aW51ZSB3aXRoIGxvZ2luLCBhc2sgZm9yIHVzZXIgdG8gcmVhdXRoZW50aWNhdGVcblx0XHQvLyAoZmFsc2UpOiBpZiB0aGUgY3VycmVudCBzZXNzaW9uIGxvb2tzIGdvb2QgZm9yIHRoZSByZXF1ZXN0IHNjb3BlcyByZXR1cm4gdGhlIGN1cnJlbnQgc2Vzc2lvbi5cblx0XHRmb3JjZTogbnVsbCxcblxuXHRcdC8vIFBhZ2UgVVJMXG5cdFx0Ly8gV2hlbiAnZGlzcGxheT1wYWdlJyB0aGlzIHByb3BlcnR5IGRlZmluZXMgd2hlcmUgdGhlIHVzZXJzIHBhZ2Ugc2hvdWxkIGVuZCB1cCBhZnRlciByZWRpcmVjdF91cmlcblx0XHQvLyBUaHMgY291bGQgYmUgcHJvYmxlbWF0aWMgaWYgdGhlIHJlZGlyZWN0X3VyaSBpcyBpbmRlZWQgdGhlIGZpbmFsIHBsYWNlLFxuXHRcdC8vIFR5cGljYWxseSB0aGlzIGNpcmN1bXZlbnRzIHRoZSBwcm9ibGVtIG9mIHRoZSByZWRpcmVjdF91cmwgYmVpbmcgYSBkdW1iIHJlbGF5IHBhZ2UuXG5cdFx0cGFnZV91cmk6ICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnID8gbG9jYXRpb24uaHJlZiA6IG51bGwpXG5cdH0sXG5cblx0Ly8gU2VydmljZSBjb25maWd1cmF0aW9uIG9iamVjdHNcblx0c2VydmljZXM6IHt9LFxuXG5cdC8vIFVzZVxuXHQvLyBEZWZpbmUgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIEhlbGxvSlMgbGlicmFyeSB3aXRoIGEgZGVmYXVsdCBzZXJ2aWNlXG5cdHVzZShzZXJ2aWNlKSB7XG5cblx0XHQvLyBDcmVhdGUgc2VsZiwgd2hpY2ggaW5oZXJpdHMgZnJvbSBpdHMgcGFyZW50XG5cdFx0Y29uc3Qgc2VsZiA9IE9iamVjdC5jcmVhdGUodGhpcyk7XG5cblx0XHQvLyBJbmhlcml0IHRoZSBwcm90b3R5cGUgZnJvbSBpdHMgcGFyZW50XG5cdFx0c2VsZi5zZXR0aW5ncyA9IE9iamVjdC5jcmVhdGUodGhpcy5zZXR0aW5ncyk7XG5cblx0XHQvLyBEZWZpbmUgdGhlIGRlZmF1bHQgc2VydmljZVxuXHRcdGlmIChzZXJ2aWNlKSB7XG5cdFx0XHRzZWxmLnNldHRpbmdzLmRlZmF1bHRfc2VydmljZSA9IHNlcnZpY2U7XG5cdFx0fVxuXG5cdFx0Ly8gQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEV2ZW50c1xuXHRcdHB1YnN1Yi5jYWxsKHNlbGYpO1xuXG5cdFx0cmV0dXJuIHNlbGY7XG5cdH0sXG5cblx0Ly8gSW5pdGlhbGl6ZVxuXHQvLyBEZWZpbmUgdGhlIGNsaWVudF9pZHMgZm9yIHRoZSBlbmRwb2ludCBzZXJ2aWNlc1xuXHQvLyBAcGFyYW0gb2JqZWN0IG8sIGNvbnRhaW5zIGEga2V5IHZhbHVlIHBhaXIsIHNlcnZpY2UgPT4gY2xpZW50SWRcblx0Ly8gQHBhcmFtIG9iamVjdCBvcHRzLCBjb250YWlucyBhIGtleSB2YWx1ZSBwYWlyIG9mIG9wdGlvbnMgdXNlZCBmb3IgZGVmaW5pbmcgdGhlIGF1dGhlbnRpY2F0aW9uIGRlZmF1bHRzXG5cdC8vIEBwYXJhbSBudW1iZXIgdGltZW91dCwgdGltZW91dCBpbiBzZWNvbmRzXG5cdGluaXQoc2VydmljZXMsIG9wdGlvbnMpIHtcblxuXHRcdGlmICghc2VydmljZXMpIHtcblx0XHRcdHJldHVybiB0aGlzLnNlcnZpY2VzO1xuXHRcdH1cblxuXHRcdC8vIERlZmluZSBwcm92aWRlciBjcmVkZW50aWFsc1xuXHRcdC8vIFJlZm9ybWF0IHRoZSBJRCBmaWVsZFxuXHRcdGZvciAoY29uc3QgeCBpbiBzZXJ2aWNlcykge1xuXHRcdFx0aWYgKHNlcnZpY2VzLmhhc093blByb3BlcnR5KHgpKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgKHNlcnZpY2VzW3hdKSAhPT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHRzZXJ2aWNlc1t4XSA9IHtpZDogc2VydmljZXNbeF19O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTWVyZ2Ugc2VydmljZXMgaWYgdGhlcmUgYWxyZWFkeSBleGlzdHMgc29tZVxuXHRcdGV4dGVuZCh0aGlzLnNlcnZpY2VzLCBzZXJ2aWNlcyk7XG5cblx0XHQvLyBVcGRhdGUgdGhlIGRlZmF1bHQgc2V0dGluZ3Mgd2l0aCB0aGlzIG9uZS5cblx0XHRpZiAob3B0aW9ucykge1xuXHRcdFx0ZXh0ZW5kKHRoaXMuc2V0dGluZ3MsIG9wdGlvbnMpO1xuXG5cdFx0XHQvLyBEbyB0aGlzIGltbWVkaWF0bHkgaW5jYXNlIHRoZSBicm93c2VyIGNoYW5nZXMgdGhlIGN1cnJlbnQgcGF0aC5cblx0XHRcdGlmICgncmVkaXJlY3RfdXJpJyBpbiBvcHRpb25zKSB7XG5cdFx0XHRcdHRoaXMuc2V0dGluZ3MucmVkaXJlY3RfdXJpID0gVXJsKG9wdGlvbnMucmVkaXJlY3RfdXJpKS5ocmVmO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdC8vIExvZ2luXG5cdC8vIFVzaW5nIHRoZSBlbmRwb2ludFxuXHQvLyBAcGFyYW0gbmV0d29yayBzdHJpbmdpZnkgICAgICAgbmFtZSB0byBjb25uZWN0IHRvXG5cdC8vIEBwYXJhbSBvcHRpb25zIG9iamVjdCAgICAob3B0aW9uYWwpICB7ZGlzcGxheSBtb2RlLCBpcyBlaXRoZXIgbm9uZXxwb3B1cChkZWZhdWx0KXxwYWdlLCBzY29wZTogZW1haWwsYmlydGhkYXkscHVibGlzaCwgLi4gfVxuXHQvLyBAcGFyYW0gY2FsbGJhY2sgIGZ1bmN0aW9uICAob3B0aW9uYWwpICBmaXJlZCBvbiBzaWduaW5cblx0YXN5bmMgbG9naW4oLi4uYXJncykge1xuXG5cdFx0Y29uc3QgdXRpbHMgPSB0aGlzLnV0aWxzO1xuXHRcdC8vIEdldCBwYXJhbWV0ZXJzXG5cdFx0Y29uc3QgcCA9IGFyZ21hcCh7bmV0d29yazogJ3MnLCBvcHRpb25zOiAnbycsIGNhbGxiYWNrOiAnZid9LCBhcmdzKTtcblxuXHRcdC8vIExvY2FsIHZhcnNcblx0XHRsZXQgdXJsO1xuXG5cdFx0Ly8gR2V0IGFsbCB0aGUgY3VzdG9tIG9wdGlvbnMgYW5kIHN0b3JlIHRvIGJlIGFwcGVuZGVkIHRvIHRoZSBxdWVyeXN0cmluZ1xuXHRcdGNvbnN0IHFzID0gZGlmZktleShwLm9wdGlvbnMsIHRoaXMuc2V0dGluZ3MpO1xuXG5cdFx0Ly8gTWVyZ2Uvb3ZlcnJpZGUgb3B0aW9ucyB3aXRoIGFwcCBkZWZhdWx0c1xuXHRcdGNvbnN0IG9wdHMgPSBwLm9wdGlvbnMgPSBtZXJnZSh0aGlzLnNldHRpbmdzLCBwLm9wdGlvbnMgfHwge30pO1xuXG5cdFx0Ly8gTWVyZ2Uvb3ZlcnJpZGUgb3B0aW9ucyB3aXRoIGFwcCBkZWZhdWx0c1xuXHRcdG9wdHMucG9wdXAgPSBtZXJnZSh0aGlzLnNldHRpbmdzLnBvcHVwLCBwLm9wdGlvbnMucG9wdXAgfHwge30pO1xuXG5cdFx0Ly8gTmV0d29ya1xuXHRcdHAubmV0d29yayA9IHAubmV0d29yayB8fCB0aGlzLnNldHRpbmdzLmRlZmF1bHRfc2VydmljZTtcblxuXHRcdC8vIElzIG91ciBzZXJ2aWNlIHZhbGlkP1xuXHRcdGlmICh0eXBlb2YgKHAubmV0d29yaykgIT09ICdzdHJpbmcnIHx8ICEocC5uZXR3b3JrIGluIHRoaXMuc2VydmljZXMpKSB7XG5cdFx0XHQvLyBUcmlnZ2VyIHRoZSBkZWZhdWx0IGxvZ2luLlxuXHRcdFx0Ly8gQWhoIHdlIGRvbnQgaGF2ZSBvbmUuXG5cdFx0XHR0aHJvdyBlcnJvcignaW52YWxpZF9uZXR3b3JrJywgJ1RoZSBwcm92aWRlZCBuZXR3b3JrIHdhcyBub3QgcmVjb2duaXplZCcpO1xuXHRcdH1cblxuXHRcdGNvbnN0IHByb3ZpZGVyID0gdGhpcy5zZXJ2aWNlc1twLm5ldHdvcmtdO1xuXG5cdFx0Ly8gQ3JlYXRlIGEgZ2xvYmFsIGxpc3RlbmVyIHRvIGNhcHR1cmUgZXZlbnRzIHRyaWdnZXJlZCBvdXQgb2Ygc2NvcGVcblx0XHRjb25zdCBjYWxsYmFja0lkID0gYF9oZWxsb2pzXyR7cmFuZG9tKCl9YDtcblxuXHRcdGNvbnN0IHBycyA9IFtdO1xuXG5cdFx0cHJzLnB1c2gobmV3IFByb21pc2UoKGFjY2VwdCwgcmVqZWN0KSA9PiB7XG5cdFx0XHRnbG9iYWxDYWxsYmFjayhzdHIgPT4ge1xuXG5cdFx0XHRcdC8vIFRoZSByZXNwb25zZUhhbmRsZXIgcmV0dXJucyBhIHN0cmluZywgbGV0cyBzYXZlIHRoaXMgbG9jYWxseVxuXHRcdFx0XHRsZXQgb2JqO1xuXG5cdFx0XHRcdGlmIChzdHIpIHtcblx0XHRcdFx0XHRvYmogPSBKU09OLnBhcnNlKHN0cik7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0b2JqID0gZXJyb3IoJ2NhbmNlbGxlZCcsICdUaGUgYXV0aGVudGljYXRpb24gd2FzIG5vdCBjb21wbGV0ZWQnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGVzZSByZXNwb25zZSB1c2luZyB0aGUgbG9jYWxcblx0XHRcdFx0Ly8gVHJpZ2dlciBvbiB0aGUgcGFyZW50XG5cdFx0XHRcdGlmICghb2JqLmVycm9yKSB7XG5cblx0XHRcdFx0XHQvLyBTYXZlIG9uIHRoZSBwYXJlbnQgd2luZG93IHRoZSBuZXcgY3JlZGVudGlhbHNcblx0XHRcdFx0XHQvLyBUaGlzIGZpeGVzIGFuIElFMTAgYnVnIGkgdGhpbmsuLi4gYXRsZWFzdCBpdCBkb2VzIGZvciBtZS5cblx0XHRcdFx0XHR1dGlscy5zdG9yZShvYmoubmV0d29yaywgb2JqKTtcblxuXHRcdFx0XHRcdC8vIEZ1bGZpbGwgYSBzdWNjZXNzZnVsIGxvZ2luXG5cdFx0XHRcdFx0YWNjZXB0KHtcblx0XHRcdFx0XHRcdG5ldHdvcms6IG9iai5uZXR3b3JrLFxuXHRcdFx0XHRcdFx0YXV0aFJlc3BvbnNlOiBvYmpcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHQvLyBSZWplY3QgYSBzdWNjZXNzZnVsIGxvZ2luXG5cdFx0XHRcdFx0cmVqZWN0KG9iaik7XG5cdFx0XHRcdH1cblx0XHRcdH0sIGNhbGxiYWNrSWQpO1xuXHRcdH0pKTtcblxuXHRcdGNvbnN0IHJlZGlyZWN0VXJpID0gVXJsKG9wdHMucmVkaXJlY3RfdXJpKS5ocmVmO1xuXG5cdFx0Ly8gTWF5IGJlIGEgc3BhY2UtZGVsaW1pdGVkIGxpc3Qgb2YgbXVsdGlwbGUsIGNvbXBsZW1lbnRhcnkgdHlwZXNcblx0XHRsZXQgcmVzcG9uc2VUeXBlID0gcHJvdmlkZXIub2F1dGgucmVzcG9uc2VfdHlwZSB8fCBvcHRzLnJlc3BvbnNlX3R5cGU7XG5cblx0XHQvLyBGYWxsYmFjayB0byB0b2tlbiBpZiB0aGUgbW9kdWxlIGhhc24ndCBkZWZpbmVkIGEgZ3JhbnQgdXJsXG5cdFx0aWYgKC9cXGJjb2RlXFxiLy50ZXN0KHJlc3BvbnNlVHlwZSkgJiYgIXByb3ZpZGVyLm9hdXRoLmdyYW50KSB7XG5cdFx0XHRyZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUucmVwbGFjZSgvXFxiY29kZVxcYi8sICd0b2tlbicpO1xuXHRcdH1cblxuXHRcdC8vIFF1ZXJ5IHN0cmluZyBwYXJhbWV0ZXJzLCB3ZSBtYXkgcGFzcyBvdXIgb3duIGFyZ3VtZW50cyB0byBmb3JtIHRoZSBxdWVyeXN0cmluZ1xuXHRcdHAucXMgPSBtZXJnZShxcywge1xuXHRcdFx0Y2xpZW50X2lkOiBlbmNvZGVVUklDb21wb25lbnQocHJvdmlkZXIuaWQpLFxuXHRcdFx0cmVzcG9uc2VfdHlwZTogZW5jb2RlVVJJQ29tcG9uZW50KHJlc3BvbnNlVHlwZSksXG5cdFx0XHRyZWRpcmVjdF91cmk6IGVuY29kZVVSSUNvbXBvbmVudChyZWRpcmVjdFVyaSksXG5cdFx0XHRzdGF0ZToge1xuXHRcdFx0XHRjbGllbnRfaWQ6IHByb3ZpZGVyLmlkLFxuXHRcdFx0XHRuZXR3b3JrOiBwLm5ldHdvcmssXG5cdFx0XHRcdGRpc3BsYXk6IG9wdHMuZGlzcGxheSxcblx0XHRcdFx0Y2FsbGJhY2s6IGNhbGxiYWNrSWQsXG5cdFx0XHRcdHN0YXRlOiBvcHRzLnN0YXRlLFxuXHRcdFx0XHRyZWRpcmVjdF91cmk6IHJlZGlyZWN0VXJpXG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBHZXQgY3VycmVudCBzZXNzaW9uIGZvciBtZXJnaW5nIHNjb3BlcywgYW5kIGZvciBxdWljayBhdXRoIHJlc3BvbnNlXG5cdFx0Y29uc3Qgc2Vzc2lvbiA9IHV0aWxzLnN0b3JlKHAubmV0d29yayk7XG5cblx0XHQvLyBTY29wZXMgKGF1dGhlbnRpY2F0aW9uIHBlcm1pc2lvbnMpXG5cdFx0Ly8gRW5zdXJlIHRoaXMgaXMgYSBzdHJpbmcgLSBJRSBoYXMgYSBwcm9ibGVtIG1vdmluZyBBcnJheXMgYmV0d2VlbiB3aW5kb3dzXG5cdFx0Ly8gQXBwZW5kIHRoZSBzZXR1cCBzY29wZVxuXHRcdGNvbnN0IFNDT1BFX1NQTElUID0gL1ssXFxzXSsvO1xuXG5cdFx0Ly8gSW5jbHVkZSBkZWZhdWx0IHNjb3BlIHNldHRpbmdzIChjbG9uZWQpLlxuXHRcdGxldCBzY29wZSA9IHRoaXMuc2V0dGluZ3Muc2NvcGUgPyBbdGhpcy5zZXR0aW5ncy5zY29wZS50b1N0cmluZygpXSA6IFtdO1xuXG5cdFx0Ly8gRXh0ZW5kIHRoZSBwcm92aWRlcnMgc2NvcGUgbGlzdCB3aXRoIHRoZSBkZWZhdWx0XG5cdFx0Y29uc3Qgc2NvcGVNYXAgPSBtZXJnZSh0aGlzLnNldHRpbmdzLnNjb3BlX21hcCwgcHJvdmlkZXIuc2NvcGUgfHwge30pO1xuXG5cdFx0Ly8gQWRkIHVzZXIgZGVmaW5lZCBzY29wZXMuLi5cblx0XHRpZiAob3B0cy5zY29wZSkge1xuXHRcdFx0c2NvcGUucHVzaChvcHRzLnNjb3BlLnRvU3RyaW5nKCkpO1xuXHRcdH1cblxuXHRcdC8vIEFwcGVuZCBzY29wZXMgZnJvbSBhIHByZXZpb3VzIHNlc3Npb24uXG5cdFx0Ly8gVGhpcyBoZWxwcyBrZWVwIGFwcCBjcmVkZW50aWFscyBjb25zdGFudCxcblx0XHQvLyBBdm9pZGluZyBoYXZpbmcgdG8ga2VlcCB0YWJzIG9uIHdoYXQgc2NvcGVzIGFyZSBhdXRob3JpemVkXG5cdFx0aWYgKHNlc3Npb24gJiYgJ3Njb3BlJyBpbiBzZXNzaW9uICYmIHNlc3Npb24uc2NvcGUgaW5zdGFuY2VvZiBTdHJpbmcpIHtcblx0XHRcdHNjb3BlLnB1c2goc2Vzc2lvbi5zY29wZSk7XG5cdFx0fVxuXG5cdFx0Ly8gSm9pbiBhbmQgU3BsaXQgYWdhaW5cblx0XHRzY29wZSA9IHNjb3BlLmpvaW4oJywnKS5zcGxpdChTQ09QRV9TUExJVCk7XG5cblx0XHQvLyBGb3JtYXQgcmVtb3ZlIGR1cGxpY2F0ZXMgYW5kIGVtcHR5IHZhbHVlc1xuXHRcdHNjb3BlID0gdW5pcXVlKHNjb3BlKS5maWx0ZXIoZmlsdGVyRW1wdHkpO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgdGhlIHNjb3BlcyB0byB0aGUgc3RhdGUgd2l0aCB0aGUgbmFtZXMgdGhhdCB0aGV5IHdlcmUgcmVxdWVzdGVkIHdpdGguXG5cdFx0cC5xcy5zdGF0ZS5zY29wZSA9IHNjb3BlLmpvaW4oJywnKTtcblxuXHRcdC8vIE1hcCBzY29wZXMgdG8gdGhlIHByb3ZpZGVycyBuYW1pbmcgY29udmVudGlvblxuXHRcdC8vIERvZXMgdGhpcyBoYXZlIGEgbWFwcGluZz9cblx0XHRzY29wZSA9IHNjb3BlLm1hcChpdGVtID0+ICgoaXRlbSBpbiBzY29wZU1hcCkgPyBzY29wZU1hcFtpdGVtXSA6IGl0ZW0pKTtcblxuXHRcdC8vIFN0cmluZ2lmeSBhbmQgQXJyYXlpZnkgc28gdGhhdCBkb3VibGUgbWFwcGVkIHNjb3BlcyBhcmUgZ2l2ZW4gdGhlIGNoYW5jZSB0byBiZSBmb3JtYXR0ZWRcblx0XHRzY29wZSA9IHNjb3BlLmpvaW4oJywnKS5zcGxpdChTQ09QRV9TUExJVCk7XG5cblx0XHQvLyBBZ2Fpbi4uLlxuXHRcdC8vIEZvcm1hdCByZW1vdmUgZHVwbGljYXRlcyBhbmQgZW1wdHkgdmFsdWVzXG5cdFx0c2NvcGUgPSB1bmlxdWUoc2NvcGUpLmZpbHRlcihmaWx0ZXJFbXB0eSk7XG5cblx0XHQvLyBKb2luIHdpdGggdGhlIGV4cGVjdGVkIHNjb3BlIGRlbGltaXRlciBpbnRvIGEgc3RyaW5nXG5cdFx0cC5xcy5zY29wZSA9IHNjb3BlLmpvaW4ocHJvdmlkZXIuc2NvcGVfZGVsaW0gfHwgJywnKTtcblxuXHRcdC8vIElzIHRoZSB1c2VyIGFscmVhZHkgc2lnbmVkIGluIHdpdGggdGhlIGFwcHJvcHJpYXRlIHNjb3BlcywgdmFsaWQgYWNjZXNzX3Rva2VuP1xuXHRcdGlmIChvcHRzLmZvcmNlID09PSBmYWxzZSkge1xuXG5cdFx0XHRpZiAoc2Vzc2lvbiAmJiAnYWNjZXNzX3Rva2VuJyBpbiBzZXNzaW9uICYmIHNlc3Npb24uYWNjZXNzX3Rva2VuICYmICdleHBpcmVzJyBpbiBzZXNzaW9uICYmIHNlc3Npb24uZXhwaXJlcyA+ICgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMWUzKSkge1xuXHRcdFx0XHQvLyBXaGF0IGlzIGRpZmZlcmVudCBhYm91dCB0aGUgc2NvcGVzIGluIHRoZSBzZXNzaW9uIHZzIHRoZSBzY29wZXMgaW4gdGhlIG5ldyBsb2dpbj9cblx0XHRcdFx0Y29uc3QgYSA9IGRpZmYoKHNlc3Npb24uc2NvcGUgfHwgJycpLnNwbGl0KFNDT1BFX1NQTElUKSwgKHAucXMuc3RhdGUuc2NvcGUgfHwgJycpLnNwbGl0KFNDT1BFX1NQTElUKSk7XG5cdFx0XHRcdGlmIChhLmxlbmd0aCA9PT0gMCkge1xuXG5cdFx0XHRcdFx0Ly8gT0sgdHJpZ2dlciB0aGUgY2FsbGJhY2tcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dW5jaGFuZ2VkOiB0cnVlLFxuXHRcdFx0XHRcdFx0bmV0d29yazogcC5uZXR3b3JrLFxuXHRcdFx0XHRcdFx0YXV0aFJlc3BvbnNlOiBzZXNzaW9uXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFBhZ2UgVVJMXG5cdFx0aWYgKG9wdHMuZGlzcGxheSA9PT0gJ3BhZ2UnICYmIG9wdHMucGFnZV91cmkpIHtcblx0XHRcdC8vIEFkZCBhIHBhZ2UgbG9jYXRpb24sIHBsYWNlIHRvIGVuZHVwIGFmdGVyIHNlc3Npb24gaGFzIGF1dGhlbnRpY2F0ZWRcblx0XHRcdHAucXMuc3RhdGUucGFnZV91cmkgPSBVcmwob3B0cy5wYWdlX3VyaSkuaHJlZjtcblx0XHR9XG5cblx0XHQvLyBCZXNwb2tlXG5cdFx0Ly8gT3ZlcnJpZGUgbG9naW4gcXVlcnlzdHJpbmdzIGZyb20gYXV0aF9vcHRpb25zXG5cdFx0aWYgKCdsb2dpbicgaW4gcHJvdmlkZXIgJiYgdHlwZW9mIChwcm92aWRlci5sb2dpbikgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdC8vIEZvcm1hdCB0aGUgcGFyYW1hdGVycyBhY2NvcmRpbmcgdG8gdGhlIHByb3ZpZGVycyBmb3JtYXR0aW5nIGZ1bmN0aW9uXG5cdFx0XHRwcm92aWRlci5sb2dpbihwKTtcblx0XHR9XG5cblx0XHQvLyBBZGQgT0F1dGggdG8gc3RhdGVcblx0XHQvLyBXaGVyZSB0aGUgc2VydmljZSBpcyBnb2luZyB0byB0YWtlIGFkdmFudGFnZSBvZiB0aGUgb2F1dGhfcHJveHlcblx0XHRpZiAoIS9cXGJ0b2tlblxcYi8udGVzdChyZXNwb25zZVR5cGUpIHx8XG5cdFx0cGFyc2VJbnQocHJvdmlkZXIub2F1dGgudmVyc2lvbiwgMTApIDwgMiB8fFxuXHRcdChvcHRzLmRpc3BsYXkgPT09ICdub25lJyAmJiBwcm92aWRlci5vYXV0aC5ncmFudCAmJiBzZXNzaW9uICYmIHNlc3Npb24ucmVmcmVzaF90b2tlbikpIHtcblxuXHRcdFx0Ly8gQWRkIHRoZSBvYXV0aCBlbmRwb2ludHNcblx0XHRcdHAucXMuc3RhdGUub2F1dGggPSBwcm92aWRlci5vYXV0aDtcblxuXHRcdFx0Ly8gQWRkIHRoZSBwcm94eSB1cmxcblx0XHRcdHAucXMuc3RhdGUub2F1dGhfcHJveHkgPSBvcHRzLm9hdXRoX3Byb3h5O1xuXG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBzdGF0ZSB0byBhIHN0cmluZ1xuXHRcdHAucXMuc3RhdGUgPSBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkocC5xcy5zdGF0ZSkpO1xuXG5cdFx0Ly8gVVJMXG5cdFx0aWYgKHBhcnNlSW50KHByb3ZpZGVyLm9hdXRoLnZlcnNpb24sIDEwKSA9PT0gMSkge1xuXG5cdFx0XHQvLyBUdXJuIHRoZSByZXF1ZXN0IHRvIHRoZSBPQXV0aCBQcm94eSBmb3IgMy1sZWdnZWQgYXV0aFxuXHRcdFx0dXJsID0gY3JlYXRlVXJsKG9wdHMub2F1dGhfcHJveHksIHAucXMsIGVuY29kZUZ1bmN0aW9uKTtcblx0XHR9XG5cblx0XHQvLyBSZWZyZXNoIHRva2VuXG5cdFx0ZWxzZSBpZiAob3B0cy5kaXNwbGF5ID09PSAnbm9uZScgJiYgcHJvdmlkZXIub2F1dGguZ3JhbnQgJiYgc2Vzc2lvbiAmJiBzZXNzaW9uLnJlZnJlc2hfdG9rZW4pIHtcblxuXHRcdFx0Ly8gQWRkIHRoZSByZWZyZXNoX3Rva2VuIHRvIHRoZSByZXF1ZXN0XG5cdFx0XHRwLnFzLnJlZnJlc2hfdG9rZW4gPSBzZXNzaW9uLnJlZnJlc2hfdG9rZW47XG5cblx0XHRcdC8vIERlZmluZSB0aGUgcmVxdWVzdCBwYXRoXG5cdFx0XHR1cmwgPSBjcmVhdGVVcmwob3B0cy5vYXV0aF9wcm94eSwgcC5xcywgZW5jb2RlRnVuY3Rpb24pO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHVybCA9IGNyZWF0ZVVybChwcm92aWRlci5vYXV0aC5hdXRoLCBwLnFzLCBlbmNvZGVGdW5jdGlvbik7XG5cdFx0fVxuXG5cdFx0Ly8gQnJvYWRjYXN0IHRoaXMgZXZlbnQgYXMgYW4gYXV0aDppbml0XG5cdFx0ZW1pdCgnYXV0aC5pbml0JywgcCk7XG5cblx0XHQvLyBFeGVjdXRlXG5cdFx0Ly8gVHJpZ2dlciBob3cgd2Ugd2FudCBzZWxmIGRpc3BsYXllZFxuXHRcdGlmIChvcHRzLmRpc3BsYXkgPT09ICdub25lJykge1xuXHRcdFx0Ly8gU2lnbi1pbiBpbiB0aGUgYmFja2dyb3VuZCwgaWZyYW1lXG5cdFx0XHR1dGlscy5pZnJhbWUodXJsLCByZWRpcmVjdFVyaSk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJpZ2dlcmluZyBwb3B1cD9cblx0XHRlbHNlIGlmIChvcHRzLmRpc3BsYXkgPT09ICdwb3B1cCcpIHtcblxuXHRcdFx0Y29uc3Qgd2luID0gdXRpbHMucG9wdXAodXJsLCByZWRpcmVjdFVyaSwgb3B0cy5wb3B1cCk7XG5cblx0XHRcdHBycy5wdXNoKG5ldyBQcm9taXNlKChhY2NlcHQsIHJlamVjdCkgPT4ge1xuXG5cdFx0XHRcdGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0XHRcdGlmICghd2luIHx8IHdpbi5jbG9zZWQpIHtcblx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXG5cdFx0XHRcdFx0XHRsZXQgcmVzcG9uc2UgPSBlcnJvcignY2FuY2VsbGVkJywgJ0xvZ2luIGhhcyBiZWVuIGNhbmNlbGxlZCcpO1xuXG5cdFx0XHRcdFx0XHRpZiAoIXBvcHVwKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gZXJyb3IoJ2Jsb2NrZWQnLCAnUG9wdXAgd2FzIGJsb2NrZWQnKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cmVzcG9uc2UubmV0d29yayA9IHAubmV0d29yaztcblxuXHRcdFx0XHRcdFx0cmVqZWN0KHJlc3BvbnNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sIDEwMCk7XG5cblx0XHRcdH0pKTtcblx0XHR9XG5cblx0XHRlbHNlIHtcblx0XHRcdHdpbmRvdy5sb2NhdGlvbiA9IHVybDtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBlbmNvZGVGdW5jdGlvbihzKSB7XG5cdFx0XHRyZXR1cm4gcztcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBmaWx0ZXJFbXB0eShzKSB7XG5cdFx0XHRyZXR1cm4gISFzO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgZmlyc3Qgc3VjY2VzcyBvciBmYWlsdXJlLi4uXG5cdFx0Y29uc3QgcHJvbWlzZSA9IFByb21pc2UucmFjZShwcnMpO1xuXG5cdFx0Ly8gQmluZCBjYWxsYmFjayB0byBib3RoIHJlamVjdCBhbmQgZnVsZmlsbCBzdGF0ZXNcblx0XHRwcm9taXNlLnRoZW4ocC5jYWxsYmFjaywgcC5jYWxsYmFjayk7XG5cblx0XHQvLyBUcmlnZ2VyIGFuIGV2ZW50IG9uIHRoZSBnbG9iYWwgbGlzdGVuZXJcblx0XHRmdW5jdGlvbiBlbWl0KHMsIHZhbHVlKSB7XG5cdFx0XHRoZWxsby5lbWl0KHMsIHZhbHVlKTtcblx0XHR9XG5cblx0XHRwcm9taXNlLnRoZW4oZW1pdC5iaW5kKHRoaXMsICdhdXRoLmxvZ2luIGF1dGgnKSwgZW1pdC5iaW5kKHRoaXMsICdhdXRoLmZhaWxlZCBhdXRoJykpO1xuXG5cdFx0cmV0dXJuIHByb21pc2U7XG5cdH0sXG5cblx0Ly8gUmVtb3ZlIGFueSBkYXRhIGFzc29jaWF0ZWQgd2l0aCBhIGdpdmVuIHNlcnZpY2Vcblx0Ly8gQHBhcmFtIHN0cmluZyBuYW1lIG9mIHRoZSBzZXJ2aWNlXG5cdC8vIEBwYXJhbSBmdW5jdGlvbiBjYWxsYmFja1xuXHRhc3luYyBsb2dvdXQoLi4uYXJncykge1xuXG5cdFx0Y29uc3QgdXRpbHMgPSB0aGlzLnV0aWxzO1xuXG5cdFx0Y29uc3QgcCA9IGFyZ21hcCh7bmFtZTogJ3MnLCBvcHRpb25zOiAnbycsIGNhbGxiYWNrOiAnZid9LCBhcmdzKTtcblxuXHRcdGNvbnN0IHBycyA9IFtdO1xuXG5cdFx0cC5vcHRpb25zID0gcC5vcHRpb25zIHx8IHt9O1xuXG5cdFx0Ly8gTmV0d29ya1xuXHRcdHAubmFtZSA9IHAubmFtZSB8fCB0aGlzLnNldHRpbmdzLmRlZmF1bHRfc2VydmljZTtcblx0XHRwLmF1dGhSZXNwb25zZSA9IHV0aWxzLnN0b3JlKHAubmFtZSk7XG5cblx0XHRpZiAocC5uYW1lICYmICEocC5uYW1lIGluIHRoaXMuc2VydmljZXMpKSB7XG5cblx0XHRcdHRocm93IGVycm9yKCdpbnZhbGlkX25ldHdvcmsnLCAnVGhlIG5ldHdvcmsgd2FzIHVucmVjb2duaXplZCcpO1xuXG5cdFx0fVxuXHRcdGVsc2UgaWYgKHAubmFtZSAmJiBwLmF1dGhSZXNwb25zZSkge1xuXG5cdFx0XHRjb25zdCBwcm9taXNlTG9nb3V0ID0gbmV3IFByb21pc2UoYWNjZXB0ID0+IHtcblx0XHRcdFx0Ly8gUnVuIGFuIGFzeW5jIG9wZXJhdGlvbiB0byByZW1vdmUgdGhlIHVzZXJzIHNlc3Npb25cblx0XHRcdFx0Y29uc3QgX29wdHMgPSB7fTtcblxuXHRcdFx0XHRpZiAocC5vcHRpb25zLmZvcmNlKSB7XG5cdFx0XHRcdFx0bGV0IGxvZ291dCA9IHRoaXMuc2VydmljZXNbcC5uYW1lXS5sb2dvdXQ7XG5cdFx0XHRcdFx0aWYgKGxvZ291dCkge1xuXHRcdFx0XHRcdFx0Ly8gQ29udmVydCBsb2dvdXQgdG8gVVJMIHN0cmluZyxcblx0XHRcdFx0XHRcdC8vIElmIG5vIHN0cmluZyBpcyByZXR1cm5lZCwgdGhlbiB0aGlzIGZ1bmN0aW9uIHdpbGwgaGFuZGxlIHRoZSBsb2dvdXQgYXN5bmMgc3R5bGVcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgKGxvZ291dCkgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRcdFx0bG9nb3V0ID0gbG9nb3V0KGFjY2VwdCwgcCk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIElmIGxvZ291dCBpcyBhIHN0cmluZyB0aGVuIGFzc3VtZSBVUkwgYW5kIG9wZW4gaW4gaWZyYW1lLlxuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiAobG9nb3V0KSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0XHRcdFx0dXRpbHMuaWZyYW1lKGxvZ291dCk7XG5cdFx0XHRcdFx0XHRcdF9vcHRzLmZvcmNlID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0X29wdHMubWVzc2FnZSA9ICdMb2dvdXQgc3VjY2VzcyBvbiBwcm92aWRlcnMgc2l0ZSB3YXMgaW5kZXRlcm1pbmF0ZSc7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlbHNlIGlmIChsb2dvdXQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0XHQvLyBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gd2lsbCBoYW5kbGUgdGhlIHJlc3BvbnNlLlxuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjZXB0KF9vcHRzKTtcblx0XHRcdH0pXG5cdFx0XHRcdC50aGVuKG9wdHMgPT4ge1xuXG5cdFx0XHRcdFx0Ly8gUmVtb3ZlIGZyb20gdGhlIHN0b3JlXG5cdFx0XHRcdFx0dXRpbHMuc3RvcmUocC5uYW1lLCBudWxsKTtcblxuXHRcdFx0XHRcdC8vIEVtaXQgZXZlbnRzIGJ5IGRlZmF1bHRcblx0XHRcdFx0XHRyZXR1cm4gbWVyZ2Uoe1xuXHRcdFx0XHRcdFx0bmV0d29yazogcC5uYW1lXG5cdFx0XHRcdFx0fSwgb3B0cyB8fCB7fSk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRwcnMucHVzaChwcm9taXNlTG9nb3V0KTtcblxuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHRocm93IGVycm9yKCdpbnZhbGlkX3Nlc3Npb24nLCAnVGhlcmUgd2FzIG5vIHNlc3Npb24gdG8gcmVtb3ZlJyk7XG5cdFx0fVxuXG5cdFx0Ly8gUHJvbXNlXG5cdFx0Y29uc3QgcHJvbWlzZSA9IFByb21pc2UucmFjZShwcnMpO1xuXG5cdFx0Ly8gQWRkIGNhbGxiYWNrIHRvIGV2ZW50c1xuXHRcdHByb21pc2UudGhlbihwLmNhbGxiYWNrLCBwLmNhbGxiYWNrKTtcblxuXHRcdC8vIFRyaWdnZXIgYW4gZXZlbnQgb24gdGhlIGdsb2JhbCBsaXN0ZW5lclxuXHRcdHByb21pc2UudGhlbihcblx0XHRcdHZhbHVlID0+IGhlbGxvLmVtaXQoJ2F1dGgubG9nb3V0IGF1dGgnLCB2YWx1ZSksXG5cdFx0XHRlcnIgPT4gaGVsbG8uZW1pdCgnZXJyb3InLCBlcnIpXG5cdFx0KTtcblxuXHRcdHJldHVybiBwcm9taXNlO1xuXHR9LFxuXG5cdC8vIFJldHVybnMgYWxsIHRoZSBzZXNzaW9ucyB0aGF0IGFyZSBzdWJzY3JpYmVkIHRvb1xuXHQvLyBAcGFyYW0gc3RyaW5nIG9wdGlvbmFsLCBuYW1lIG9mIHRoZSBzZXJ2aWNlIHRvIGdldCBpbmZvcm1hdGlvbiBhYm91dC5cblx0Z2V0QXV0aFJlc3BvbnNlKHNlcnZpY2UpIHtcblxuXHRcdC8vIElmIHRoZSBzZXJ2aWNlIGRvZXNuJ3QgZXhpc3Rcblx0XHRzZXJ2aWNlID0gc2VydmljZSB8fCB0aGlzLnNldHRpbmdzLmRlZmF1bHRfc2VydmljZTtcblxuXHRcdGlmICghc2VydmljZSB8fCAhKHNlcnZpY2UgaW4gdGhpcy5zZXJ2aWNlcykpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnV0aWxzLnN0b3JlKHNlcnZpY2UpIHx8IG51bGw7XG5cdH0sXG5cblx0Ly8gRXZlbnRzOiBwbGFjZWhvbGRlciBmb3IgdGhlIGV2ZW50c1xuXHRldmVudHM6IHt9XG59KTtcblxuZnVuY3Rpb24gZXJyb3IoY29kZSwgbWVzc2FnZSkge1xuXHRyZXR1cm4ge1xuXHRcdGVycm9yOiB7XG5cdFx0XHRjb2RlLFxuXHRcdFx0bWVzc2FnZVxuXHRcdH1cblx0fTtcbn1cblxuaGVsbG8udXRpbHMgPSB7XG5cdGlmcmFtZSxcblx0cG9wdXAsXG5cdHJlcXVlc3QsXG5cdHN0b3JlXG59O1xuXG4vLyBDb3JlIHV0aWxpdGllc1xuZXh0ZW5kKGhlbGxvLnV0aWxzLCB7XG5cblx0Ly8gT0F1dGggYW5kIEFQSSByZXNwb25zZSBoYW5kbGVyXG5cdHJlc3BvbnNlSGFuZGxlcih3aW5kb3csIHBhcmVudCkge1xuXHRcdGNvbnN0IHV0aWxzID0gdGhpcztcblxuXHRcdGxldCBwO1xuXHRcdGNvbnN0IGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG5cdFx0Y29uc3QgcmVkaXJlY3QgPSAobG9jYXRpb24uYXNzaWduICYmIGxvY2F0aW9uLmFzc2lnbi5iaW5kKGxvY2F0aW9uKSkgfHwgKHVybCA9PiB7XG5cdFx0XHR3aW5kb3cubG9jYXRpb24gPSB1cmw7XG5cdFx0fSk7XG5cblx0XHQvLyBJcyB0aGlzIGFuIGF1dGggcmVsYXkgbWVzc2FnZSB3aGljaCBuZWVkcyB0byBjYWxsIHRoZSBwcm94eT9cblx0XHRwID0gcGFyYW0obG9jYXRpb24uc2VhcmNoKTtcblxuXHRcdC8vIE9BdXRoMiBvciBPQXV0aDEgc2VydmVyIHJlc3BvbnNlP1xuXHRcdGlmIChwICYmIHAuc3RhdGUgJiYgKHAuY29kZSB8fCBwLm9hdXRoX3Rva2VuKSkge1xuXG5cdFx0XHRjb25zdCBzdGF0ZSA9IEpTT04ucGFyc2UocC5zdGF0ZSk7XG5cblx0XHRcdC8vIEFkZCB0aGlzIHBhdGggYXMgdGhlIHJlZGlyZWN0X3VyaVxuXHRcdFx0cC5yZWRpcmVjdF91cmkgPSBzdGF0ZS5yZWRpcmVjdF91cmkgfHwgbG9jYXRpb24uaHJlZi5yZXBsYWNlKC9bPyNdLiokLywgJycpO1xuXG5cdFx0XHQvLyBSZWRpcmVjdCB0byB0aGUgaG9zdFxuXHRcdFx0Y29uc3QgcGF0aCA9IGAke3N0YXRlLm9hdXRoX3Byb3h5fT8ke3BhcmFtKHApfWA7XG5cblx0XHRcdHJlZGlyZWN0KHBhdGgpO1xuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gU2F2ZSBzZXNzaW9uLCBmcm9tIHJlZGlyZWN0ZWQgYXV0aGVudGljYXRpb25cblx0XHQvLyAjYWNjZXNzX3Rva2VuIGhhcyBjb21lIGluP1xuXHRcdC8vXG5cdFx0Ly8gRkFDRUJPT0sgaXMgcmV0dXJuaW5nIGF1dGggZXJyb3JzIHdpdGhpbiBhcyBhIHF1ZXJ5X3N0cmluZy4uLiB0aGF0cyBhIHN0aWNrbGVyIGZvciBjb25zaXN0ZW5jeS5cblx0XHQvLyBTb3VuZENsb3VkIGlzIHRoZSBzdGF0ZSBpbiB0aGUgcXVlcnlzdHJpbmcgYW5kIHRoZSB0b2tlbiBpbiB0aGUgaGFzaHRhZywgc28gd2UnbGwgbWl4IHRoZSB0d28gdG9nZXRoZXJcblxuXHRcdHAgPSBtZXJnZShwYXJhbShsb2NhdGlvbi5zZWFyY2ggfHwgJycpLCBwYXJhbShsb2NhdGlvbi5oYXNoIHx8ICcnKSk7XG5cblx0XHQvLyBJZiBwLnN0YXRlXG5cdFx0aWYgKHAgJiYgJ3N0YXRlJyBpbiBwKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBhbnkgYWRkaXRpb24gaW5mb3JtYXRpb25cblx0XHRcdC8vIEUuZy4gcC5zdGF0ZSA9ICdmYWNlYm9vay5wYWdlJztcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbnN0IGEgPSBKU09OLnBhcnNlKHAuc3RhdGUpO1xuXHRcdFx0XHRleHRlbmQocCwgYSk7XG5cdFx0XHR9XG5cdFx0XHRjYXRjaCAoZSkge1xuXHRcdFx0XHRoZWxsby5lbWl0KCdlcnJvcicsICdDb3VsZCBub3QgZGVjb2RlIHN0YXRlIHBhcmFtZXRlcicpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2Nlc3NfdG9rZW4/XG5cdFx0XHRpZiAoKCdhY2Nlc3NfdG9rZW4nIGluIHAgJiYgcC5hY2Nlc3NfdG9rZW4pICYmIHAubmV0d29yaykge1xuXG5cdFx0XHRcdGlmICghcC5leHBpcmVzX2luIHx8IHBhcnNlSW50KHAuZXhwaXJlc19pbiwgMTApID09PSAwKSB7XG5cdFx0XHRcdFx0Ly8gSWYgcC5leHBpcmVzX2luIGlzIHVuc2V0LCBzZXQgdG8gMFxuXHRcdFx0XHRcdHAuZXhwaXJlc19pbiA9IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRwLmV4cGlyZXNfaW4gPSBwYXJzZUludChwLmV4cGlyZXNfaW4sIDEwKTtcblx0XHRcdFx0cC5leHBpcmVzID0gKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLyAxZTMpICsgKHAuZXhwaXJlc19pbiB8fCAoNjAgKiA2MCAqIDI0ICogMzY1KSk7XG5cblx0XHRcdFx0Ly8gTGV0cyB1c2UgdGhlIFwic3RhdGVcIiB0byBhc3NpZ24gaXQgdG8gb25lIG9mIG91ciBuZXR3b3Jrc1xuXHRcdFx0XHRhdXRoQ2FsbGJhY2socCwgd2luZG93LCBwYXJlbnQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBFcnJvcj0/XG5cdFx0XHQvLyAmZXJyb3JfZGVzY3JpcHRpb249P1xuXHRcdFx0Ly8gJnN0YXRlPT9cblx0XHRcdGVsc2UgaWYgKCgnZXJyb3InIGluIHAgJiYgcC5lcnJvcikgJiYgcC5uZXR3b3JrKSB7XG5cblx0XHRcdFx0cC5lcnJvciA9IHtcblx0XHRcdFx0XHRjb2RlOiBwLmVycm9yLFxuXHRcdFx0XHRcdG1lc3NhZ2U6IHAuZXJyb3JfbWVzc2FnZSB8fCBwLmVycm9yX2Rlc2NyaXB0aW9uXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGV0IHRoZSBzdGF0ZSBoYW5kbGVyIGhhbmRsZSBpdFxuXHRcdFx0XHRhdXRoQ2FsbGJhY2socCwgd2luZG93LCBwYXJlbnQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBUEkgY2FsbCwgb3IgYSBjYW5jZWxsZWQgbG9naW5cblx0XHRcdC8vIFJlc3VsdCBpcyBzZXJpYWxpemVkIEpTT04gc3RyaW5nXG5cdFx0XHRlbHNlIGlmIChwLmNhbGxiYWNrICYmIHAuY2FsbGJhY2sgaW4gcGFyZW50KSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlciBhIGZ1bmN0aW9uIGluIHRoZSBwYXJlbnRcblx0XHRcdFx0Y29uc3QgcmVzID0gJ3Jlc3VsdCcgaW4gcCAmJiBwLnJlc3VsdCA/IEpTT04ucGFyc2UocC5yZXN1bHQpIDogZmFsc2U7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgY2FsbGJhY2sgb24gdGhlIHBhcmVudFxuXHRcdFx0XHRjYWxsYmFjayhwYXJlbnQsIHAuY2FsbGJhY2spKHJlcyk7XG5cdFx0XHRcdGNsb3NlV2luZG93KHdpbmRvdyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgcGFnZSBpcyBzdGlsbCBvcGVuXG5cdFx0XHRpZiAocC5wYWdlX3VyaSkge1xuXHRcdFx0XHRyZWRpcmVjdChwLnBhZ2VfdXJpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPQXV0aCByZWRpcmVjdCwgZml4ZXMgVVJJIGZyYWdtZW50cyBmcm9tIGJlaW5nIGxvc3QgaW4gU2FmYXJpXG5cdFx0Ly8gKFVSSSBGcmFnbWVudHMgd2l0aGluIDMwMiBMb2NhdGlvbiBVUkkgYXJlIGxvc3Qgb3ZlciBIVFRQUylcblx0XHQvLyBMb2FkaW5nIHRoZSByZWRpcmVjdC5odG1sIGJlZm9yZSB0cmlnZ2VyaW5nIHRoZSBPQXV0aCBGbG93IHNlZW1zIHRvIGZpeCBpdC5cblx0XHRlbHNlIGlmICgnb2F1dGhfcmVkaXJlY3QnIGluIHApIHtcblxuXHRcdFx0cmVkaXJlY3QoZGVjb2RlVVJJQ29tcG9uZW50KHAub2F1dGhfcmVkaXJlY3QpKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBUcmlnZ2VyIGEgY2FsbGJhY2sgdG8gYXV0aGVudGljYXRlXG5cdFx0ZnVuY3Rpb24gYXV0aENhbGxiYWNrKG9iaiwgd2luZG93LCBwYXJlbnQpIHtcblxuXHRcdFx0Y29uc3QgY2IgPSBvYmouY2FsbGJhY2s7XG5cdFx0XHRjb25zdCBuZXR3b3JrID0gb2JqLm5ldHdvcms7XG5cblx0XHRcdC8vIFRyaWdnZXIgdGhlIGNhbGxiYWNrIG9uIHRoZSBwYXJlbnRcblx0XHRcdHV0aWxzLnN0b3JlKG5ldHdvcmssIG9iaik7XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwYWdlIHJlcXVlc3QgaXQgaGFzIG5vIHBhcmVudCBvciBvcGVuZXIgd2luZG93IHRvIGhhbmRsZSBjYWxsYmFja3Ncblx0XHRcdGlmICgoJ2Rpc3BsYXknIGluIG9iaikgJiYgb2JqLmRpc3BsYXkgPT09ICdwYWdlJykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBmcm9tIHNlc3Npb24gb2JqZWN0XG5cdFx0XHRpZiAocGFyZW50ICYmIGNiICYmIGNiIGluIHBhcmVudCkge1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0ZGVsZXRlIG9iai5jYWxsYmFjaztcblx0XHRcdFx0fVxuXHRcdFx0XHRjYXRjaCAoZSkge1xuXHRcdFx0XHRcdC8vIGNvbnRpbnVlXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBVcGRhdGUgc3RvcmVcblx0XHRcdFx0dXRpbHMuc3RvcmUobmV0d29yaywgb2JqKTtcblxuXHRcdFx0XHQvLyBDYWxsIHRoZSBnbG9iYWxFdmVudCBmdW5jdGlvbiBvbiB0aGUgcGFyZW50XG5cdFx0XHRcdC8vIEl0J3Mgc2FmZXIgdG8gcGFzcyBiYWNrIGEgc3RyaW5nIHRvIHRoZSBwYXJlbnQsXG5cdFx0XHRcdC8vIFJhdGhlciB0aGFuIGFuIG9iamVjdC9hcnJheSAoYmV0dGVyIGZvciBJRTgpXG5cdFx0XHRcdGNvbnN0IHN0ciA9IEpTT04uc3RyaW5naWZ5KG9iaik7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRjYWxsYmFjayhwYXJlbnQsIGNiKShzdHIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0Ly8gRXJyb3IgdGhyb3duIHdoaWxzdCBleGVjdXRpbmcgcGFyZW50IGNhbGxiYWNrXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Y2xvc2VXaW5kb3cod2luZG93KTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjYWxsYmFjayhwYXJlbnQsIGNhbGxiYWNrSUQpIHtcblx0XHRcdGlmIChjYWxsYmFja0lELmluZGV4T2YoJ19oZWxsb2pzXycpICE9PSAwKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR0aHJvdyBgQ291bGQgbm90IGV4ZWN1dGUgY2FsbGJhY2sgJHtjYWxsYmFja0lEfWA7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBwYXJlbnRbY2FsbGJhY2tJRF07XG5cdFx0fVxuXHR9XG59KTtcblxuXG4vLyBFdmVudHNcbi8vIEV4dGVuZCB0aGUgaGVsbG8gb2JqZWN0IHdpdGggaXRzIG93biBldmVudCBpbnN0YW5jZVxucHVic3ViLmNhbGwoaGVsbG8pO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gTW9uaXRvcmluZyBzZXNzaW9uIHN0YXRlXG4vLyBDaGVjayBmb3Igc2Vzc2lvbiBjaGFuZ2VzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4oZnVuY3Rpb24oaGVsbG8pIHtcblxuXHQvLyBNb25pdG9yIGZvciBhIGNoYW5nZSBpbiBzdGF0ZSBhbmQgZmlyZVxuXHRjb25zdCBvbGRTZXNzaW9ucyA9IHt9O1xuXG5cdC8vIEhhc2ggb2YgZXhwaXJlZCB0b2tlbnNcblx0Y29uc3QgZXhwaXJlZCA9IHt9O1xuXG5cdC8vIExpc3RlbiB0byBvdGhlciB0cmlnZ2VycyB0byBBdXRoIGV2ZW50cywgdXNlIHRoZXNlIHRvIHVwZGF0ZSB0aGlzXG5cdGhlbGxvLm9uKCdhdXRoLmxvZ2luLCBhdXRoLmxvZ291dCcsIGF1dGggPT4ge1xuXHRcdGlmIChhdXRoICYmIHR5cGVvZiAoYXV0aCkgPT09ICdvYmplY3QnICYmIGF1dGgubmV0d29yaykge1xuXHRcdFx0b2xkU2Vzc2lvbnNbYXV0aC5uZXR3b3JrXSA9IGhlbGxvLnV0aWxzLnN0b3JlKGF1dGgubmV0d29yaykgfHwge307XG5cdFx0fVxuXHR9KTtcblxuXHQoZnVuY3Rpb24gc2VsZigpIHtcblxuXHRcdGNvbnN0IENVUlJFTlRfVElNRSA9ICgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMWUzKTtcblxuXHRcdC8vIExvb3AgdGhyb3VnaCB0aGUgc2VydmljZXNcblx0XHRmb3IgKGNvbnN0IG5hbWUgaW4gaGVsbG8uc2VydmljZXMpIHtcblx0XHRcdGlmIChoZWxsby5zZXJ2aWNlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuXG5cdFx0XHRcdGlmICghaGVsbG8uc2VydmljZXNbbmFtZV0uaWQpIHtcblx0XHRcdFx0Ly8gV2UgaGF2ZW4ndCBhdHRhY2hlZCBhbiBJRCBzbyBkb250IGxpc3Rlbi5cblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBzZXNzaW9uXG5cdFx0XHRcdGNvbnN0IHNlc3Npb24gPSBoZWxsby51dGlscy5zdG9yZShuYW1lKSB8fCB7fTtcblx0XHRcdFx0Y29uc3QgcHJvdmlkZXIgPSBoZWxsby5zZXJ2aWNlc1tuYW1lXTtcblx0XHRcdFx0Y29uc3Qgb2xkU2VzcyA9IG9sZFNlc3Npb25zW25hbWVdIHx8IHt9O1xuXG5cdFx0XHRcdGNvbnN0IGVtaXQgPSBmdW5jdGlvbihldmVudE5hbWUpIHtcblx0XHRcdFx0XHRoZWxsby5lbWl0KGBhdXRoLiR7ZXZlbnROYW1lfWAsIHtcblx0XHRcdFx0XHRcdG5ldHdvcms6IG5hbWUsXG5cdFx0XHRcdFx0XHRhdXRoUmVzcG9uc2U6IHNlc3Npb25cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gZm9yIGdsb2JhbEV2ZW50cyB0aGF0IGRpZCBub3QgZ2V0IHRyaWdnZXJlZCBmcm9tIHRoZSBjaGlsZFxuXHRcdFx0XHRpZiAoc2Vzc2lvbiAmJiAnY2FsbGJhY2snIGluIHNlc3Npb24pIHtcblxuXHRcdFx0XHRcdC8vIFRvIGRvIHJlbW92ZSBmcm9tIHNlc3Npb24gb2JqZWN0Li4uXG5cdFx0XHRcdFx0Y29uc3QgY2IgPSBzZXNzaW9uLmNhbGxiYWNrO1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRkZWxldGUgc2Vzc2lvbi5jYWxsYmFjaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdC8vIENvbnRpbnVlXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gVXBkYXRlIHN0b3JlXG5cdFx0XHRcdFx0Ly8gUmVtb3ZpbmcgdGhlIGNhbGxiYWNrXG5cdFx0XHRcdFx0aGVsbG8udXRpbHMuc3RvcmUobmFtZSwgc2Vzc2lvbik7XG5cblx0XHRcdFx0XHQvLyBFbWl0IGdsb2JhbCBldmVudHNcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0d2luZG93W2NiXShzZXNzaW9uKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdC8vIENvbnRpbnVlXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVmcmVzaCB0b2tlblxuXHRcdFx0XHRpZiAoc2Vzc2lvbiAmJiAoJ2V4cGlyZXMnIGluIHNlc3Npb24pICYmIHNlc3Npb24uZXhwaXJlcyA8IENVUlJFTlRfVElNRSkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgYXV0byByZWZyZXNoIGlzIHBvc3NpYmxlXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHRoZSBicm93c2VyIHN1cHBvcnRzXG5cdFx0XHRcdFx0Y29uc3QgcmVmcmVzaCA9IHByb3ZpZGVyLnJlZnJlc2ggfHwgc2Vzc2lvbi5yZWZyZXNoX3Rva2VuO1xuXG5cdFx0XHRcdFx0Ly8gSGFzIHRoZSByZWZyZXNoIGJlZW4gcnVuIHJlY2VudGx5P1xuXHRcdFx0XHRcdGlmIChyZWZyZXNoICYmICghKG5hbWUgaW4gZXhwaXJlZCkgfHwgZXhwaXJlZFtuYW1lXSA8IENVUlJFTlRfVElNRSkpIHtcblx0XHRcdFx0XHRcdC8vIFRyeSB0byByZXNpZ25pblxuXHRcdFx0XHRcdFx0aGVsbG8uZW1pdCgnbm90aWNlJywgYCR7bmFtZX0gaGFzIGV4cGlyZWQgdHJ5aW5nIHRvIHJlc2lnbmluYCk7XG5cdFx0XHRcdFx0XHRoZWxsby5sb2dpbihuYW1lLCB7ZGlzcGxheTogJ25vbmUnLCBmb3JjZTogZmFsc2V9KTtcblxuXHRcdFx0XHRcdFx0Ly8gVXBkYXRlIGV4cGlyZWQsIGV2ZXJ5IDEwIG1pbnV0ZXNcblx0XHRcdFx0XHRcdGV4cGlyZWRbbmFtZV0gPSBDVVJSRU5UX1RJTUUgKyA2MDA7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRG9lcyB0aGlzIHByb3ZpZGVyIG5vdCBzdXBwb3J0IHJlZnJlc2hcblx0XHRcdFx0XHRlbHNlIGlmICghcmVmcmVzaCAmJiAhKG5hbWUgaW4gZXhwaXJlZCkpIHtcblx0XHRcdFx0XHQvLyBMYWJlbCB0aGUgZXZlbnRcblx0XHRcdFx0XHRcdGVtaXQoJ2V4cGlyZWQnKTtcblx0XHRcdFx0XHRcdGV4cGlyZWRbbmFtZV0gPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIElmIHNlc3Npb24gaGFzIGV4cGlyZWQgdGhlbiB3ZSBkb250IHdhbnQgdG8gc3RvcmUgaXRzIHZhbHVlIHVudGlsIGl0IGNhbiBiZSBlc3RhYmxpc2hlZCB0aGF0IGl0cyBiZWVuIHVwZGF0ZWRcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhcyBzZXNzaW9uIGNoYW5nZWQ/XG5cdFx0XHRcdGVsc2UgaWYgKG9sZFNlc3MuYWNjZXNzX3Rva2VuID09PSBzZXNzaW9uLmFjY2Vzc190b2tlbiAmJlxuXHRcdFx0b2xkU2Vzcy5leHBpcmVzID09PSBzZXNzaW9uLmV4cGlyZXMpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFjY2Vzc190b2tlbiBoYXMgYmVlbiByZW1vdmVkXG5cdFx0XHRcdGVsc2UgaWYgKCFzZXNzaW9uLmFjY2Vzc190b2tlbiAmJiBvbGRTZXNzLmFjY2Vzc190b2tlbikge1xuXHRcdFx0XHRcdGVtaXQoJ2xvZ291dCcpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWNjZXNzX3Rva2VuIGhhcyBiZWVuIGNyZWF0ZWRcblx0XHRcdFx0ZWxzZSBpZiAoc2Vzc2lvbi5hY2Nlc3NfdG9rZW4gJiYgIW9sZFNlc3MuYWNjZXNzX3Rva2VuKSB7XG5cdFx0XHRcdFx0ZW1pdCgnbG9naW4nKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFjY2Vzc190b2tlbiBoYXMgYmVlbiB1cGRhdGVkXG5cdFx0XHRcdGVsc2UgaWYgKHNlc3Npb24uZXhwaXJlcyAhPT0gb2xkU2Vzcy5leHBpcmVzKSB7XG5cdFx0XHRcdFx0ZW1pdCgndXBkYXRlJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBVcGRhdGVkIHN0b3JlZCBzZXNzaW9uXG5cdFx0XHRcdG9sZFNlc3Npb25zW25hbWVdID0gc2Vzc2lvbjtcblxuXHRcdFx0XHQvLyBSZW1vdmUgdGhlIGV4cGlyZWQgZmxhZ3Ncblx0XHRcdFx0aWYgKG5hbWUgaW4gZXhwaXJlZCkge1xuXHRcdFx0XHRcdGRlbGV0ZSBleHBpcmVkW25hbWVdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgZXJyb3IgZXZlbnRzXG5cdFx0c2V0VGltZW91dChzZWxmLCAxMDAwKTtcblx0fSkoKTtcblxufSkoaGVsbG8pO1xuXG4vLyBFT0YgQ09SRSBsaWJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEFQSVxuLy8gQHBhcmFtIHBhdGggICAgc3RyaW5nXG4vLyBAcGFyYW0gcXVlcnkgICBvYmplY3QgKG9wdGlvbmFsKVxuLy8gQHBhcmFtIG1ldGhvZCAgc3RyaW5nIChvcHRpb25hbClcbi8vIEBwYXJhbSBkYXRhICAgIG9iamVjdCAob3B0aW9uYWwpXG4vLyBAcGFyYW0gdGltZW91dCBpbnRlZ2VyIChvcHRpb25hbClcbi8vIEBwYXJhbSBjYWxsYmFjayAgZnVuY3Rpb24gKG9wdGlvbmFsKVxuXG5oZWxsby5hcGkgPSBhc3luYyBmdW5jdGlvbiguLi5hcmdzKSB7XG5cblx0Ly8gQXJndW1lbnRzXG5cdGNvbnN0IHAgPSBhcmdtYXAoe3BhdGg6ICdzIScsIHF1ZXJ5OiAnbycsIG1ldGhvZDogJ3MnLCBkYXRhOiAnbycsIHRpbWVvdXQ6ICdpJywgY2FsbGJhY2s6ICdmJ30sIGFyZ3MpO1xuXG5cdC8vIFJlbW92ZSB0aGUgbmV0d29yayBmcm9tIHBhdGgsIGUuZy4gZmFjZWJvb2s6L21lL2ZyaWVuZHNcblx0Ly8gUmVzdWx0cyBpbiB7IG5ldHdvcmsgOiBmYWNlYm9vaywgcGF0aCA6IG1lL2ZyaWVuZHMgfVxuXHRpZiAoIXAgfHwgIXAucGF0aCkge1xuXHRcdHRocm93IGVycm9yKCdpbnZhbGlkX3BhdGgnLCAnTWlzc2luZyB0aGUgcGF0aCBwYXJhbWV0ZXIgZnJvbSB0aGUgcmVxdWVzdCcpO1xuXHR9XG5cblx0Ly8gTWV0aG9kXG5cdHAubWV0aG9kID0gKHAubWV0aG9kIHx8ICdnZXQnKS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEhlYWRlcnNcblx0cC5oZWFkZXJzID0gcC5oZWFkZXJzIHx8IHt9O1xuXG5cdC8vIFJlc3BvbnNlIGZvcm1hdFxuXHRwLnJlc3BvbnNlVHlwZSA9IHAucmVzcG9uc2VUeXBlIHx8ICdqc29uJztcblxuXHQvLyBRdWVyeVxuXHRwLnF1ZXJ5ID0gcC5xdWVyeSB8fCB7fTtcblxuXHQvLyBJZiBnZXQsIHB1dCBhbGwgcGFyYW1ldGVycyBpbnRvIHF1ZXJ5XG5cdGlmIChwLm1ldGhvZCA9PT0gJ2dldCcgfHwgcC5tZXRob2QgPT09ICdkZWxldGUnKSB7XG5cdFx0ZXh0ZW5kKHAucXVlcnksIHAuZGF0YSk7XG5cdFx0cC5kYXRhID0ge307XG5cdH1cblxuXHRjb25zdCBkYXRhID0gcC5kYXRhID0gcC5kYXRhIHx8IHt9O1xuXG5cdHAucGF0aCA9IHAucGF0aC5yZXBsYWNlKC9eXFwvKy8sICcnKTtcblx0Y29uc3QgYSA9IChwLnBhdGguc3BsaXQoL1svOl0vLCAyKSB8fCBbXSlbMF0udG9Mb3dlckNhc2UoKTtcblxuXHRpZiAoYSBpbiB0aGlzLnNlcnZpY2VzKSB7XG5cdFx0cC5uZXR3b3JrID0gYTtcblx0XHRjb25zdCByZWcgPSBuZXcgUmVnRXhwKGBeJHthfTo/Lz9gKTtcblx0XHRwLnBhdGggPSBwLnBhdGgucmVwbGFjZShyZWcsICcnKTtcblx0fVxuXG5cdC8vIE5ldHdvcmsgJiBQcm92aWRlclxuXHQvLyBEZWZpbmUgdGhlIG5ldHdvcmsgdGhhdCB0aGlzIHJlcXVlc3QgaXMgbWFkZSBmb3Jcblx0cC5uZXR3b3JrID0gdGhpcy5zZXR0aW5ncy5kZWZhdWx0X3NlcnZpY2UgPSBwLm5ldHdvcmsgfHwgdGhpcy5zZXR0aW5ncy5kZWZhdWx0X3NlcnZpY2U7XG5cdGNvbnN0IG8gPSB0aGlzLnNlcnZpY2VzW3AubmV0d29ya107XG5cblx0Ly8gSU5WQUxJRFxuXHQvLyBJcyB0aGVyZSBubyBzZXJ2aWNlIGJ5IHRoZSBnaXZlbiBuZXR3b3JrIG5hbWU/XG5cdGlmICghbykge1xuXHRcdHRocm93IGVycm9yKCdpbnZhbGlkX25ldHdvcmsnLCBgQ291bGQgbm90IG1hdGNoIHRoZSBzZXJ2aWNlIHJlcXVlc3RlZDogJHsgIHAubmV0d29ya31gKTtcblx0fVxuXG5cdC8vIFBBVEhcblx0Ly8gQXMgbG9uZyBhcyB0aGUgcGF0aCBpc24ndCBmbGFnZ2VkIGFzIHVuYXZhaWFibGUsIGUuZy4gcGF0aCA9PSBmYWxzZVxuXG5cdGlmICghKCEocC5tZXRob2QgaW4gbykgfHwgIShwLnBhdGggaW4gb1twLm1ldGhvZF0pIHx8IG9bcC5tZXRob2RdW3AucGF0aF0gIT09IGZhbHNlKSkge1xuXHRcdHRocm93IGVycm9yKCdpbnZhbGlkX3BhdGgnLCAnVGhlIHByb3ZpZGVkIHBhdGggaXMgbm90IGF2YWlsYWJsZSBvbiB0aGUgc2VsZWN0ZWQgbmV0d29yaycpO1xuXHR9XG5cblx0Ly8gUFJPWFlcblx0Ly8gT0F1dGgxIGNhbGxzIGFsd2F5cyBuZWVkIGEgcHJveHlcblxuXHRpZiAoIXAub2F1dGhfcHJveHkpIHtcblx0XHRwLm9hdXRoX3Byb3h5ID0gdGhpcy5zZXR0aW5ncy5vYXV0aF9wcm94eTtcblx0fVxuXG5cdGlmICghKCdwcm94eScgaW4gcCkpIHtcblx0XHRwLnByb3h5ID0gcC5vYXV0aF9wcm94eSAmJiBvLm9hdXRoICYmIHBhcnNlSW50KG8ub2F1dGgudmVyc2lvbiwgMTApID09PSAxO1xuXHR9XG5cblx0Ly8gVElNRU9VVFxuXHQvLyBBZG9wdCB0aW1lb3V0IGZyb20gZ2xvYmFsIHNldHRpbmdzIGJ5IGRlZmF1bHRcblxuXHRpZiAoISgndGltZW91dCcgaW4gcCkpIHtcblx0XHRwLnRpbWVvdXQgPSB0aGlzLnNldHRpbmdzLnRpbWVvdXQ7XG5cdH1cblxuXHQvLyBGb3JtYXQgcmVzcG9uc2Vcblx0Ly8gV2hldGhlciB0byBydW4gdGhlIHJhdyByZXNwb25zZSB0aHJvdWdoIHBvc3QgcHJvY2Vzc2luZy5cblx0aWYgKCEoJ2Zvcm1hdFJlc3BvbnNlJyBpbiBwKSkge1xuXHRcdHAuZm9ybWF0UmVzcG9uc2UgPSB0cnVlO1xuXHR9XG5cblx0Ly8gR2V0IHRoZSBjdXJyZW50IHNlc3Npb25cblx0Ly8gQXBwZW5kIHRoZSBhY2Nlc3NfdG9rZW4gdG8gdGhlIHF1ZXJ5XG5cdHAuYXV0aFJlc3BvbnNlID0gdGhpcy5nZXRBdXRoUmVzcG9uc2UocC5uZXR3b3JrKTtcblx0aWYgKHAuYXV0aFJlc3BvbnNlICYmIHAuYXV0aFJlc3BvbnNlLmFjY2Vzc190b2tlbikge1xuXHRcdHAucXVlcnkuYWNjZXNzX3Rva2VuID0gcC5hdXRoUmVzcG9uc2UuYWNjZXNzX3Rva2VuO1xuXHR9XG5cblx0bGV0IHVybCA9IHAucGF0aDtcblx0bGV0IG07XG5cblx0Ly8gU3RvcmUgdGhlIHF1ZXJ5IGFzIG9wdGlvbnNcblx0Ly8gVGhpcyBpcyB1c2VkIHRvIHBvcHVsYXRlIHRoZSByZXF1ZXN0IG9iamVjdCBiZWZvcmUgdGhlIGRhdGEgaXMgYXVnbWVudGVkIGJ5IHRoZSBwcmV3cmFwIGhhbmRsZXJzLlxuXHRwLm9wdGlvbnMgPSBjbG9uZShwLnF1ZXJ5KTtcblxuXHQvLyBDbG9uZSB0aGUgZGF0YSBvYmplY3Rcblx0Ly8gUHJldmVudCB0aGlzIHNjcmlwdCBvdmVyd3JpdGluZyB0aGUgZGF0YSBvZiB0aGUgaW5jb21pbmcgb2JqZWN0LlxuXHQvLyBFbnN1cmUgdGhhdCBldmVyeXRpbWUgd2UgcnVuIGFuIGl0ZXJhdGlvbiB0aGUgY2FsbGJhY2tzIGhhdmVuJ3QgcmVtb3ZlZCBzb21lIGRhdGFcblx0cC5kYXRhID0gY2xvbmUoZGF0YSk7XG5cblx0Ly8gVVJMIE1hcHBpbmdcblx0Ly8gSXMgdGhlcmUgYSBtYXAgZm9yIHRoZSBnaXZlbiBVUkw/XG5cdGNvbnN0IGFjdGlvbnMgPSBvW3tkZWxldGU6ICdkZWwnfVtwLm1ldGhvZF0gfHwgcC5tZXRob2RdIHx8IHt9O1xuXG5cdC8vIEV4dHJhcG9sYXRlIHRoZSBRdWVyeVN0cmluZ1xuXHQvLyBQcm92aWRlIGEgY2xlYW4gcGF0aFxuXHQvLyBNb3ZlIHRoZSBxdWVyeXN0cmluZyBpbnRvIHRoZSBkYXRhXG5cdGlmIChwLm1ldGhvZCA9PT0gJ2dldCcpIHtcblxuXHRcdGNvbnN0IHF1ZXJ5ID0gdXJsLnNwbGl0KC9bPyNdLylbMV07XG5cdFx0aWYgKHF1ZXJ5KSB7XG5cdFx0XHRleHRlbmQocC5xdWVyeSwgcGFyYW0ocXVlcnkpKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIHRoZSBxdWVyeSBwYXJ0IGZyb20gdGhlIFVSTFxuXHRcdFx0dXJsID0gdXJsLnJlcGxhY2UoL1xcPy4qPygjfCQpLywgJyQxJyk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gSXMgdGhlIGhhc2ggZnJhZ21lbnQgZGVmaW5lZFxuXHRpZiAoKG0gPSB1cmwubWF0Y2goLyMoLispLywgJycpKSkge1xuXHRcdHVybCA9IHVybC5zcGxpdCgnIycpWzBdO1xuXHRcdHAucGF0aCA9IG1bMV07XG5cdH1cblx0ZWxzZSBpZiAodXJsIGluIGFjdGlvbnMpIHtcblx0XHRwLnBhdGggPSB1cmw7XG5cdFx0dXJsID0gYWN0aW9uc1t1cmxdO1xuXHR9XG5cdGVsc2UgaWYgKCdkZWZhdWx0JyBpbiBhY3Rpb25zKSB7XG5cdFx0dXJsID0gYWN0aW9ucy5kZWZhdWx0O1xuXHR9XG5cblx0Ly8gUmVkaXJlY3QgSGFuZGxlclxuXHQvLyBUaGlzIGRlZmluZXMgZm9yIHRoZSBGb3JtK0lmcmFtZStIYXNoIGhhY2sgd2hlcmUgdG8gcmV0dXJuIHRoZSByZXN1bHRzIHRvby5cblx0cC5yZWRpcmVjdF91cmkgPSB0aGlzLnNldHRpbmdzLnJlZGlyZWN0X3VyaTtcblxuXHQvLyBEZWZpbmUgRm9ybWF0SGFuZGxlclxuXHQvLyBUaGUgcmVxdWVzdCBjYW4gYmUgcHJvY2VzZWQgaW4gYSBtdWx0aXR1ZGUgb2Ygd2F5c1xuXHQvLyBIZXJlJ3MgdGhlIG9wdGlvbnMgLSBkZXBlbmRpbmcgb24gdGhlIGJyb3dzZXIgYW5kIGVuZHBvaW50XG5cdHAueGhyID0gby54aHI7XG5cdHAuanNvbnAgPSBvLmpzb25wO1xuXHRwLmZvcm0gPSBvLmZvcm07XG5cblx0Ly8gRGVmaW5lIFByb3h5IGhhbmRsZXJcblx0cC5wcm94eUhhbmRsZXIgPSAocCwgY2FsbGJhY2spID0+IHtcblxuXHRcdC8vIEFyZSB3ZSBzaWduaW5nIHRoZSByZXF1ZXN0P1xuXHRcdGxldCBzaWduO1xuXG5cdFx0Ly8gT0F1dGgxXG5cdFx0Ly8gUmVtb3ZlIHRoZSB0b2tlbiBmcm9tIHRoZSBxdWVyeSBiZWZvcmUgc2lnbmluZ1xuXHRcdGlmIChwLmF1dGhSZXNwb25zZSAmJiBwLmF1dGhSZXNwb25zZS5vYXV0aCAmJiBwYXJzZUludChwLmF1dGhSZXNwb25zZS5vYXV0aC52ZXJzaW9uLCAxMCkgPT09IDEpIHtcblxuXHRcdFx0Ly8gT0FVVEggU0lHTklORyBQUk9YWVxuXHRcdFx0c2lnbiA9IHAucXVlcnkuYWNjZXNzX3Rva2VuO1xuXG5cdFx0XHQvLyBSZW1vdmUgdGhlIGFjY2Vzc190b2tlblxuXHRcdFx0ZGVsZXRlIHAucXVlcnkuYWNjZXNzX3Rva2VuO1xuXG5cdFx0XHQvLyBFbmZvcmUgdXNlIG9mIFByb3h5XG5cdFx0XHRwLnByb3h5ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBQT1NUIGJvZHkgdG8gcXVlcnlzdHJpbmdcblx0XHRpZiAocC5kYXRhICYmIChwLm1ldGhvZCA9PT0gJ2dldCcgfHwgcC5tZXRob2QgPT09ICdkZWxldGUnKSkge1xuXHRcdFx0Ly8gQXR0YWNoIHRoZSBwLmRhdGEgdG8gdGhlIHF1ZXJ5c3RyaW5nLlxuXHRcdFx0ZXh0ZW5kKHAucXVlcnksIHAuZGF0YSk7XG5cdFx0XHRwLmRhdGEgPSBudWxsO1xuXHRcdH1cblxuXHRcdC8vIENvbnN0cnVjdCB0aGUgcGF0aFxuXHRcdGxldCBwYXRoID0gY3JlYXRlVXJsKHAudXJsLCBwLnF1ZXJ5KTtcblxuXHRcdC8vIFByb3h5IHRoZSByZXF1ZXN0IHRocm91Z2ggYSBzZXJ2ZXJcblx0XHQvLyBVc2VkIGZvciBzaWduaW5nIE9BdXRoMVxuXHRcdC8vIEFuZCBjaXJjdW12ZW50aW5nIHNlcnZpY2VzIHdpdGhvdXQgQWNjZXNzLUNvbnRyb2wgSGVhZGVyc1xuXHRcdGlmIChwLnByb3h5KSB7XG5cdFx0XHQvLyBVc2UgdGhlIHByb3h5IGFzIGEgcGF0aFxuXHRcdFx0cGF0aCA9IGNyZWF0ZVVybChwLm9hdXRoX3Byb3h5LCB7XG5cdFx0XHRcdHBhdGgsXG5cdFx0XHRcdGFjY2Vzc190b2tlbjogc2lnbiB8fCAnJyxcblxuXHRcdFx0XHQvLyBUaGlzIHdpbGwgcHJvbXB0IHRoZSByZXF1ZXN0IHRvIGJlIHNpZ25lZCBhcyB0aG91Z2ggaXQgaXMgT0F1dGgxXG5cdFx0XHRcdHRoZW46IHAucHJveHlfcmVzcG9uc2VfdHlwZSB8fCAocC5tZXRob2QudG9Mb3dlckNhc2UoKSA9PT0gJ2dldCcgPyAncmVkaXJlY3QnIDogJ3Byb3h5JyksXG5cdFx0XHRcdG1ldGhvZDogcC5tZXRob2QudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0c3VwcHJlc3NfcmVzcG9uc2VfY29kZXM6IHRydWVcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGNhbGxiYWNrKHBhdGgpO1xuXHR9O1xuXG5cblx0Ly8gSWYgdXJsIG5lZWRzIGEgYmFzZVxuXHQvLyBXcmFwIGV2ZXJ5dGhpbmcgaW5cblxuXHRsZXQgcHJvbWlzZTtcblxuXHQvLyBNYWtlIHJlcXVlc3Rcblx0aWYgKHR5cGVvZiAodXJsKSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdC8vIERvZXMgc2VsZiBoYXZlIGl0cyBvd24gY2FsbGJhY2s/XG5cdFx0cHJvbWlzZSA9IG5ldyBQcm9taXNlKGFjY2VwdCA9PiB1cmwocCwgYWNjZXB0KSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gRWxzZSB0aGUgVVJMIGlzIGEgc3RyaW5nXG5cdFx0cHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1cmwpO1xuXHR9XG5cblx0Ly8gSGFuZGxlIHRoZSB1cmwuLi5cblx0cHJvbWlzZSA9IHByb21pc2UudGhlbih1cmwgPT4ge1xuXG5cdFx0Ly8gRm9ybWF0IHRoZSBzdHJpbmcgaWYgaXQgbmVlZHMgaXRcblx0XHR1cmwgPSB1cmwucmVwbGFjZSgvQFxceyhbYS16Xy1dKykoXFx8Lio/KT9cXH0vZ2ksIChtLCBrZXksIGRlZmF1bHRzKSA9PiB7XG5cdFx0XHRsZXQgdmFsID0gZGVmYXVsdHMgPyBkZWZhdWx0cy5yZXBsYWNlKC9eXFx8LywgJycpIDogJyc7XG5cdFx0XHRpZiAoa2V5IGluIHAucXVlcnkpIHtcblx0XHRcdFx0dmFsID0gcC5xdWVyeVtrZXldO1xuXHRcdFx0XHRkZWxldGUgcC5xdWVyeVtrZXldO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAocC5kYXRhICYmIGtleSBpbiBwLmRhdGEpIHtcblx0XHRcdFx0dmFsID0gcC5kYXRhW2tleV07XG5cdFx0XHRcdGRlbGV0ZSBwLmRhdGFba2V5XTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKCFkZWZhdWx0cykge1xuXHRcdFx0XHR0aHJvdyBlcnJvcignbWlzc2luZ19hdHRyaWJ1dGUnLCBgVGhlIGF0dHJpYnV0ZSAkeyAga2V5ICB9IGlzIG1pc3NpbmcgZnJvbSB0aGUgcmVxdWVzdGApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH0pO1xuXG5cdFx0Ly8gQWRkIGJhc2Vcblx0XHRpZiAoIXVybC5tYXRjaCgvXmh0dHBzPzpcXC9cXC8vKSkge1xuXHRcdFx0dXJsID0gby5iYXNlICsgdXJsO1xuXHRcdH1cblxuXHRcdC8vIERlZmluZSB0aGUgcmVxdWVzdCBVUkxcblx0XHRwLnVybCA9IHVybDtcblxuXHRcdC8vIE1ha2UgdGhlIEhUVFAgcmVxdWVzdCB3aXRoIHRoZSBjdXJhdGVkIHJlcXVlc3Qgb2JqZWN0XG5cdFx0Ly8gQ0FMTEJBQ0sgSEFORExFUlxuXHRcdC8vIEAgcmVzcG9uc2Ugb2JqZWN0XG5cdFx0Ly8gQCBzdGF0dXNDb2RlIGludGVnZXIgaWYgYXZhaWxhYmxlXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGFjY2VwdCA9PiB0aGlzLnV0aWxzLnJlcXVlc3QocCwgKGRhdGEsIGhlYWRlcnMpID0+IGFjY2VwdCh7ZGF0YSwgaGVhZGVyc30pKSk7XG5cblx0fSlcblx0XHQudGhlbihyZXNwID0+IHtcblxuXHRcdFx0bGV0IHtkYXRhfSA9IHJlc3A7XG5cdFx0XHRjb25zdCB7aGVhZGVyc30gPSByZXNwO1xuXG5cdFx0XHQvLyBJcyB0aGlzIGEgcmF3IHJlc3BvbnNlP1xuXHRcdFx0aWYgKCFwLmZvcm1hdFJlc3BvbnNlKSB7XG5cdFx0XHRcdC8vIEJhZCByZXF1ZXN0PyBlcnJvciBzdGF0dXNDb2RlIG9yIG90aGVyd2lzZSBjb250YWlucyBhbiBlcnJvciByZXNwb25zZSB2aXMgSlNPTlA/XG5cdFx0XHRcdGlmICh0eXBlb2YgaGVhZGVycyA9PT0gJ29iamVjdCcgPyAoaGVhZGVycy5zdGF0dXNDb2RlID49IDQwMCkgOiAodHlwZW9mIHIgPT09ICdvYmplY3QnICYmICdlcnJvcicgaW4gZGF0YSkpIHtcblx0XHRcdFx0XHR0aHJvdyBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3VsZCB0aGlzIGJlIGFuIG9iamVjdFxuXHRcdFx0aWYgKGRhdGEgPT09IHRydWUpIHtcblx0XHRcdFx0ZGF0YSA9IHtzdWNjZXNzOiB0cnVlfTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGRlbGV0ZSBjYWxsYmFjayBuZWVkcyBhIGJldHRlciByZXNwb25zZVxuXHRcdFx0aWYgKHAubWV0aG9kID09PSAnZGVsZXRlJykge1xuXHRcdFx0XHRkYXRhID0gKCFkYXRhIHx8IGlzRW1wdHkoZGF0YSkpID8ge3N1Y2Nlc3M6IHRydWV9IDogZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRk9STUFUIFJFU1BPTlNFP1xuXHRcdFx0Ly8gRG9lcyBzZWxmIHJlcXVlc3QgaGF2ZSBhIGNvcnJlc3BvbmRpbmcgZm9ybWF0dGVyXG5cdFx0XHRpZiAoby53cmFwICYmICgocC5wYXRoIGluIG8ud3JhcCkgfHwgKCdkZWZhdWx0JyBpbiBvLndyYXApKSkge1xuXHRcdFx0XHRjb25zdCB3cmFwID0gKHAucGF0aCBpbiBvLndyYXAgPyBwLnBhdGggOiAnZGVmYXVsdCcpO1xuXG5cdFx0XHRcdC8vIEZPUk1BVCBSRVNQT05TRVxuXHRcdFx0XHRjb25zdCBiID0gby53cmFwW3dyYXBdKGRhdGEsIGhlYWRlcnMsIHApO1xuXG5cdFx0XHRcdC8vIEhhcyB0aGUgcmVzcG9uc2UgYmVlbiB1dHRlcmx5IG92ZXJ3cml0dGVuP1xuXHRcdFx0XHQvLyBUeXBpY2FsbHkgc2VsZiBhdWdtZW50cyB0aGUgZXhpc3Rpbmcgb2JqZWN0Li4gYnV0IGZvciB0aG9zZSByYXJlIG9jY2Fzc2lvbnNcblx0XHRcdFx0aWYgKGIpIHtcblx0XHRcdFx0XHRkYXRhID0gYjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBJcyB0aGVyZSBhIG5leHRfcGFnZSBkZWZpbmVkIGluIHRoZSByZXNwb25zZT9cblx0XHRcdGlmIChkYXRhICYmICdwYWdpbmcnIGluIGRhdGEgJiYgZGF0YS5wYWdpbmcubmV4dCkge1xuXG5cdFx0XHRcdC8vIEFkZCB0aGUgcmVsYXRpdmUgcGF0aCBpZiBpdCBpcyBtaXNzaW5nIGZyb20gdGhlIHBhZ2luZy9uZXh0IHBhdGhcblx0XHRcdFx0aWYgKGRhdGEucGFnaW5nLm5leHRbMF0gPT09ICc/Jykge1xuXHRcdFx0XHRcdGRhdGEucGFnaW5nLm5leHQgPSBwLnBhdGggKyBkYXRhLnBhZ2luZy5uZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVGhlIHJlbGF0aXZlIHBhdGggaGFzIGJlZW4gZGVmaW5lZCwgbGV0cyBtYXJrdXAgdGhlIGhhbmRsZXIgaW4gdGhlIEhhc2hGcmFnbWVudFxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRkYXRhLnBhZ2luZy5uZXh0ICs9IGAjJHsgIHAucGF0aH1gO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIERpc3BhdGNoIHRvIGxpc3RlbmVyc1xuXHRcdFx0Ly8gRW1pdCBldmVudHMgd2hpY2ggcGVydGFpbiB0byB0aGUgZm9ybWF0dGVkIHJlc3BvbnNlXG5cdFx0XHRpZiAoIWRhdGEgfHwgJ2Vycm9yJyBpbiBkYXRhKSB7XG5cdFx0XHRcdHRocm93IGRhdGE7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0Ly8gQ29tcGxldGVkIGV2ZW50IGNhbGxiYWNrXG5cdHByb21pc2UudGhlbihwLmNhbGxiYWNrLCBwLmNhbGxiYWNrKTtcblxuXHRyZXR1cm4gcHJvbWlzZTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy9cbi8vIFNhdmUgYW55IGFjY2VzcyB0b2tlbiB0aGF0IGlzIGluIHRoZSBjdXJyZW50IHBhZ2UgVVJMXG4vLyBIYW5kbGUgYW55IHJlc3BvbnNlIHNvbGljaXRlZCB0aHJvdWdoIGlmcmFtZSBoYXNoIHRhZyBmb2xsb3dpbmcgYW4gQVBJIHJlcXVlc3Rcbi8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmhlbGxvLnV0aWxzLnJlc3BvbnNlSGFuZGxlcih3aW5kb3csIHdpbmRvdy5vcGVuZXIgfHwgd2luZG93LnBhcmVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gaGVsbG87IiwiLy8gT3ZlcnJpZGUncyBmb3IgcGhvbmVnYXAgZW52aXJvbm1lbnRcbmNvbnN0IFVSTCA9IHJlcXVpcmUoJ3RyaWNrcy93aW5kb3cvdXJsJyk7XG5jb25zdCBoZWxsbyA9IHJlcXVpcmUoJy4vaGVsbG8nKTtcblxuLy8gSXMgdGhpcyBhIHBob25lZ2FwIGltcGxlbWVudGF0aW9uP1xuaWYgKC9eZmlsZTpcXC97M31bXi9dLy50ZXN0KHdpbmRvdy5sb2NhdGlvbi5ocmVmKSAmJiB3aW5kb3cuY29yZG92YSkge1xuXG5cdC8vIEF1Z21lbnQgdGhlIGhpZGRlbiBpZnJhbWUgbWV0aG9kXG5cdGhlbGxvLnV0aWxzLmlmcmFtZSA9IGZ1bmN0aW9uKHVybCwgcmVkaXJlY3RVcmkpIHtcblx0XHRoZWxsby51dGlscy5wb3B1cCh1cmwsIHJlZGlyZWN0VXJpLCB7aGlkZGVuOiAneWVzJ30pO1xuXHR9O1xuXG5cdC8vIEF1Z21lbnQgdGhlIHBvcHVwXG5cdGNvbnN0IHV0aWxQb3B1cCA9IGhlbGxvLnV0aWxzLnBvcHVwO1xuXG5cdC8vIFJlcGxhY2UgcG9wdXBcblx0aGVsbG8udXRpbHMucG9wdXAgPSBmdW5jdGlvbih1cmwsIHJlZGlyZWN0VXJpLCBvcHRpb25zKSB7XG5cblx0XHQvLyBSdW4gdGhlIHN0YW5kYXJkXG5cdFx0Y29uc3QgcG9wdXAgPSB1dGlsUG9wdXAuY2FsbCh0aGlzLCB1cmwsIHJlZGlyZWN0VXJpLCBvcHRpb25zKTtcblxuXHRcdC8vIENyZWF0ZSBhIGZ1bmN0aW9uIGZvciByZW9wZW5pbmcgdGhlIHBvcHVwLCBhbmQgYXNzaWduaW5nIGV2ZW50cyB0byB0aGUgbmV3IHBvcHVwIG9iamVjdFxuXHRcdC8vIFBob25lR2FwIHN1cHBvcnRcblx0XHQvLyBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgdG8gbGlzdGVuIHRvIHRoZSBjaGFuZ2UgaW4gdGhlIHBvcHVwIHdpbmRvd3MgVVJMXG5cdFx0Ly8gVGhpcyBtdXN0IGFwcGVhciBiZWZvcmUgcG9wdXAuZm9jdXMoKTtcblx0XHR0cnkge1xuXHRcdFx0aWYgKHBvcHVwICYmIHBvcHVwLmFkZEV2ZW50TGlzdGVuZXIpIHtcblxuXHRcdFx0XHQvLyBHZXQgdGhlIG9yaWdpbiBvZiB0aGUgcmVkaXJlY3QgVVJJXG5cblx0XHRcdFx0Y29uc3QgYSA9IFVSTChyZWRpcmVjdFVyaSk7XG5cdFx0XHRcdGNvbnN0IHJlZGlyZWN0VXJpT3JpZ2luID0gYS5vcmlnaW4gfHwgYCR7YS5wcm90b2NvbH0vL3thLmhvc3RuYW1lfWA7XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGNoYW5nZXMgaW4gdGhlIEluQXBwQnJvd3NlciB3aW5kb3dcblxuXHRcdFx0XHRwb3B1cC5hZGRFdmVudExpc3RlbmVyKCdsb2Fkc3RhcnQnLCBlID0+IHtcblxuXHRcdFx0XHRcdGNvbnN0IHVybCA9IGUudXJsO1xuXG5cdFx0XHRcdFx0Ly8gSXMgdGhpcyB0aGUgcGF0aCwgYXMgZ2l2ZW4gYnkgdGhlIHJlZGlyZWN0VXJpP1xuXHRcdFx0XHRcdC8vIENoZWNrIHRoZSBuZXcgVVJMIGFnYWlucyB0aGUgcmVkaXJlY3RVcmlPcmlnaW4uXG5cdFx0XHRcdFx0Ly8gQWNjb3JkaW5nIHRvICM2MyBhIHVzZXIgY291bGQgY2xpY2sgJ2NhbmNlbCcgaW4gc29tZSBkaWFsb2cgYm94ZXMgLi4uLlxuXHRcdFx0XHRcdC8vIFRoZSBwb3B1cCByZWRpcmVjdHMgdG8gYW5vdGhlciBwYWdlIHdpdGggdGhlIHNhbWUgb3JpZ2luLCB5ZXQgd2Ugc3RpbGwgd2lzaCBpdCB0byBjbG9zZS5cblxuXHRcdFx0XHRcdGlmICh1cmwuaW5kZXhPZihyZWRpcmVjdFVyaU9yaWdpbikgIT09IDApIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTcGxpdCBhcHBhcnQgdGhlIFVSTFxuXHRcdFx0XHRcdGNvbnN0IGEgPSBVUkwodXJsKTtcblxuXHRcdFx0XHRcdC8vIFdlIGRvbnQgaGF2ZSB3aW5kb3cgb3BlcmF0aW9ucyBvbiB0aGUgcG9wdXAgc28gbGV0cyBjcmVhdGUgc29tZVxuXHRcdFx0XHRcdC8vIFRoZSBsb2NhdGlvbiBjYW4gYmUgYXVnbWVudGVkIGluIHRvIGEgbG9jYXRpb24gb2JqZWN0IGxpa2Ugc28uLi5cblxuXHRcdFx0XHRcdGNvbnN0IF9wb3B1cCA9IHtcblx0XHRcdFx0XHRcdGxvY2F0aW9uOiB7XG5cdFx0XHRcdFx0XHRcdC8vIENoYW5nZSB0aGUgbG9jYXRpb24gb2YgdGhlIHBvcHVwXG5cdFx0XHRcdFx0XHRcdGFzc2lnbihsb2NhdGlvbikge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVW5mb3VydHVuYXRseSBhbiBhcHAgaXMgbWF5IG5vdCBjaGFuZ2UgdGhlIGxvY2F0aW9uIG9mIGEgSW5BcHBCcm93c2VyIHdpbmRvdy5cblx0XHRcdFx0XHRcdFx0XHQvLyBTbyB0byBzaGltIHRoaXMsIGp1c3Qgb3BlbiBhIG5ldyBvbmUuXG5cdFx0XHRcdFx0XHRcdFx0cG9wdXAuZXhlY3V0ZVNjcmlwdCh7Y29kZTogYCR7d2luZG93LmxvY2F0aW9uLmhyZWZ9ID0gXCIke2xvY2F0aW9ufTtcImB9KTtcblx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRzZWFyY2g6IGEuc2VhcmNoLFxuXHRcdFx0XHRcdFx0XHRoYXNoOiBhLmhhc2gsXG5cdFx0XHRcdFx0XHRcdGhyZWY6IGEuaHJlZlxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGNsb3NlKCkge1xuXHRcdFx0XHRcdFx0XHRpZiAocG9wdXAuY2xvc2UpIHtcblx0XHRcdFx0XHRcdFx0XHRwb3B1cC5jbG9zZSgpO1xuXHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwb3B1cC5jbG9zZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRjYXRjaCAoX2UpIHtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIENvbnRpbnVlXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdC8vIFRoZW4gdGhpcyBVUkwgY29udGFpbnMgaW5mb3JtYXRpb24gd2hpY2ggSGVsbG9KUyBtdXN0IHByb2Nlc3Ncblx0XHRcdFx0XHQvLyBVUkwgc3RyaW5nXG5cdFx0XHRcdFx0Ly8gV2luZG93IC0gYW55IGFjdGlvbiBzdWNoIGFzIHdpbmRvdyByZWxvY2F0aW9uIGdvZXMgaGVyZVxuXHRcdFx0XHRcdC8vIE9wZW5lciAtIHRoZSBwYXJlbnQgd2luZG93IHdoaWNoIG9wZW5lZCB0aGlzLCBha2EgdGhpcyBzY3JpcHRcblxuXHRcdFx0XHRcdGhlbGxvLnV0aWxzLnJlc3BvbnNlSGFuZGxlcihfcG9wdXAsIHdpbmRvdyk7XG5cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGNhdGNoIChlKSB7XG5cdFx0XHQvLyBDb250aW51ZVxuXHRcdH1cblxuXHRcdHJldHVybiBwb3B1cDtcblx0fTtcblxufVxuIiwiY29uc3QgaGVsbG8gPSByZXF1aXJlKCcuLi9oZWxsby5qcycpO1xuY29uc3QgdG9CbG9iID0gcmVxdWlyZSgndHJpY2tzL29iamVjdC90b0Jsb2InKTtcbmNvbnN0IHF1ZXJ5c3RyaW5naWZ5ID0gcmVxdWlyZSgndHJpY2tzL3N0cmluZy9xdWVyeXN0cmluZ2lmeScpO1xuXG57XG5cblx0Ly8gT0F1dGgxXG5cdGNvbnN0IE9BdXRoMVNldHRpbmdzID0ge1xuXHRcdHZlcnNpb246ICcxLjAnLFxuXHRcdGF1dGg6ICdodHRwczovL3d3dy5kcm9wYm94LmNvbS8xL29hdXRoL2F1dGhvcml6ZScsXG5cdFx0cmVxdWVzdDogJ2h0dHBzOi8vYXBpLmRyb3Bib3guY29tLzEvb2F1dGgvcmVxdWVzdF90b2tlbicsXG5cdFx0dG9rZW46ICdodHRwczovL2FwaS5kcm9wYm94LmNvbS8xL29hdXRoL2FjY2Vzc190b2tlbidcblx0fTtcblxuXHQvLyBPQXV0aDIgU2V0dGluZ3Ncblx0Y29uc3QgT0F1dGgyU2V0dGluZ3MgPSB7XG5cdFx0dmVyc2lvbjogMixcblx0XHRhdXRoOiAnaHR0cHM6Ly93d3cuZHJvcGJveC5jb20vMS9vYXV0aDIvYXV0aG9yaXplJyxcblx0XHRncmFudDogJ2h0dHBzOi8vYXBpLmRyb3Bib3guY29tLzEvb2F1dGgyL3Rva2VuJ1xuXHR9O1xuXG5cdC8vIEluaXRpYXRlIHRoZSBEcm9wYm94IG1vZHVsZVxuXHRoZWxsby5pbml0KHtcblxuXHRcdGRyb3Bib3g6IHtcblxuXHRcdFx0bmFtZTogJ0Ryb3Bib3gnLFxuXG5cdFx0XHRvYXV0aDogT0F1dGgyU2V0dGluZ3MsXG5cblx0XHRcdGxvZ2luKHApIHtcblx0XHRcdFx0Ly8gT0F1dGgyIG5vbi1zdGFuZGFyZCBhZGp1c3RtZW50c1xuXHRcdFx0XHRwLnFzLnNjb3BlID0gJyc7XG5cblx0XHRcdFx0Ly8gU2hvdWxkIHRoaXMgYmUgcnVuIGFzIE9BdXRoMT9cblx0XHRcdFx0Ly8gSWYgdGhlIHJlZGlyZWN0X3VyaSBpcyBpcyBIVFRQIChub24tc2VjdXJlKSB0aGVuIGl0cyByZXF1aXJlZCB0byByZXZlcnQgdG8gdGhlIE9BdXRoMSBlbmRwb2ludHNcblx0XHRcdFx0Y29uc3QgcmVkaXJlY3QgPSBkZWNvZGVVUklDb21wb25lbnQocC5xcy5yZWRpcmVjdF91cmkpO1xuXHRcdFx0XHRpZiAocmVkaXJlY3QuaW5kZXhPZignaHR0cDonKSA9PT0gMCAmJiByZWRpcmVjdC5pbmRleE9mKCdodHRwOi8vbG9jYWxob3N0LycpICE9PSAwKSB7XG5cblx0XHRcdFx0XHQvLyBPdmVycmlkZSB0aGUgZHJvcGJveCBPQXV0aCBzZXR0aW5ncy5cblx0XHRcdFx0XHRoZWxsby5zZXJ2aWNlcy5kcm9wYm94Lm9hdXRoID0gT0F1dGgxU2V0dGluZ3M7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0Ly8gT3ZlcnJpZGUgdGhlIGRyb3Bib3ggT0F1dGggc2V0dGluZ3MuXG5cdFx0XHRcdFx0aGVsbG8uc2VydmljZXMuZHJvcGJveC5vYXV0aCA9IE9BdXRoMlNldHRpbmdzO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVGhlIGRyb3Bib3ggbG9naW4gd2luZG93IGlzIGEgZGlmZmVyZW50IHNpemVcblx0XHRcdFx0cC5vcHRpb25zLnBvcHVwLndpZHRoID0gMTAwMDtcblx0XHRcdFx0cC5vcHRpb25zLnBvcHVwLmhlaWdodCA9IDEwMDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvKlxuXHRcdFx0XHREcm9wYm94IGRvZXMgbm90IGFsbG93IGluc2VjdXJlIEhUVFAgVVJJJ3MgaW4gdGhlIHJlZGlyZWN0X3VyaSBmaWVsZFxuXHRcdFx0XHQuLi5vdGhlcndpc2UgSSdkIGxvdmUgdG8gdXNlIE9BdXRoMlxuXG5cdFx0XHRcdEZvbGxvdyByZXF1ZXN0IGh0dHBzOi8vZm9ydW1zLmRyb3Bib3guY29tL3RvcGljLnBocD9pZD0xMDY1MDVcblxuXHRcdFx0XHRwLnFzLnJlc3BvbnNlX3R5cGUgPSAnY29kZSc7XG5cdFx0XHRcdG9hdXRoOiB7XG5cdFx0XHRcdFx0dmVyc2lvbjogMixcblx0XHRcdFx0XHRhdXRoOiAnaHR0cHM6Ly93d3cuZHJvcGJveC5jb20vMS9vYXV0aDIvYXV0aG9yaXplJyxcblx0XHRcdFx0XHRncmFudDogJ2h0dHBzOi8vYXBpLmRyb3Bib3guY29tLzEvb2F1dGgyL3Rva2VuJ1xuXHRcdFx0XHR9XG5cdFx0XHQqL1xuXG5cdFx0XHQvLyBBUEkgQmFzZSBVUkxcblx0XHRcdGJhc2U6ICdodHRwczovL2FwaS5kcm9wYm94LmNvbS8xLycsXG5cblx0XHRcdC8vIEJlc3Bva2Ugc2V0dGluZzogdGhpcyBpcyBzdGF0ZXMgd2hldGhlciB0byB1c2UgdGhlIGN1c3RvbSBlbnZpcm9ubWVudCBvZiBEcm9wYm94IG9yIHRvIHVzZSB0aGVpciBvd24gZW52aXJvbm1lbnRcblx0XHRcdC8vIEJlY2F1c2UgaXQncyBub3RvcmlvdXNseSBkaWZmaWN1bHQgZm9yIERyb3Bib3ggdG9vIHByb3ZpZGUgYWNjZXNzIGZyb20gb3RoZXIgd2Vic2VydmljZXMsIHRoaXMgZGVmYXVsdHMgdG8gU2FuZGJveFxuXHRcdFx0cm9vdDogJ3NhbmRib3gnLFxuXG5cdFx0XHQvLyBNYXAgR0VUIHJlcXVlc3RzXG5cdFx0XHRnZXQ6IHtcblx0XHRcdFx0bWU6ICdhY2NvdW50L2luZm8nLFxuXG5cdFx0XHRcdC8vIEh0dHBzOi8vd3d3LmRyb3Bib3guY29tL2RldmVsb3BlcnMvY29yZS9kb2NzI21ldGFkYXRhXG5cdFx0XHRcdCdtZS9maWxlcyc6IHJlcSgnbWV0YWRhdGEvYXV0by9Ae3BhcmVudHx9JyksXG5cdFx0XHRcdCdtZS9mb2xkZXInOiByZXEoJ21ldGFkYXRhL2F1dG8vQHtpZH0nKSxcblx0XHRcdFx0J21lL2ZvbGRlcnMnOiByZXEoJ21ldGFkYXRhL2F1dG8vJyksXG5cblx0XHRcdFx0ZGVmYXVsdChwLCBjYWxsYmFjaykge1xuXHRcdFx0XHRcdGlmIChwLnBhdGgubWF0Y2goJ2h0dHBzOi8vYXBpLWNvbnRlbnQuZHJvcGJveC5jb20vMS9maWxlcy8nKSkge1xuXHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIGZpbGUsIHJldHVybiBiaW5hcnkgZGF0YVxuXHRcdFx0XHRcdFx0cC5tZXRob2QgPSAnYmxvYic7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y2FsbGJhY2socC5wYXRoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0cG9zdDoge1xuXHRcdFx0XHQnbWUvZmlsZXMnKHAsIGNhbGxiYWNrKSB7XG5cblx0XHRcdFx0XHRjb25zdCBwYXRoID0gcC5kYXRhLnBhcmVudDtcblx0XHRcdFx0XHRjb25zdCBmaWxlTmFtZSA9IHAuZGF0YS5uYW1lO1xuXG5cdFx0XHRcdFx0cC5kYXRhID0ge1xuXHRcdFx0XHRcdFx0ZmlsZTogcC5kYXRhLmZpbGVcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0Ly8gRG9lcyB0aGlzIGhhdmUgYSBkYXRhLXVyaSB0byB1cGxvYWQgYXMgYSBmaWxlP1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgKHAuZGF0YS5maWxlKSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0XHRcdHAuZGF0YS5maWxlID0gdG9CbG9iKHAuZGF0YS5maWxlKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjYWxsYmFjayhgaHR0cHM6Ly9hcGktY29udGVudC5kcm9wYm94LmNvbS8xL2ZpbGVzX3B1dC9hdXRvLyR7cGF0aH0vJHtmaWxlTmFtZX1gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQnbWUvZm9sZGVycycocCwgY2FsbGJhY2spIHtcblxuXHRcdFx0XHRcdGNvbnN0IHBhdGggPSBwLmRhdGEubmFtZTtcblx0XHRcdFx0XHRwLmRhdGEgPSB7fTtcblxuXHRcdFx0XHRcdGNvbnN0IHFzID0gcXVlcnlzdHJpbmdpZnkoe3BhdGh9KTtcblxuXHRcdFx0XHRcdGNhbGxiYWNrKGBmaWxlb3BzL2NyZWF0ZV9mb2xkZXI/cm9vdD1Ae3Jvb3R8c2FuZGJveH0mJHtxc31gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gTWFwIERFTEVURSByZXF1ZXN0c1xuXHRcdFx0ZGVsOiB7XG5cdFx0XHRcdCdtZS9maWxlcyc6ICdmaWxlb3BzL2RlbGV0ZT9yb290PUB7cm9vdHxzYW5kYm94fSZwYXRoPUB7aWR9Jyxcblx0XHRcdFx0J21lL2ZvbGRlcic6ICdmaWxlb3BzL2RlbGV0ZT9yb290PUB7cm9vdHxzYW5kYm94fSZwYXRoPUB7aWR9J1xuXHRcdFx0fSxcblxuXHRcdFx0d3JhcDoge1xuXHRcdFx0XHRtZShvKSB7XG5cdFx0XHRcdFx0Zm9ybWF0RXJyb3Iobyk7XG5cdFx0XHRcdFx0aWYgKCFvLnVpZCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG87XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0by5uYW1lID0gby5kaXNwbGF5X25hbWU7XG5cdFx0XHRcdFx0Y29uc3QgbSA9IG8ubmFtZS5zcGxpdCgnICcpO1xuXHRcdFx0XHRcdG8uZmlyc3RfbmFtZSA9IG0uc2hpZnQoKTtcblx0XHRcdFx0XHRvLmxhc3RfbmFtZSA9IG0uam9pbignICcpO1xuXHRcdFx0XHRcdG8uaWQgPSBvLnVpZDtcblx0XHRcdFx0XHRkZWxldGUgby51aWQ7XG5cdFx0XHRcdFx0ZGVsZXRlIG8uZGlzcGxheV9uYW1lO1xuXHRcdFx0XHRcdHJldHVybiBvO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdGRlZmF1bHQobywgaGVhZGVycywgcmVxKSB7XG5cdFx0XHRcdFx0Zm9ybWF0RXJyb3Iobyk7XG5cdFx0XHRcdFx0aWYgKG8uaXNfZGlyICYmIG8uY29udGVudHMpIHtcblx0XHRcdFx0XHRcdG8uZGF0YSA9IG8uY29udGVudHM7XG5cdFx0XHRcdFx0XHRkZWxldGUgby5jb250ZW50cztcblxuXHRcdFx0XHRcdFx0by5kYXRhLmZvckVhY2goaXRlbSA9PiB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0ucm9vdCA9IG8ucm9vdDtcblx0XHRcdFx0XHRcdFx0Zm9ybWF0RmlsZShpdGVtLCBoZWFkZXJzLCByZXEpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9ybWF0RmlsZShvLCBoZWFkZXJzLCByZXEpO1xuXG5cdFx0XHRcdFx0aWYgKG8uaXNfZGVsZXRlZCkge1xuXHRcdFx0XHRcdFx0by5zdWNjZXNzID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gbztcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRG9lc24ndCByZXR1cm4gdGhlIENPUlMgaGVhZGVyc1xuXHRcdFx0eGhyKHApIHtcblxuXHRcdFx0XHQvLyBUaGUgcHJveHkgc3VwcG9ydHMgYWxsb3ctY3Jvc3Mtb3JpZ2luLXJlc291cmNlXG5cdFx0XHRcdC8vIEFsYXMgdGhhdCdzIHRoZSBvbmx5IHRoaW5nIHdlJ3JlIHVzaW5nLlxuXHRcdFx0XHRpZiAocC5kYXRhICYmIHAuZGF0YS5maWxlKSB7XG5cdFx0XHRcdFx0Y29uc3QgZmlsZSA9IHAuZGF0YS5maWxlO1xuXHRcdFx0XHRcdGlmIChmaWxlKSB7XG5cdFx0XHRcdFx0XHRpZiAoZmlsZS5maWxlcykge1xuXHRcdFx0XHRcdFx0XHRwLmRhdGEgPSBmaWxlLmZpbGVzWzBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHAuZGF0YSA9IGZpbGU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHAubWV0aG9kID09PSAnZGVsZXRlJykge1xuXHRcdFx0XHRcdHAubWV0aG9kID0gJ3Bvc3QnO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHRmb3JtKHAsIHFzKSB7XG5cdFx0XHRcdGRlbGV0ZSBxcy5zdGF0ZTtcblx0XHRcdFx0ZGVsZXRlIHFzLnJlZGlyZWN0X3VyaTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIGZvcm1hdEVycm9yKG8pIHtcblx0XHRpZiAobyAmJiAnZXJyb3InIGluIG8pIHtcblx0XHRcdG8uZXJyb3IgPSB7XG5cdFx0XHRcdGNvZGU6ICdzZXJ2ZXJfZXJyb3InLFxuXHRcdFx0XHRtZXNzYWdlOiBvLmVycm9yLm1lc3NhZ2UgfHwgby5lcnJvclxuXHRcdFx0fTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBmb3JtYXRGaWxlKG8sIGhlYWRlcnMsIHJlcSkge1xuXG5cdFx0aWYgKHR5cGVvZiBvICE9PSAnb2JqZWN0JyB8fFxuXHRcdFx0KHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBvIGluc3RhbmNlb2YgQmxvYikgfHxcblx0XHRcdCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIG8gaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcblx0XHRcdC8vIFRoaXMgaXMgYSBmaWxlLCBsZXQgaXQgdGhyb3VnaCB1bmZvcm1hdHRlZFxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgnZXJyb3InIGluIG8pIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRsZXQgcGF0aCA9IChvLnJvb3QgIT09ICdhcHBfZm9sZGVyJyA/IG8ucm9vdCA6ICcnKSArIG8ucGF0aC5yZXBsYWNlKC8mL2csICclMjYnKTtcblx0XHRwYXRoID0gcGF0aC5yZXBsYWNlKC9eXFwvLywgJycpO1xuXHRcdGlmIChvLnRodW1iX2V4aXN0cykge1xuXHRcdFx0Y29uc3QgZnVsbF9wYXRoID0gZW5jb2RlVVJJQ29tcG9uZW50KGBodHRwczovL2FwaS1jb250ZW50LmRyb3Bib3guY29tLzEvdGh1bWJuYWlscy9hdXRvLyR7cGF0aH0/Zm9ybWF0PWpwZWcmc2l6ZT1tYCk7XG5cdFx0XHRvLnRodW1ibmFpbCA9IGAke3JlcS5vYXV0aF9wcm94eX0/cGF0aD0ke2Z1bGxfcGF0aH0mYWNjZXNzX3Rva2VuPSR7cmVxLm9wdGlvbnMuYWNjZXNzX3Rva2VufWA7XG5cdFx0fVxuXG5cdFx0by50eXBlID0gKG8uaXNfZGlyID8gJ2ZvbGRlcicgOiBvLm1pbWVfdHlwZSk7XG5cdFx0by5uYW1lID0gby5wYXRoLnJlcGxhY2UoLy4qXFwvL2csICcnKTtcblx0XHRpZiAoby5pc19kaXIpIHtcblx0XHRcdG8uZmlsZXMgPSBwYXRoLnJlcGxhY2UoL15cXC8vLCAnJyk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0Y29uc3QgZnVsbF9wYXRoID0gYGh0dHBzOi8vYXBpLWNvbnRlbnQuZHJvcGJveC5jb20vMS9maWxlcy9hdXRvLyR7cGF0aH1gO1xuXHRcdFx0by5kb3dubG9hZExpbmsgPSBgJHtoZWxsby5zZXR0aW5ncy5vYXV0aF9wcm94eX0/cGF0aD0ke2VuY29kZVVSSUNvbXBvbmVudChmdWxsX3BhdGgpfSZhY2Nlc3NfdG9rZW49JHtyZXEub3B0aW9ucy5hY2Nlc3NfdG9rZW59YDtcblx0XHRcdG8uZmlsZSA9IGZ1bGxfcGF0aDtcblx0XHR9XG5cblx0XHRpZiAoIW8uaWQpIHtcblx0XHRcdG8uaWQgPSBvLnBhdGgucmVwbGFjZSgvXlxcLy8sICcnKTtcblx0XHR9XG5cblx0XHQvLyBPLm1lZGlhID0gJ2h0dHBzOi8vYXBpLWNvbnRlbnQuZHJvcGJveC5jb20vMS9maWxlcy8nICsgcGF0aDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJlcShzdHIpIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24ocCwgY2IpIHtcblx0XHRcdGRlbGV0ZSBwLnF1ZXJ5LmxpbWl0O1xuXHRcdFx0Y2Ioc3RyKTtcblx0XHR9O1xuXHR9XG5cbn1cbiIsImNvbnN0IGhlbGxvID0gcmVxdWlyZSgnLi4vaGVsbG8uanMnKTtcblxuY29uc3QgZ2xvYmFsQ2FsbGJhY2sgPSByZXF1aXJlKCd0cmlja3MvZXZlbnRzL2dsb2JhbENhbGxiYWNrJyk7XG5jb25zdCBoYXNCaW5hcnkgPSByZXF1aXJlKCd0cmlja3Mvb2JqZWN0L2hhc0JpbmFyeScpO1xuY29uc3QgcXVlcnlzdHJpbmdpZnkgPSByZXF1aXJlKCd0cmlja3Mvc3RyaW5nL3F1ZXJ5c3RyaW5naWZ5Jyk7XG5jb25zdCB0b0Jsb2IgPSByZXF1aXJlKCd0cmlja3Mvb2JqZWN0L3RvQmxvYicpO1xuXG57XG5cdC8vIEZvciBBUElzLCBvbmNlIGEgdmVyc2lvbiBpcyBubyBsb25nZXIgdXNhYmxlLCBhbnkgY2FsbHMgbWFkZSB0byBpdCB3aWxsIGJlIGRlZmF1bHRlZCB0byB0aGUgbmV4dCBvbGRlc3QgdXNhYmxlIHZlcnNpb24uXG5cdC8vIFNvIHdlIGV4cGxpY2l0bHkgc3RhdGUgaXQuXG5cdGNvbnN0IHZlcnNpb24gPSAndjIuOSc7XG5cblx0aGVsbG8uaW5pdCh7XG5cblx0XHRmYWNlYm9vazoge1xuXG5cdFx0XHRuYW1lOiAnRmFjZWJvb2snLFxuXG5cdFx0XHQvLyBTRUUgaHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS9kb2NzL2ZhY2Vib29rLWxvZ2luL21hbnVhbGx5LWJ1aWxkLWEtbG9naW4tZmxvd1xuXHRcdFx0b2F1dGg6IHtcblx0XHRcdFx0dmVyc2lvbjogMixcblx0XHRcdFx0YXV0aDogYGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS8ke3ZlcnNpb259L2RpYWxvZy9vYXV0aC9gLFxuXHRcdFx0XHRncmFudDogJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL29hdXRoL2FjY2Vzc190b2tlbidcblx0XHRcdH0sXG5cblx0XHRcdC8vIEF1dGhvcml6YXRpb24gc2NvcGVzXG5cdFx0XHRzY29wZToge1xuXHRcdFx0XHRiYXNpYzogJ3B1YmxpY19wcm9maWxlJyxcblx0XHRcdFx0ZW1haWw6ICdlbWFpbCcsXG5cdFx0XHRcdHNoYXJlOiAndXNlcl9wb3N0cycsXG5cdFx0XHRcdGJpcnRoZGF5OiAndXNlcl9iaXJ0aGRheScsXG5cdFx0XHRcdGV2ZW50czogJ3VzZXJfZXZlbnRzJyxcblx0XHRcdFx0cGhvdG9zOiAndXNlcl9waG90b3MnLFxuXHRcdFx0XHR2aWRlb3M6ICd1c2VyX3ZpZGVvcycsXG5cdFx0XHRcdGZyaWVuZHM6ICd1c2VyX2ZyaWVuZHMnLFxuXHRcdFx0XHRmaWxlczogJ3VzZXJfcGhvdG9zLHVzZXJfdmlkZW9zJyxcblx0XHRcdFx0cHVibGlzaF9maWxlczogJ3VzZXJfcGhvdG9zLHVzZXJfdmlkZW9zLHB1Ymxpc2hfYWN0aW9ucycsXG5cdFx0XHRcdHB1Ymxpc2g6ICdwdWJsaXNoX2FjdGlvbnMnLFxuXG5cdFx0XHRcdC8vIERlcHJlY2F0ZWQgaW4gdjIuMFxuXHRcdFx0XHQvLyBDcmVhdGVfZXZlbnRcdDogJ2NyZWF0ZV9ldmVudCcsXG5cblx0XHRcdFx0b2ZmbGluZV9hY2Nlc3M6ICcnXG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZWZyZXNoIHRoZSBhY2Nlc3NfdG9rZW5cblx0XHRcdHJlZnJlc2g6IGZhbHNlLFxuXG5cdFx0XHRsb2dpbihwKSB7XG5cblx0XHRcdFx0Ly8gUmVhdXRoZW50aWNhdGVcblx0XHRcdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS9kb2NzL2ZhY2Vib29rLWxvZ2luL3JlYXV0aGVudGljYXRpb25cblx0XHRcdFx0aWYgKHAub3B0aW9ucy5mb3JjZSkge1xuXHRcdFx0XHRcdHAucXMuYXV0aF90eXBlID0gJ3JlYXV0aGVudGljYXRlJztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCB0aGUgZGlzcGxheSB2YWx1ZVxuXHRcdFx0XHRwLnFzLmRpc3BsYXkgPSBwLm9wdGlvbnMuZGlzcGxheSB8fCAncG9wdXAnO1xuXHRcdFx0fSxcblxuXHRcdFx0bG9nb3V0KGNhbGxiYWNrLCBvcHRpb25zKSB7XG5cdFx0XHRcdC8vIEFzc2lnbiBjYWxsYmFjayB0byBhIGdsb2JhbCBoYW5kbGVyXG5cdFx0XHRcdGNvbnN0IGNhbGxiYWNrSUQgPSBnbG9iYWxDYWxsYmFjayhjYWxsYmFjayk7XG5cdFx0XHRcdGNvbnN0IHFzID0gcXVlcnlzdHJpbmdpZnkoe1xuXHRcdFx0XHRcdGNhbGxiYWNrOiBjYWxsYmFja0lELFxuXHRcdFx0XHRcdHJlc3VsdDogSlNPTi5zdHJpbmdpZnkoe2ZvcmNlOiB0cnVlfSksXG5cdFx0XHRcdFx0c3RhdGU6ICd7fSdcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGNvbnN0IHJlZGlyZWN0ID0gZW5jb2RlVVJJQ29tcG9uZW50KGAke2hlbGxvLnNldHRpbmdzLnJlZGlyZWN0X3VyaX0/JHtxc31gKTtcblx0XHRcdFx0Y29uc3QgdG9rZW4gPSAob3B0aW9ucy5hdXRoUmVzcG9uc2UgfHwge30pLmFjY2Vzc190b2tlbjtcblx0XHRcdFx0aGVsbG8udXRpbHMuaWZyYW1lKGBodHRwczovL3d3dy5mYWNlYm9vay5jb20vbG9nb3V0LnBocD9uZXh0PSR7cmVkaXJlY3R9JmFjY2Vzc190b2tlbj0ke3Rva2VufWApO1xuXG5cdFx0XHRcdC8vIFBvc3NpYmxlIHJlc3BvbnNlczpcblx0XHRcdFx0Ly8gU3RyaW5nIFVSTFx0LSBoZWxsby5sb2dvdXQgc2hvdWxkIGhhbmRsZSB0aGUgbG9nb3V0XG5cdFx0XHRcdC8vIFVuZGVmaW5lZFx0LSB0aGlzIGZ1bmN0aW9uIHdpbGwgaGFuZGxlIHRoZSBjYWxsYmFja1xuXHRcdFx0XHQvLyBUcnVlIC0gdGhyb3cgYSBzdWNjZXNzLCB0aGlzIGNhbGxiYWNrIGlzbid0IGhhbmRsaW5nIHRoZSBjYWxsYmFja1xuXHRcdFx0XHQvLyBGYWxzZSAtIHRocm93IGEgZXJyb3Jcblx0XHRcdFx0aWYgKCF0b2tlbikge1xuXHRcdFx0XHRcdC8vIElmIHRoZXJlIGlzbid0IGEgdG9rZW4sIHRoZSBhYm92ZSB3b250IHJldHVybiBhIHJlc3BvbnNlLCBzbyBsZXRzIHRyaWdnZXIgYSByZXNwb25zZVxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQVBJIEJhc2UgVVJMXG5cdFx0XHRiYXNlOiBgaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJHt2ZXJzaW9ufS9gLFxuXG5cdFx0XHQvLyBNYXAgR0VUIHJlcXVlc3RzXG5cdFx0XHRnZXQ6IHtcblx0XHRcdFx0bWU6ICdtZT9maWVsZHM9ZW1haWwsZmlyc3RfbmFtZSxsYXN0X25hbWUsbmFtZSx0aW1lem9uZSx2ZXJpZmllZCcsXG5cdFx0XHRcdCdtZS9mcmllbmRzJzogJ21lL2ZyaWVuZHMnLFxuXHRcdFx0XHQnbWUvZm9sbG93aW5nJzogJ21lL2ZyaWVuZHMnLFxuXHRcdFx0XHQnbWUvZm9sbG93ZXJzJzogJ21lL2ZyaWVuZHMnLFxuXHRcdFx0XHQnbWUvc2hhcmUnOiAnbWUvZmVlZCcsXG5cdFx0XHRcdCdtZS9saWtlJzogJ21lL2xpa2VzJyxcblx0XHRcdFx0J21lL2ZpbGVzJzogJ21lL2FsYnVtcycsXG5cdFx0XHRcdCdtZS9hbGJ1bXMnOiAnbWUvYWxidW1zP2ZpZWxkcz1jb3Zlcl9waG90byxuYW1lJyxcblx0XHRcdFx0J21lL2FsYnVtJzogJ0B7aWR9L3Bob3Rvcz9maWVsZHM9cGljdHVyZScsXG5cdFx0XHRcdCdtZS9waG90b3MnOiAnbWUvcGhvdG9zJyxcblx0XHRcdFx0J21lL3Bob3RvJzogJ0B7aWR9Jyxcblx0XHRcdFx0J2ZyaWVuZC9hbGJ1bXMnOiAnQHtpZH0vYWxidW1zJyxcblx0XHRcdFx0J2ZyaWVuZC9waG90b3MnOiAnQHtpZH0vcGhvdG9zJ1xuXG5cdFx0XHRcdC8vIFBhZ2luYXRpb25cblx0XHRcdFx0Ly8gSHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS9kb2NzL3JlZmVyZW5jZS9hcGkvcGFnaW5hdGlvbi9cblx0XHRcdH0sXG5cblx0XHRcdC8vIE1hcCBQT1NUIHJlcXVlc3RzXG5cdFx0XHRwb3N0OiB7XG5cdFx0XHRcdCdtZS9zaGFyZSc6ICdtZS9mZWVkJyxcblx0XHRcdFx0J21lL3Bob3RvJzogJ0B7aWR9J1xuXG5cdFx0XHRcdC8vIEh0dHBzOi8vZGV2ZWxvcGVycy5mYWNlYm9vay5jb20vZG9jcy9ncmFwaC1hcGkvcmVmZXJlbmNlL3YyLjIvb2JqZWN0L2xpa2VzL1xuXHRcdFx0fSxcblxuXHRcdFx0d3JhcDoge1xuXHRcdFx0XHRtZTogZm9ybWF0VXNlcixcblx0XHRcdFx0J21lL2ZyaWVuZHMnOiBmb3JtYXRGcmllbmRzLFxuXHRcdFx0XHQnbWUvZm9sbG93aW5nJzogZm9ybWF0RnJpZW5kcyxcblx0XHRcdFx0J21lL2ZvbGxvd2Vycyc6IGZvcm1hdEZyaWVuZHMsXG5cdFx0XHRcdCdtZS9hbGJ1bXMnOiBmb3JtYXQsXG5cdFx0XHRcdCdtZS9waG90b3MnOiBmb3JtYXQsXG5cdFx0XHRcdCdtZS9maWxlcyc6IGZvcm1hdCxcblx0XHRcdFx0ZGVmYXVsdDogZm9ybWF0XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBTcGVjaWFsIHJlcXVpcmVtZW50cyBmb3IgaGFuZGxpbmcgWEhSXG5cdFx0XHR4aHIocCwgcXMpIHtcblx0XHRcdFx0aWYgKHAubWV0aG9kID09PSAnZ2V0JyB8fCBwLm1ldGhvZCA9PT0gJ3Bvc3QnKSB7XG5cdFx0XHRcdFx0cXMuc3VwcHJlc3NfcmVzcG9uc2VfY29kZXMgPSB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSXMgdGhpcyBhIHBvc3Qgd2l0aCBhIGRhdGEtdXJpP1xuXHRcdFx0XHRpZiAocC5tZXRob2QgPT09ICdwb3N0JyAmJiBwLmRhdGEgJiYgdHlwZW9mIChwLmRhdGEuZmlsZSkgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdFx0Ly8gQ29udmVydCB0aGUgRGF0YS1VUkkgdG8gYSBCbG9iXG5cdFx0XHRcdFx0cC5kYXRhLmZpbGUgPSB0b0Jsb2IocC5kYXRhLmZpbGUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBTcGVjaWFsIHJlcXVpcmVtZW50cyBmb3IgaGFuZGxpbmcgSlNPTlAgZmFsbGJhY2tcblx0XHRcdGpzb25wKHAsIHFzKSB7XG5cdFx0XHRcdGNvbnN0IG0gPSBwLm1ldGhvZDtcblx0XHRcdFx0aWYgKG0gIT09ICdnZXQnICYmICFoYXNCaW5hcnkocC5kYXRhKSkge1xuXHRcdFx0XHRcdHAuZGF0YS5tZXRob2QgPSBtO1xuXHRcdFx0XHRcdHAubWV0aG9kID0gJ2dldCc7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZiAocC5tZXRob2QgPT09ICdkZWxldGUnKSB7XG5cdFx0XHRcdFx0cXMubWV0aG9kID0gJ2RlbGV0ZSc7XG5cdFx0XHRcdFx0cC5tZXRob2QgPSAncG9zdCc7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIFNwZWNpYWwgcmVxdWlyZW1lbnRzIGZvciBpZnJhbWUgZm9ybSBoYWNrXG5cdFx0XHRmb3JtKCkge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdC8vIEZpcmUgdGhlIGNhbGxiYWNrIG9ubG9hZFxuXHRcdFx0XHRcdGNhbGxiYWNrb25sb2FkOiB0cnVlXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRjb25zdCBiYXNlID0gJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLyc7XG5cblx0ZnVuY3Rpb24gZm9ybWF0VXNlcihvKSB7XG5cdFx0aWYgKG8uaWQpIHtcblx0XHRcdG8udGh1bWJuYWlsID0gby5waWN0dXJlID0gYCR7YmFzZX0ke28uaWR9L3BpY3R1cmVgO1xuXHRcdH1cblxuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0RnJpZW5kcyhvKSB7XG5cdFx0aWYgKCdkYXRhJyBpbiBvKSB7XG5cdFx0XHRvLmRhdGEuZm9yRWFjaChmb3JtYXRVc2VyKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGZ1bmN0aW9uIGZvcm1hdChvLCBoZWFkZXJzLCByZXEpIHtcblx0XHRpZiAodHlwZW9mIG8gPT09ICdib29sZWFuJykge1xuXHRcdFx0byA9IHtzdWNjZXNzOiBvfTtcblx0XHR9XG5cblx0XHRpZiAobyAmJiAnZGF0YScgaW4gbykge1xuXHRcdFx0Y29uc3QgdG9rZW4gPSByZXEuYXV0aFJlc3BvbnNlLmFjY2Vzc190b2tlbjtcblxuXHRcdFx0aWYgKCEoby5kYXRhIGluc3RhbmNlb2YgQXJyYXkpKSB7XG5cdFx0XHRcdGNvbnN0IGRhdGEgPSBvLmRhdGE7XG5cdFx0XHRcdGRlbGV0ZSBvLmRhdGE7XG5cdFx0XHRcdG8uZGF0YSA9IFtkYXRhXTtcblx0XHRcdH1cblxuXHRcdFx0by5kYXRhLmZvckVhY2goZCA9PiB7XG5cblx0XHRcdFx0aWYgKGQucGljdHVyZSkge1xuXHRcdFx0XHRcdGQudGh1bWJuYWlsID0gZC5waWN0dXJlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZC5waWN0dXJlcyA9IChkLmltYWdlcyB8fCBbXSlcblx0XHRcdFx0XHQuc29ydCgoYSwgYikgPT4gYS53aWR0aCAtIGIud2lkdGgpO1xuXG5cdFx0XHRcdGlmIChkLmNvdmVyX3Bob3RvICYmIGQuY292ZXJfcGhvdG8uaWQpIHtcblx0XHRcdFx0XHRkLnRodW1ibmFpbCA9IGAke2Jhc2V9JHtkLmNvdmVyX3Bob3RvLmlkfS9waWN0dXJlP2FjY2Vzc190b2tlbj0ke3Rva2VufWA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZC50eXBlID09PSAnYWxidW0nKSB7XG5cdFx0XHRcdFx0ZC5maWxlcyA9IGQucGhvdG9zID0gYCR7YmFzZX0ke2QuaWR9L3Bob3Rvc2A7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZC5jYW5fdXBsb2FkKSB7XG5cdFx0XHRcdFx0ZC51cGxvYWRfbG9jYXRpb24gPSBgJHtiYXNlfSR7ZC5pZH0vcGhvdG9zYDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG87XG5cdH1cblxufVxuIiwiY29uc3QgaGVsbG8gPSByZXF1aXJlKCcuLi9oZWxsby5qcycpO1xuXG57XG5cblx0aGVsbG8uaW5pdCh7XG5cblx0XHRmbGlja3I6IHtcblxuXHRcdFx0bmFtZTogJ0ZsaWNrcicsXG5cblx0XHRcdC8vIEVuc3VyZSB0aGF0IHlvdSBkZWZpbmUgYW4gb2F1dGhfcHJveHlcblx0XHRcdG9hdXRoOiB7XG5cdFx0XHRcdHZlcnNpb246ICcxLjBhJyxcblx0XHRcdFx0YXV0aDogJ2h0dHBzOi8vd3d3LmZsaWNrci5jb20vc2VydmljZXMvb2F1dGgvYXV0aG9yaXplP3Blcm1zPXJlYWQnLFxuXHRcdFx0XHRyZXF1ZXN0OiAnaHR0cHM6Ly93d3cuZmxpY2tyLmNvbS9zZXJ2aWNlcy9vYXV0aC9yZXF1ZXN0X3Rva2VuJyxcblx0XHRcdFx0dG9rZW46ICdodHRwczovL3d3dy5mbGlja3IuY29tL3NlcnZpY2VzL29hdXRoL2FjY2Vzc190b2tlbidcblx0XHRcdH0sXG5cblx0XHRcdC8vIEFQSSBiYXNlIFVSTFxuXHRcdFx0YmFzZTogJ2h0dHBzOi8vYXBpLmZsaWNrci5jb20vc2VydmljZXMvcmVzdCcsXG5cblx0XHRcdC8vIE1hcCBHRVQgcmVzcXVlc3RzXG5cdFx0XHRnZXQ6IHtcblx0XHRcdFx0bWU6IHNpZ24oJ2ZsaWNrci5wZW9wbGUuZ2V0SW5mbycpLFxuXHRcdFx0XHQnbWUvZnJpZW5kcyc6IHNpZ24oJ2ZsaWNrci5jb250YWN0cy5nZXRMaXN0Jywge3Blcl9wYWdlOiAnQHtsaW1pdHw1MH0nfSksXG5cdFx0XHRcdCdtZS9mb2xsb3dpbmcnOiBzaWduKCdmbGlja3IuY29udGFjdHMuZ2V0TGlzdCcsIHtwZXJfcGFnZTogJ0B7bGltaXR8NTB9J30pLFxuXHRcdFx0XHQnbWUvZm9sbG93ZXJzJzogc2lnbignZmxpY2tyLmNvbnRhY3RzLmdldExpc3QnLCB7cGVyX3BhZ2U6ICdAe2xpbWl0fDUwfSd9KSxcblx0XHRcdFx0J21lL2FsYnVtcyc6IHNpZ24oJ2ZsaWNrci5waG90b3NldHMuZ2V0TGlzdCcsIHtwZXJfcGFnZTogJ0B7bGltaXR8NTB9J30pLFxuXHRcdFx0XHQnbWUvYWxidW0nOiBzaWduKCdmbGlja3IucGhvdG9zZXRzLmdldFBob3RvcycsIHtwaG90b3NldF9pZDogJ0B7aWR9J30pLFxuXHRcdFx0XHQnbWUvcGhvdG9zJzogc2lnbignZmxpY2tyLnBlb3BsZS5nZXRQaG90b3MnLCB7cGVyX3BhZ2U6ICdAe2xpbWl0fDUwfSd9KVxuXHRcdFx0fSxcblxuXHRcdFx0d3JhcDoge1xuXHRcdFx0XHRtZShvKSB7XG5cdFx0XHRcdFx0Zm9ybWF0RXJyb3Iobyk7XG5cdFx0XHRcdFx0byA9IGNoZWNrUmVzcG9uc2UobywgJ3BlcnNvbicpO1xuXHRcdFx0XHRcdGlmIChvLmlkKSB7XG5cdFx0XHRcdFx0XHRpZiAoby5yZWFsbmFtZSkge1xuXHRcdFx0XHRcdFx0XHRvLm5hbWUgPSBvLnJlYWxuYW1lLl9jb250ZW50O1xuXHRcdFx0XHRcdFx0XHRjb25zdCBtID0gby5uYW1lLnNwbGl0KCcgJyk7XG5cdFx0XHRcdFx0XHRcdG8uZmlyc3RfbmFtZSA9IG0uc2hpZnQoKTtcblx0XHRcdFx0XHRcdFx0by5sYXN0X25hbWUgPSBtLmpvaW4oJyAnKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0by50aHVtYm5haWwgPSBnZXRCdWRkeUljb24obywgJ2wnKTtcblx0XHRcdFx0XHRcdG8ucGljdHVyZSA9IGdldEJ1ZGR5SWNvbihvLCAnbCcpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBvO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdCdtZS9mcmllbmRzJzogZm9ybWF0RnJpZW5kcyxcblx0XHRcdFx0J21lL2ZvbGxvd2Vycyc6IGZvcm1hdEZyaWVuZHMsXG5cdFx0XHRcdCdtZS9mb2xsb3dpbmcnOiBmb3JtYXRGcmllbmRzLFxuXHRcdFx0XHQnbWUvYWxidW1zJyhvKSB7XG5cdFx0XHRcdFx0Zm9ybWF0RXJyb3Iobyk7XG5cdFx0XHRcdFx0byA9IGNoZWNrUmVzcG9uc2UobywgJ3Bob3Rvc2V0cycpO1xuXHRcdFx0XHRcdHBhZ2luZyhvKTtcblx0XHRcdFx0XHRpZiAoby5waG90b3NldCkge1xuXHRcdFx0XHRcdFx0by5kYXRhID0gby5waG90b3NldDtcblx0XHRcdFx0XHRcdG8uZGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xuXHRcdFx0XHRcdFx0XHRpdGVtLm5hbWUgPSBpdGVtLnRpdGxlLl9jb250ZW50O1xuXHRcdFx0XHRcdFx0XHRpdGVtLnBob3RvcyA9IGBodHRwczovL2FwaS5mbGlja3IuY29tL3NlcnZpY2VzL3Jlc3QkeyAgZ2V0QXBpVXJsKCdmbGlja3IucGhvdG9zZXRzLmdldFBob3RvcycsIHtwaG90b3NldF9pZDogaXRlbS5pZH0sIHRydWUpfWA7XG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0ZGVsZXRlIG8ucGhvdG9zZXQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIG87XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0J21lL3Bob3Rvcycobykge1xuXHRcdFx0XHRcdGZvcm1hdEVycm9yKG8pO1xuXHRcdFx0XHRcdHJldHVybiBmb3JtYXRQaG90b3Mobyk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0ZGVmYXVsdChvKSB7XG5cdFx0XHRcdFx0Zm9ybWF0RXJyb3Iobyk7XG5cdFx0XHRcdFx0cmV0dXJuIGZvcm1hdFBob3RvcyhvKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0eGhyOiBmYWxzZSxcblxuXHRcdFx0anNvbnAocCwgcXMpIHtcblx0XHRcdFx0aWYgKHAubWV0aG9kID09PSAnZ2V0Jykge1xuXHRcdFx0XHRcdGRlbGV0ZSBxcy5jYWxsYmFjaztcblx0XHRcdFx0XHRxcy5qc29uY2FsbGJhY2sgPSBwLmNhbGxiYWNrSUQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIGdldEFwaVVybChtZXRob2QsIGV4dHJhUGFyYW1zLCBza2lwTmV0d29yaykge1xuXHRcdGxldCB1cmwgPSBgJHsoc2tpcE5ldHdvcmspID8gJycgOiAnZmxpY2tyOidcblx0XHR9P21ldGhvZD0keyAgbWV0aG9kXG5cdFx0fSZhcGlfa2V5PSR7ICBoZWxsby5zZXJ2aWNlcy5mbGlja3IuaWRcblx0XHR9JmZvcm1hdD1qc29uYDtcblx0XHRmb3IgKGNvbnN0IHBhcmFtIGluIGV4dHJhUGFyYW1zKSB7XG5cdFx0XHRpZiAoZXh0cmFQYXJhbXMuaGFzT3duUHJvcGVydHkocGFyYW0pKSB7XG5cdFx0XHRcdHVybCArPSBgJiR7ICBwYXJhbSAgfT0keyAgZXh0cmFQYXJhbXNbcGFyYW1dfWA7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVybDtcblx0fVxuXG5cdC8vIFRoaXMgaXMgbm90IGV4YWN0bHkgbmVhdCBidXQgYXZvaWQgdG8gY2FsbFxuXHQvLyBUaGUgbWV0aG9kICdmbGlja3IudGVzdC5sb2dpbicgZm9yIGVhY2ggYXBpIGNhbGxcblxuXHRmdW5jdGlvbiB3aXRoVXNlcihjYikge1xuXHRcdGNvbnN0IGF1dGggPSBoZWxsby5nZXRBdXRoUmVzcG9uc2UoJ2ZsaWNrcicpO1xuXHRcdGNiKGF1dGggJiYgYXV0aC51c2VyX25zaWQgPyBhdXRoLnVzZXJfbnNpZCA6IG51bGwpO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2lnbih1cmwsIHBhcmFtcykge1xuXHRcdGlmICghcGFyYW1zKSB7XG5cdFx0XHRwYXJhbXMgPSB7fTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24ocCwgY2FsbGJhY2spIHtcblx0XHRcdHdpdGhVc2VyKHVzZXJJZCA9PiB7XG5cdFx0XHRcdHBhcmFtcy51c2VyX2lkID0gdXNlcklkO1xuXHRcdFx0XHRjYWxsYmFjayhnZXRBcGlVcmwodXJsLCBwYXJhbXMsIHRydWUpKTtcblx0XHRcdH0pO1xuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRCdWRkeUljb24ocHJvZmlsZSwgc2l6ZSkge1xuXHRcdGxldCB1cmwgPSAnaHR0cHM6Ly93d3cuZmxpY2tyLmNvbS9pbWFnZXMvYnVkZHlpY29uLmdpZic7XG5cdFx0aWYgKHByb2ZpbGUubnNpZCAmJiBwcm9maWxlLmljb25zZXJ2ZXIgJiYgcHJvZmlsZS5pY29uZmFybSkge1xuXHRcdFx0dXJsID0gYGh0dHBzOi8vZmFybSR7ICBwcm9maWxlLmljb25mYXJtICB9LnN0YXRpY2ZsaWNrci5jb20vJHtcblx0XHRcdFx0cHJvZmlsZS5pY29uc2VydmVyICB9L2AgK1xuXHRcdFx0XHRgYnVkZHlpY29ucy8keyAgcHJvZmlsZS5uc2lkXG5cdFx0XHRcdH0keyhzaXplKSA/IGBfJHsgIHNpemV9YCA6ICcnICB9LmpwZ2A7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVybDtcblx0fVxuXG5cdC8vIFNlZTogaHR0cHM6Ly93d3cuZmxpY2tyLmNvbS9zZXJ2aWNlcy9hcGkvbWlzYy51cmxzLmh0bWxcblx0ZnVuY3Rpb24gY3JlYXRlUGhvdG9VcmwoaWQsIGZhcm0sIHNlcnZlciwgc2VjcmV0LCBzaXplKSB7XG5cdFx0c2l6ZSA9IChzaXplKSA/IGBfJHsgIHNpemV9YCA6ICcnO1xuXHRcdHJldHVybiBgaHR0cHM6Ly9mYXJtJHsgIGZhcm0gIH0uc3RhdGljZmxpY2tyLmNvbS8keyAgc2VydmVyICB9LyR7ICBpZCAgfV8keyAgc2VjcmV0ICB9JHtzaXplICB9LmpwZ2A7XG5cdH1cblxuXHRmdW5jdGlvbiBmb3JtYXRFcnJvcihvKSB7XG5cdFx0aWYgKG8gJiYgby5zdGF0ICYmIG8uc3RhdC50b0xvd2VyQ2FzZSgpICE9PSAnb2snKSB7XG5cdFx0XHRvLmVycm9yID0ge1xuXHRcdFx0XHRjb2RlOiAnaW52YWxpZF9yZXF1ZXN0Jyxcblx0XHRcdFx0bWVzc2FnZTogby5tZXNzYWdlXG5cdFx0XHR9O1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGZvcm1hdFBob3RvcyhvKSB7XG5cdFx0aWYgKG8ucGhvdG9zZXQgfHwgby5waG90b3MpIHtcblx0XHRcdGNvbnN0IHNldCA9ICgncGhvdG9zZXQnIGluIG8pID8gJ3Bob3Rvc2V0JyA6ICdwaG90b3MnO1xuXHRcdFx0byA9IGNoZWNrUmVzcG9uc2Uobywgc2V0KTtcblx0XHRcdHBhZ2luZyhvKTtcblx0XHRcdG8uZGF0YSA9IG8ucGhvdG87XG5cdFx0XHRkZWxldGUgby5waG90bztcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgby5kYXRhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGNvbnN0IHBob3RvID0gby5kYXRhW2ldO1xuXHRcdFx0XHRwaG90by5uYW1lID0gcGhvdG8udGl0bGU7XG5cdFx0XHRcdHBob3RvLnBpY3R1cmUgPSBjcmVhdGVQaG90b1VybChwaG90by5pZCwgcGhvdG8uZmFybSwgcGhvdG8uc2VydmVyLCBwaG90by5zZWNyZXQsICcnKTtcblx0XHRcdFx0cGhvdG8ucGljdHVyZXMgPSBjcmVhdGVQaWN0dXJlcyhwaG90by5pZCwgcGhvdG8uZmFybSwgcGhvdG8uc2VydmVyLCBwaG90by5zZWNyZXQpO1xuXHRcdFx0XHRwaG90by5zb3VyY2UgPSBjcmVhdGVQaG90b1VybChwaG90by5pZCwgcGhvdG8uZmFybSwgcGhvdG8uc2VydmVyLCBwaG90by5zZWNyZXQsICdiJyk7XG5cdFx0XHRcdHBob3RvLnRodW1ibmFpbCA9IGNyZWF0ZVBob3RvVXJsKHBob3RvLmlkLCBwaG90by5mYXJtLCBwaG90by5zZXJ2ZXIsIHBob3RvLnNlY3JldCwgJ20nKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8vIFNlZTogaHR0cHM6Ly93d3cuZmxpY2tyLmNvbS9zZXJ2aWNlcy9hcGkvbWlzYy51cmxzLmh0bWxcblx0ZnVuY3Rpb24gY3JlYXRlUGljdHVyZXMoaWQsIGZhcm0sIHNlcnZlciwgc2VjcmV0KSB7XG5cblx0XHRjb25zdCBOT19MSU1JVCA9IDIwNDg7XG5cdFx0Y29uc3Qgc2l6ZXMgPSBbXG5cdFx0XHR7aWQ6ICd0JywgbWF4OiAxMDB9LFxuXHRcdFx0e2lkOiAnbScsIG1heDogMjQwfSxcblx0XHRcdHtpZDogJ24nLCBtYXg6IDMyMH0sXG5cdFx0XHR7aWQ6ICcnLCBtYXg6IDUwMH0sXG5cdFx0XHR7aWQ6ICd6JywgbWF4OiA2NDB9LFxuXHRcdFx0e2lkOiAnYycsIG1heDogODAwfSxcblx0XHRcdHtpZDogJ2InLCBtYXg6IDEwMjR9LFxuXHRcdFx0e2lkOiAnaCcsIG1heDogMTYwMH0sXG5cdFx0XHR7aWQ6ICdrJywgbWF4OiAyMDQ4fSxcblx0XHRcdHtpZDogJ28nLCBtYXg6IE5PX0xJTUlUfVxuXHRcdF07XG5cblx0XHRyZXR1cm4gc2l6ZXMubWFwKHNpemUgPT4gKHtcblx0XHRcdHNvdXJjZTogY3JlYXRlUGhvdG9VcmwoaWQsIGZhcm0sIHNlcnZlciwgc2VjcmV0LCBzaXplLmlkKSxcblxuXHRcdFx0Ly8gTm90ZTogdGhpcyBpcyBhIGd1ZXNzIHRoYXQncyBhbG1vc3QgY2VydGFpbiB0byBiZSB3cm9uZyAodW5sZXNzIHNxdWFyZSBzb3VyY2UpXG5cdFx0XHR3aWR0aDogc2l6ZS5tYXgsXG5cdFx0XHRoZWlnaHQ6IHNpemUubWF4XG5cdFx0fSkpO1xuXHR9XG5cblx0ZnVuY3Rpb24gY2hlY2tSZXNwb25zZShvLCBrZXkpIHtcblxuXHRcdGlmIChrZXkgaW4gbykge1xuXHRcdFx0byA9IG9ba2V5XTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoISgnZXJyb3InIGluIG8pKSB7XG5cdFx0XHRvLmVycm9yID0ge1xuXHRcdFx0XHRjb2RlOiAnaW52YWxpZF9yZXF1ZXN0Jyxcblx0XHRcdFx0bWVzc2FnZTogby5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gZ2V0IGRhdGEgZnJvbSBGbGlja3InXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0RnJpZW5kcyhvKSB7XG5cdFx0Zm9ybWF0RXJyb3Iobyk7XG5cdFx0aWYgKG8uY29udGFjdHMpIHtcblx0XHRcdG8gPSBjaGVja1Jlc3BvbnNlKG8sICdjb250YWN0cycpO1xuXHRcdFx0cGFnaW5nKG8pO1xuXHRcdFx0by5kYXRhID0gby5jb250YWN0O1xuXHRcdFx0ZGVsZXRlIG8uY29udGFjdDtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgby5kYXRhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGNvbnN0IGl0ZW0gPSBvLmRhdGFbaV07XG5cdFx0XHRcdGl0ZW0uaWQgPSBpdGVtLm5zaWQ7XG5cdFx0XHRcdGl0ZW0ubmFtZSA9IGl0ZW0ucmVhbG5hbWUgfHwgaXRlbS51c2VybmFtZTtcblx0XHRcdFx0aXRlbS50aHVtYm5haWwgPSBnZXRCdWRkeUljb24oaXRlbSwgJ20nKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGZ1bmN0aW9uIHBhZ2luZyhyZXMpIHtcblx0XHRpZiAocmVzLnBhZ2UgJiYgcmVzLnBhZ2VzICYmIHJlcy5wYWdlICE9PSByZXMucGFnZXMpIHtcblx0XHRcdHJlcy5wYWdpbmcgPSB7XG5cdFx0XHRcdG5leHQ6IGA/cGFnZT0keyAgKytyZXMucGFnZX1gXG5cdFx0XHR9O1xuXHRcdH1cblx0fVxuXG59XG4iLCJjb25zdCBoZWxsbyA9IHJlcXVpcmUoJy4uL2hlbGxvLmpzJyk7XG5cbntcblxuXHRoZWxsby5pbml0KHtcblxuXHRcdGZvdXJzcXVhcmU6IHtcblxuXHRcdFx0bmFtZTogJ0ZvdXJzcXVhcmUnLFxuXG5cdFx0XHRvYXV0aDoge1xuXHRcdFx0XHQvLyBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLmZvdXJzcXVhcmUuY29tL292ZXJ2aWV3L2F1dGhcblx0XHRcdFx0dmVyc2lvbjogMixcblx0XHRcdFx0YXV0aDogJ2h0dHBzOi8vZm91cnNxdWFyZS5jb20vb2F1dGgyL2F1dGhlbnRpY2F0ZScsXG5cdFx0XHRcdGdyYW50OiAnaHR0cHM6Ly9mb3Vyc3F1YXJlLmNvbS9vYXV0aDIvYWNjZXNzX3Rva2VuJ1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVmcmVzaCB0aGUgYWNjZXNzX3Rva2VuIG9uY2UgZXhwaXJlZFxuXHRcdFx0cmVmcmVzaDogdHJ1ZSxcblxuXHRcdFx0YmFzZTogJ2h0dHBzOi8vYXBpLmZvdXJzcXVhcmUuY29tL3YyLycsXG5cblx0XHRcdGdldDoge1xuXHRcdFx0XHRtZTogJ3VzZXJzL3NlbGYnLFxuXHRcdFx0XHQnbWUvZnJpZW5kcyc6ICd1c2Vycy9zZWxmL2ZyaWVuZHMnLFxuXHRcdFx0XHQnbWUvZm9sbG93ZXJzJzogJ3VzZXJzL3NlbGYvZnJpZW5kcycsXG5cdFx0XHRcdCdtZS9mb2xsb3dpbmcnOiAndXNlcnMvc2VsZi9mcmllbmRzJ1xuXHRcdFx0fSxcblxuXHRcdFx0d3JhcDoge1xuXHRcdFx0XHRtZShvKSB7XG5cdFx0XHRcdFx0Zm9ybWF0RXJyb3Iobyk7XG5cdFx0XHRcdFx0aWYgKG8gJiYgby5yZXNwb25zZSkge1xuXHRcdFx0XHRcdFx0byA9IG8ucmVzcG9uc2UudXNlcjtcblx0XHRcdFx0XHRcdGZvcm1hdFVzZXIobyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIG87XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0ZGVmYXVsdChvKSB7XG5cdFx0XHRcdFx0Zm9ybWF0RXJyb3Iobyk7XG5cblx0XHRcdFx0XHQvLyBGb3JtYXQgZnJpZW5kc1xuXHRcdFx0XHRcdGlmIChvICYmICdyZXNwb25zZScgaW4gbyAmJiAnZnJpZW5kcycgaW4gby5yZXNwb25zZSAmJiAnaXRlbXMnIGluIG8ucmVzcG9uc2UuZnJpZW5kcykge1xuXHRcdFx0XHRcdFx0by5kYXRhID0gby5yZXNwb25zZS5mcmllbmRzLml0ZW1zO1xuXHRcdFx0XHRcdFx0by5kYXRhLmZvckVhY2goZm9ybWF0VXNlcik7XG5cdFx0XHRcdFx0XHRkZWxldGUgby5yZXNwb25zZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gbztcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0eGhyOiBmb3JtYXRSZXF1ZXN0LFxuXHRcdFx0anNvbnA6IGZvcm1hdFJlcXVlc3Rcblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIGZvcm1hdEVycm9yKG8pIHtcblx0XHRpZiAoby5tZXRhICYmIChvLm1ldGEuY29kZSA9PT0gNDAwIHx8IG8ubWV0YS5jb2RlID09PSA0MDEpKSB7XG5cdFx0XHRvLmVycm9yID0ge1xuXHRcdFx0XHRjb2RlOiAnYWNjZXNzX2RlbmllZCcsXG5cdFx0XHRcdG1lc3NhZ2U6IG8ubWV0YS5lcnJvckRldGFpbFxuXHRcdFx0fTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBmb3JtYXRVc2VyKG8pIHtcblx0XHRpZiAobyAmJiBvLmlkKSB7XG5cdFx0XHRvLnRodW1ibmFpbCA9IGAke28ucGhvdG8ucHJlZml4fTEwMHgxMDAke28ucGhvdG8uc3VmZml4fWA7XG5cdFx0XHRvLm5hbWUgPSBgJHtvLmZpcnN0TmFtZX0gJHtvLmxhc3ROYW1lfWA7XG5cdFx0XHRvLmZpcnN0X25hbWUgPSBvLmZpcnN0TmFtZTtcblx0XHRcdG8ubGFzdF9uYW1lID0gby5sYXN0TmFtZTtcblx0XHRcdGlmIChvLmNvbnRhY3QpIHtcblx0XHRcdFx0aWYgKG8uY29udGFjdC5lbWFpbCkge1xuXHRcdFx0XHRcdG8uZW1haWwgPSBvLmNvbnRhY3QuZW1haWw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBmb3JtYXRSZXF1ZXN0KHAsIHFzKSB7XG5cdFx0Y29uc3QgdG9rZW4gPSBxcy5hY2Nlc3NfdG9rZW47XG5cdFx0ZGVsZXRlIHFzLmFjY2Vzc190b2tlbjtcblx0XHRxcy5vYXV0aF90b2tlbiA9IHRva2VuO1xuXHRcdHFzLnYgPSAyMDEyMTEyNTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG59IiwiY29uc3QgaGVsbG8gPSByZXF1aXJlKCcuLi9oZWxsby5qcycpO1xuXG57XG5cblx0aGVsbG8uaW5pdCh7XG5cblx0XHRnaXRodWI6IHtcblxuXHRcdFx0bmFtZTogJ0dpdEh1YicsXG5cblx0XHRcdG9hdXRoOiB7XG5cdFx0XHRcdHZlcnNpb246IDIsXG5cdFx0XHRcdGF1dGg6ICdodHRwczovL2dpdGh1Yi5jb20vbG9naW4vb2F1dGgvYXV0aG9yaXplJyxcblx0XHRcdFx0Z3JhbnQ6ICdodHRwczovL2dpdGh1Yi5jb20vbG9naW4vb2F1dGgvYWNjZXNzX3Rva2VuJyxcblx0XHRcdFx0cmVzcG9uc2VfdHlwZTogJ2NvZGUnXG5cdFx0XHR9LFxuXG5cdFx0XHRzY29wZToge1xuXHRcdFx0XHRlbWFpbDogJ3VzZXI6ZW1haWwnXG5cdFx0XHR9LFxuXG5cdFx0XHRiYXNlOiAnaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS8nLFxuXG5cdFx0XHRnZXQ6IHtcblx0XHRcdFx0bWU6ICd1c2VyJyxcblx0XHRcdFx0J21lL2ZyaWVuZHMnOiAndXNlci9mb2xsb3dpbmc/cGVyX3BhZ2U9QHtsaW1pdHwxMDB9Jyxcblx0XHRcdFx0J21lL2ZvbGxvd2luZyc6ICd1c2VyL2ZvbGxvd2luZz9wZXJfcGFnZT1Ae2xpbWl0fDEwMH0nLFxuXHRcdFx0XHQnbWUvZm9sbG93ZXJzJzogJ3VzZXIvZm9sbG93ZXJzP3Blcl9wYWdlPUB7bGltaXR8MTAwfScsXG5cdFx0XHRcdCdtZS9saWtlJzogJ3VzZXIvc3RhcnJlZD9wZXJfcGFnZT1Ae2xpbWl0fDEwMH0nXG5cdFx0XHR9LFxuXG5cdFx0XHR3cmFwOiB7XG5cdFx0XHRcdG1lKG8sIGhlYWRlcnMpIHtcblxuXHRcdFx0XHRcdGZvcm1hdEVycm9yKG8sIGhlYWRlcnMpO1xuXHRcdFx0XHRcdGZvcm1hdFVzZXIobyk7XG5cblx0XHRcdFx0XHRyZXR1cm4gbztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRkZWZhdWx0KG8sIGhlYWRlcnMsIHJlcSkge1xuXG5cdFx0XHRcdFx0Zm9ybWF0RXJyb3IobywgaGVhZGVycyk7XG5cblx0XHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShvKSkge1xuXHRcdFx0XHRcdFx0byA9IHtkYXRhOiBvfTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoby5kYXRhKSB7XG5cdFx0XHRcdFx0XHRwYWdpbmcobywgaGVhZGVycywgcmVxKTtcblx0XHRcdFx0XHRcdG8uZGF0YS5mb3JFYWNoKGZvcm1hdFVzZXIpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBvO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHR4aHIocCkge1xuXG5cdFx0XHRcdGlmIChwLm1ldGhvZCAhPT0gJ2dldCcgJiYgcC5kYXRhKSB7XG5cblx0XHRcdFx0XHQvLyBTZXJpYWxpemUgcGF5bG9hZCBhcyBKU09OXG5cdFx0XHRcdFx0cC5oZWFkZXJzID0gcC5oZWFkZXJzIHx8IHt9O1xuXHRcdFx0XHRcdHAuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiAocC5kYXRhKSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHRcdHAuZGF0YSA9IEpTT04uc3RyaW5naWZ5KHAuZGF0YSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRmdW5jdGlvbiBmb3JtYXRFcnJvcihvLCBoZWFkZXJzKSB7XG5cdFx0Y29uc3QgY29kZSA9IGhlYWRlcnMgPyBoZWFkZXJzLnN0YXR1c0NvZGUgOiAobyAmJiAnbWV0YScgaW4gbyAmJiAnc3RhdHVzJyBpbiBvLm1ldGEgJiYgby5tZXRhLnN0YXR1cyk7XG5cdFx0aWYgKChjb2RlID09PSA0MDEgfHwgY29kZSA9PT0gNDAzKSkge1xuXHRcdFx0by5lcnJvciA9IHtcblx0XHRcdFx0Y29kZTogJ2FjY2Vzc19kZW5pZWQnLFxuXHRcdFx0XHRtZXNzYWdlOiBvLm1lc3NhZ2UgfHwgKG8uZGF0YSA/IG8uZGF0YS5tZXNzYWdlIDogJ0NvdWxkIG5vdCBnZXQgcmVzcG9uc2UnKVxuXHRcdFx0fTtcblx0XHRcdGRlbGV0ZSBvLm1lc3NhZ2U7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0VXNlcihvKSB7XG5cdFx0aWYgKG8uaWQpIHtcblx0XHRcdG8udGh1bWJuYWlsID0gby5waWN0dXJlID0gby5hdmF0YXJfdXJsO1xuXHRcdFx0by5uYW1lID0gby5sb2dpbjtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBwYWdpbmcocmVzLCBoZWFkZXJzKSB7XG5cdFx0aWYgKHJlcy5kYXRhICYmIHJlcy5kYXRhLmxlbmd0aCAmJiBoZWFkZXJzICYmIGhlYWRlcnMuTGluaykge1xuXHRcdFx0Y29uc3QgbmV4dCA9IGhlYWRlcnMuTGluay5tYXRjaCgvPCguKj8pPjtcXHMqcmVsPVwibmV4dFwiLyk7XG5cdFx0XHRpZiAobmV4dCkge1xuXHRcdFx0XHRyZXMucGFnaW5nID0ge1xuXHRcdFx0XHRcdG5leHQ6IG5leHRbMV1cblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxufSIsImNvbnN0IGhlbGxvID0gcmVxdWlyZSgnLi4vaGVsbG8uanMnKTtcblxue1xuXG5cdGNvbnN0IGNvbnRhY3RzVXJsID0gJ2h0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbTgvZmVlZHMvY29udGFjdHMvZGVmYXVsdC9mdWxsP3Y9My4wJmFsdD1qc29uJm1heC1yZXN1bHRzPUB7bGltaXR8MTAwMH0mc3RhcnQtaW5kZXg9QHtzdGFydHwxfSc7XG5cblx0aGVsbG8uaW5pdCh7XG5cblx0XHRnb29nbGU6IHtcblxuXHRcdFx0bmFtZTogJ0dvb2dsZSBQbHVzJyxcblxuXHRcdFx0Ly8gU2VlOiBodHRwOi8vY29kZS5nb29nbGUuY29tL2FwaXMvYWNjb3VudHMvZG9jcy9PQXV0aDJVc2VyQWdlbnQuaHRtbFxuXHRcdFx0b2F1dGg6IHtcblx0XHRcdFx0dmVyc2lvbjogMixcblx0XHRcdFx0YXV0aDogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9hdXRoJyxcblx0XHRcdFx0Z3JhbnQ6ICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvdG9rZW4nXG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBBdXRob3JpemF0aW9uIHNjb3Blc1xuXHRcdFx0c2NvcGU6IHtcblx0XHRcdFx0YmFzaWM6ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL3BsdXMubWUgcHJvZmlsZScsXG5cdFx0XHRcdGVtYWlsOiAnZW1haWwnLFxuXHRcdFx0XHRiaXJ0aGRheTogJycsXG5cdFx0XHRcdGV2ZW50czogJycsXG5cdFx0XHRcdHBob3RvczogJ2h0dHBzOi8vcGljYXNhd2ViLmdvb2dsZS5jb20vZGF0YS8nLFxuXHRcdFx0XHR2aWRlb3M6ICdodHRwOi8vZ2RhdGEueW91dHViZS5jb20nLFxuXHRcdFx0XHRmcmllbmRzOiAnaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tOC9mZWVkcywgaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9wbHVzLmxvZ2luJyxcblx0XHRcdFx0ZmlsZXM6ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2RyaXZlLnJlYWRvbmx5Jyxcblx0XHRcdFx0cHVibGlzaDogJycsXG5cdFx0XHRcdHB1Ymxpc2hfZmlsZXM6ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2RyaXZlJyxcblx0XHRcdFx0c2hhcmU6ICcnLFxuXHRcdFx0XHRjcmVhdGVfZXZlbnQ6ICcnLFxuXHRcdFx0XHRvZmZsaW5lX2FjY2VzczogJydcblx0XHRcdH0sXG5cblx0XHRcdHNjb3BlX2RlbGltOiAnICcsXG5cblx0XHRcdGxvZ2luKHApIHtcblxuXHRcdFx0XHRpZiAocC5xcy5yZXNwb25zZV90eXBlID09PSAnY29kZScpIHtcblxuXHRcdFx0XHRcdC8vIExldCdzIHNldCB0aGlzIHRvIGFuIG9mZmxpbmUgYWNjZXNzIHRvIHJldHVybiBhIHJlZnJlc2hfdG9rZW5cblx0XHRcdFx0XHRwLnFzLmFjY2Vzc190eXBlID0gJ29mZmxpbmUnO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVhdXRoZW50aWNhdGVcblx0XHRcdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vaWRlbnRpdHkvcHJvdG9jb2xzL1xuXHRcdFx0XHRpZiAocC5vcHRpb25zLmZvcmNlKSB7XG5cdFx0XHRcdFx0cC5xcy5hcHByb3ZhbF9wcm9tcHQgPSAnZm9yY2UnO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBBUEkgYmFzZSBVUklcblx0XHRcdGJhc2U6ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS8nLFxuXG5cdFx0XHQvLyBNYXAgR0VUIHJlcXVlc3RzXG5cdFx0XHRnZXQ6IHtcblx0XHRcdFx0bWU6ICdwbHVzL3YxL3Blb3BsZS9tZScsXG5cblx0XHRcdFx0Ly8gRGVwcmVjYXRlZCBTZXB0IDEsIDIwMTRcblx0XHRcdFx0Ly8nbWUnOiAnb2F1dGgyL3YxL3VzZXJpbmZvP2FsdD1qc29uJyxcblxuXHRcdFx0XHQvLyBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tLysvYXBpL2xhdGVzdC9wZW9wbGUvbGlzdFxuXHRcdFx0XHQnbWUvZnJpZW5kcyc6ICdwbHVzL3YxL3Blb3BsZS9tZS9wZW9wbGUvdmlzaWJsZT9tYXhSZXN1bHRzPUB7bGltaXR8MTAwfScsXG5cdFx0XHRcdCdtZS9mb2xsb3dpbmcnOiBjb250YWN0c1VybCxcblx0XHRcdFx0J21lL2ZvbGxvd2Vycyc6IGNvbnRhY3RzVXJsLFxuXHRcdFx0XHQnbWUvY29udGFjdHMnOiBjb250YWN0c1VybCxcblx0XHRcdFx0J21lL3NoYXJlJzogJ3BsdXMvdjEvcGVvcGxlL21lL2FjdGl2aXRpZXMvcHVibGljP21heFJlc3VsdHM9QHtsaW1pdHwxMDB9Jyxcblx0XHRcdFx0J21lL2ZlZWQnOiAncGx1cy92MS9wZW9wbGUvbWUvYWN0aXZpdGllcy9wdWJsaWM/bWF4UmVzdWx0cz1Ae2xpbWl0fDEwMH0nLFxuXHRcdFx0XHQnbWUvYWxidW1zJzogJ2h0dHBzOi8vcGljYXNhd2ViLmdvb2dsZS5jb20vZGF0YS9mZWVkL2FwaS91c2VyL2RlZmF1bHQ/YWx0PWpzb24mbWF4LXJlc3VsdHM9QHtsaW1pdHwxMDB9JnN0YXJ0LWluZGV4PUB7c3RhcnR8MX0nLFxuXHRcdFx0XHQnbWUvYWxidW0nKHAsIGNhbGxiYWNrKSB7XG5cdFx0XHRcdFx0Y29uc3Qga2V5ID0gcC5xdWVyeS5pZDtcblx0XHRcdFx0XHRkZWxldGUgcC5xdWVyeS5pZDtcblx0XHRcdFx0XHRjYWxsYmFjayhrZXkucmVwbGFjZSgnL2VudHJ5LycsICcvZmVlZC8nKSk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0J21lL3Bob3Rvcyc6ICdodHRwczovL3BpY2FzYXdlYi5nb29nbGUuY29tL2RhdGEvZmVlZC9hcGkvdXNlci9kZWZhdWx0P2FsdD1qc29uJmtpbmQ9cGhvdG8mbWF4LXJlc3VsdHM9QHtsaW1pdHwxMDB9JnN0YXJ0LWluZGV4PUB7c3RhcnR8MX0nLFxuXG5cdFx0XHRcdC8vIFNlZTogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vZHJpdmUvdjIvcmVmZXJlbmNlL2ZpbGVzL2xpc3Rcblx0XHRcdFx0J21lL2ZpbGUnOiAnZHJpdmUvdjIvZmlsZXMvQHtpZH0nLFxuXHRcdFx0XHQnbWUvZmlsZXMnOiAnZHJpdmUvdjIvZmlsZXM/cT0lMjJAe3BhcmVudHxyb290fSUyMitpbitwYXJlbnRzK2FuZCt0cmFzaGVkPWZhbHNlJm1heFJlc3VsdHM9QHtsaW1pdHwxMDB9JyxcblxuXHRcdFx0XHQvLyBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2RyaXZlL3YyL3JlZmVyZW5jZS9maWxlcy9saXN0XG5cdFx0XHRcdCdtZS9mb2xkZXJzJzogJ2RyaXZlL3YyL2ZpbGVzP3E9JTIyQHtpZHxyb290fSUyMitpbitwYXJlbnRzK2FuZCttaW1lVHlwZSs9KyUyMmFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5mb2xkZXIlMjIrYW5kK3RyYXNoZWQ9ZmFsc2UmbWF4UmVzdWx0cz1Ae2xpbWl0fDEwMH0nLFxuXG5cdFx0XHRcdC8vIFNlZTogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vZHJpdmUvdjIvcmVmZXJlbmNlL2ZpbGVzL2xpc3Rcblx0XHRcdFx0J21lL2ZvbGRlcic6ICdkcml2ZS92Mi9maWxlcz9xPSUyMkB7aWR8cm9vdH0lMjIraW4rcGFyZW50cythbmQrdHJhc2hlZD1mYWxzZSZtYXhSZXN1bHRzPUB7bGltaXR8MTAwfSdcblx0XHRcdH0sXG5cblx0XHRcdC8vIE1hcCBQT1NUIHJlcXVlc3RzXG5cdFx0XHRwb3N0OiB7XG5cblx0XHRcdFx0Ly8gR29vZ2xlIERyaXZlXG5cdFx0XHRcdCdtZS9maWxlcyc6IHVwbG9hZERyaXZlLFxuXHRcdFx0XHQnbWUvZm9sZGVycycocCwgY2FsbGJhY2spIHtcblx0XHRcdFx0XHRwLmRhdGEgPSB7XG5cdFx0XHRcdFx0XHR0aXRsZTogcC5kYXRhLm5hbWUsXG5cdFx0XHRcdFx0XHRwYXJlbnRzOiBbe2lkOiBwLmRhdGEucGFyZW50IHx8ICdyb290J31dLFxuXHRcdFx0XHRcdFx0bWltZVR5cGU6ICdhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZm9sZGVyJ1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0Y2FsbGJhY2soJ2RyaXZlL3YyL2ZpbGVzJyk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIE1hcCBQVVQgcmVxdWVzdHNcblx0XHRcdHB1dDoge1xuXHRcdFx0XHQnbWUvZmlsZXMnOiB1cGxvYWREcml2ZVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gTWFwIERFTEVURSByZXF1ZXN0c1xuXHRcdFx0ZGVsOiB7XG5cdFx0XHRcdCdtZS9maWxlcyc6ICdkcml2ZS92Mi9maWxlcy9Ae2lkfScsXG5cdFx0XHRcdCdtZS9mb2xkZXInOiAnZHJpdmUvdjIvZmlsZXMvQHtpZH0nXG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBNYXAgUEFUQ0ggcmVxdWVzdHNcblx0XHRcdHBhdGNoOiB7XG5cdFx0XHRcdCdtZS9maWxlJzogJ2RyaXZlL3YyL2ZpbGVzL0B7aWR9J1xuXHRcdFx0fSxcblxuXHRcdFx0d3JhcDoge1xuXHRcdFx0XHRtZShvKSB7XG5cdFx0XHRcdFx0aWYgKG8uaWQpIHtcblx0XHRcdFx0XHRcdG8ubGFzdF9uYW1lID0gby5mYW1pbHlfbmFtZSB8fCAoby5uYW1lID8gby5uYW1lLmZhbWlseU5hbWUgOiBudWxsKTtcblx0XHRcdFx0XHRcdG8uZmlyc3RfbmFtZSA9IG8uZ2l2ZW5fbmFtZSB8fCAoby5uYW1lID8gby5uYW1lLmdpdmVuTmFtZSA6IG51bGwpO1xuXG5cdFx0XHRcdFx0XHRpZiAoby5lbWFpbHMgJiYgby5lbWFpbHMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRcdG8uZW1haWwgPSBvLmVtYWlsc1swXS52YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Zm9ybWF0UGVyc29uKG8pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBvO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdCdtZS9mcmllbmRzJyhvKSB7XG5cdFx0XHRcdFx0aWYgKG8uaXRlbXMpIHtcblx0XHRcdFx0XHRcdHBhZ2luZyhvKTtcblx0XHRcdFx0XHRcdG8uZGF0YSA9IG8uaXRlbXM7XG5cdFx0XHRcdFx0XHRvLmRhdGEuZm9yRWFjaChmb3JtYXRQZXJzb24pO1xuXHRcdFx0XHRcdFx0ZGVsZXRlIG8uaXRlbXM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIG87XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0J21lL2NvbnRhY3RzJzogZm9ybWF0RnJpZW5kcyxcblx0XHRcdFx0J21lL2ZvbGxvd2Vycyc6IGZvcm1hdEZyaWVuZHMsXG5cdFx0XHRcdCdtZS9mb2xsb3dpbmcnOiBmb3JtYXRGcmllbmRzLFxuXHRcdFx0XHQnbWUvc2hhcmUnOiBmb3JtYXRGZWVkLFxuXHRcdFx0XHQnbWUvZmVlZCc6IGZvcm1hdEZlZWQsXG5cdFx0XHRcdCdtZS9hbGJ1bXMnOiBnRW50cnksXG5cdFx0XHRcdCdtZS9waG90b3MnOiBmb3JtYXRQaG90b3MsXG5cdFx0XHRcdGRlZmF1bHQ6IGdFbnRyeVxuXHRcdFx0fSxcblxuXHRcdFx0eGhyKHApIHtcblxuXHRcdFx0XHRpZiAocC5tZXRob2QgPT09ICdwb3N0JyB8fCBwLm1ldGhvZCA9PT0gJ3B1dCcpIHtcblx0XHRcdFx0XHR0b0pTT04ocCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZiAocC5tZXRob2QgPT09ICdwYXRjaCcpIHtcblx0XHRcdFx0XHRPYmplY3QuYXNzaWduKHAucXVlcnksIHAuZGF0YSk7XG5cdFx0XHRcdFx0cC5kYXRhID0gbnVsbDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRG9uJ3QgZXZlbiB0cnkgc3VibWl0dGluZyB2aWEgZm9ybS5cblx0XHRcdC8vIFRoaXMgbWVhbnMgbm8gUE9TVCBvcGVyYXRpb25zIGluIDw9SUU5XG5cdFx0XHRmb3JtOiBmYWxzZVxuXHRcdH1cblx0fSk7XG5cblx0ZnVuY3Rpb24gdG9JbnQocykge1xuXHRcdHJldHVybiBwYXJzZUludChzLCAxMCk7XG5cdH1cblxuXHRmdW5jdGlvbiBmb3JtYXRGZWVkKG8pIHtcblx0XHRwYWdpbmcobyk7XG5cdFx0by5kYXRhID0gby5pdGVtcztcblx0XHRkZWxldGUgby5pdGVtcztcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8vIEZvcm1hdDogZW5zdXJlIGVhY2ggcmVjb3JkIGNvbnRhaW5zIGEgbmFtZSwgaWQgZXRjLlxuXHRmdW5jdGlvbiBmb3JtYXRJdGVtKG8pIHtcblx0XHRpZiAoby5lcnJvcikge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICghby5uYW1lKSB7XG5cdFx0XHRvLm5hbWUgPSBvLnRpdGxlIHx8IG8ubWVzc2FnZTtcblx0XHR9XG5cblx0XHRpZiAoIW8ucGljdHVyZSkge1xuXHRcdFx0by5waWN0dXJlID0gby50aHVtYm5haWxMaW5rO1xuXHRcdH1cblxuXHRcdGlmICghby50aHVtYm5haWwpIHtcblx0XHRcdG8udGh1bWJuYWlsID0gby50aHVtYm5haWxMaW5rO1xuXHRcdH1cblxuXHRcdGlmIChvLm1pbWVUeXBlID09PSAnYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLmZvbGRlcicpIHtcblx0XHRcdG8udHlwZSA9ICdmb2xkZXInO1xuXHRcdFx0by5maWxlcyA9IGBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9kcml2ZS92Mi9maWxlcz9xPSUyMiR7ICBvLmlkICB9JTIyK2luK3BhcmVudHNgO1xuXHRcdH1cblxuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0SW1hZ2UoaW1hZ2UpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c291cmNlOiBpbWFnZS51cmwsXG5cdFx0XHR3aWR0aDogaW1hZ2Uud2lkdGgsXG5cdFx0XHRoZWlnaHQ6IGltYWdlLmhlaWdodFxuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBmb3JtYXRQaG90b3Mobykge1xuXHRcdG8uZGF0YSA9IG8uZmVlZC5lbnRyeS5tYXAoZm9ybWF0RW50cnkpO1xuXHRcdGRlbGV0ZSBvLmZlZWQ7XG5cdH1cblxuXHQvLyBHb29nbGUgaGFzIGEgaG9ycmlibGUgSlNPTiBBUElcblx0ZnVuY3Rpb24gZ0VudHJ5KG8pIHtcblx0XHRwYWdpbmcobyk7XG5cblx0XHRpZiAoJ2ZlZWQnIGluIG8gJiYgJ2VudHJ5JyBpbiBvLmZlZWQpIHtcblx0XHRcdG8uZGF0YSA9IG8uZmVlZC5lbnRyeS5tYXAoZm9ybWF0RW50cnkpO1xuXHRcdFx0ZGVsZXRlIG8uZmVlZDtcblx0XHR9XG5cblx0XHQvLyBPbGQgc3R5bGU6IFBpY2FzYSwgZXRjLlxuXHRcdGVsc2UgaWYgKCdlbnRyeScgaW4gbykge1xuXHRcdFx0cmV0dXJuIGZvcm1hdEVudHJ5KG8uZW50cnkpO1xuXHRcdH1cblxuXHRcdC8vIE5ldyBzdHlsZTogR29vZ2xlIERyaXZlICYgUGx1c1xuXHRcdGVsc2UgaWYgKCdpdGVtcycgaW4gbykge1xuXHRcdFx0by5kYXRhID0gby5pdGVtcy5tYXAoZm9ybWF0SXRlbSk7XG5cdFx0XHRkZWxldGUgby5pdGVtcztcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRmb3JtYXRJdGVtKG8pO1xuXHRcdH1cblxuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0UGVyc29uKG8pIHtcblx0XHRvLm5hbWUgPSBvLmRpc3BsYXlOYW1lIHx8IG8ubmFtZTtcblx0XHRvLnBpY3R1cmUgPSBvLnBpY3R1cmUgfHwgKG8uaW1hZ2UgPyBvLmltYWdlLnVybCA6IG51bGwpO1xuXHRcdG8udGh1bWJuYWlsID0gby5waWN0dXJlO1xuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0RnJpZW5kcyhvLCBoZWFkZXJzLCByZXEpIHtcblx0XHRwYWdpbmcobyk7XG5cdFx0aWYgKCdmZWVkJyBpbiBvICYmICdlbnRyeScgaW4gby5mZWVkKSB7XG5cdFx0XHRjb25zdCB0b2tlbiA9IHJlcS5xdWVyeS5hY2Nlc3NfdG9rZW47XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG8uZmVlZC5lbnRyeS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjb25zdCBhID0gby5mZWVkLmVudHJ5W2ldO1xuXG5cdFx0XHRcdGEuaWRcdD0gYS5pZC4kdDtcblx0XHRcdFx0YS5uYW1lXHQ9IGEudGl0bGUuJHQ7XG5cdFx0XHRcdGRlbGV0ZSBhLnRpdGxlO1xuXHRcdFx0XHRpZiAoYS5nZCRlbWFpbCkge1xuXHRcdFx0XHRcdGEuZW1haWxcdD0gKGEuZ2QkZW1haWwgJiYgYS5nZCRlbWFpbC5sZW5ndGggPiAwKSA/IGEuZ2QkZW1haWxbMF0uYWRkcmVzcyA6IG51bGw7XG5cdFx0XHRcdFx0YS5lbWFpbHMgPSBhLmdkJGVtYWlsO1xuXHRcdFx0XHRcdGRlbGV0ZSBhLmdkJGVtYWlsO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGEudXBkYXRlZCkge1xuXHRcdFx0XHRcdGEudXBkYXRlZCA9IGEudXBkYXRlZC4kdDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChhLmxpbmspIHtcblxuXHRcdFx0XHRcdGxldCBwaWMgPSAoYS5saW5rLmxlbmd0aCA+IDApID8gYS5saW5rWzBdLmhyZWYgOiBudWxsO1xuXHRcdFx0XHRcdGlmIChwaWMgJiYgYS5saW5rWzBdLmdkJGV0YWcpIHtcblx0XHRcdFx0XHRcdHBpYyArPSBgJHtwaWMuaW5kZXhPZignPycpID4gLTEgPyAnJicgOiAnPycgIH1hY2Nlc3NfdG9rZW49JHsgIHRva2VufWA7XG5cdFx0XHRcdFx0XHRhLnBpY3R1cmUgPSBwaWM7XG5cdFx0XHRcdFx0XHRhLnRodW1ibmFpbCA9IHBpYztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRkZWxldGUgYS5saW5rO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGEuY2F0ZWdvcnkpIHtcblx0XHRcdFx0XHRkZWxldGUgYS5jYXRlZ29yeTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRvLmRhdGEgPSBvLmZlZWQuZW50cnk7XG5cdFx0XHRkZWxldGUgby5mZWVkO1xuXHRcdH1cblxuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0RW50cnkoYSkge1xuXG5cdFx0Y29uc3QgZ3JvdXAgPSBhLm1lZGlhJGdyb3VwO1xuXHRcdGNvbnN0IHBob3RvID0gZ3JvdXAubWVkaWEkY29udGVudC5sZW5ndGggPyBncm91cC5tZWRpYSRjb250ZW50WzBdIDoge307XG5cdFx0Y29uc3QgbWVkaWFDb250ZW50ID0gZ3JvdXAubWVkaWEkY29udGVudCB8fCBbXTtcblx0XHRjb25zdCBtZWRpYVRodW1ibmFpbCA9IGdyb3VwLm1lZGlhJHRodW1ibmFpbCB8fCBbXTtcblxuXHRcdGNvbnN0IHBpY3R1cmVzID0gbWVkaWFDb250ZW50XG5cdFx0XHQuY29uY2F0KG1lZGlhVGh1bWJuYWlsKVxuXHRcdFx0Lm1hcChmb3JtYXRJbWFnZSlcblx0XHRcdC5zb3J0KChhLCBiKSA9PiBhLndpZHRoIC0gYi53aWR0aCk7XG5cblx0XHRsZXQgaSA9IDA7XG5cdFx0bGV0IF9hO1xuXHRcdGNvbnN0IHAgPSB7XG5cdFx0XHRpZDogYS5pZC4kdCxcblx0XHRcdG5hbWU6IGEudGl0bGUuJHQsXG5cdFx0XHRkZXNjcmlwdGlvbjogYS5zdW1tYXJ5LiR0LFxuXHRcdFx0dXBkYXRlZF90aW1lOiBhLnVwZGF0ZWQuJHQsXG5cdFx0XHRjcmVhdGVkX3RpbWU6IGEucHVibGlzaGVkLiR0LFxuXHRcdFx0cGljdHVyZTogcGhvdG8gPyBwaG90by51cmwgOiBudWxsLFxuXHRcdFx0cGljdHVyZXMsXG5cdFx0XHRpbWFnZXM6IFtdLFxuXHRcdFx0dGh1bWJuYWlsOiBwaG90byA/IHBob3RvLnVybCA6IG51bGwsXG5cdFx0XHR3aWR0aDogcGhvdG8ud2lkdGgsXG5cdFx0XHRoZWlnaHQ6IHBob3RvLmhlaWdodFxuXHRcdH07XG5cblx0XHQvLyBHZXQgZmVlZC9jaGlsZHJlblxuXHRcdGlmICgnbGluaycgaW4gYSkge1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGEubGluay5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjb25zdCBkID0gYS5saW5rW2ldO1xuXHRcdFx0XHRpZiAoZC5yZWwubWF0Y2goLyNmZWVkJC8pKSB7XG5cdFx0XHRcdFx0cC51cGxvYWRfbG9jYXRpb24gPSBwLmZpbGVzID0gcC5waG90b3MgPSBkLmhyZWY7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBHZXQgaW1hZ2VzIG9mIGRpZmZlcmVudCBzY2FsZXNcblx0XHRpZiAoJ2NhdGVnb3J5JyBpbiBhICYmIGEuY2F0ZWdvcnkubGVuZ3RoKSB7XG5cdFx0XHRfYSA9IGEuY2F0ZWdvcnk7XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgX2EubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKF9hW2ldLnNjaGVtZSAmJiBfYVtpXS5zY2hlbWUubWF0Y2goLyNraW5kJC8pKSB7XG5cdFx0XHRcdFx0cC50eXBlID0gX2FbaV0udGVybS5yZXBsYWNlKC9eLio/Iy8sICcnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEdldCBpbWFnZXMgb2YgZGlmZmVyZW50IHNjYWxlc1xuXHRcdGlmICgnbWVkaWEkdGh1bWJuYWlsJyBpbiBncm91cCAmJiBncm91cC5tZWRpYSR0aHVtYm5haWwubGVuZ3RoKSB7XG5cdFx0XHRfYSA9IGdyb3VwLm1lZGlhJHRodW1ibmFpbDtcblx0XHRcdHAudGh1bWJuYWlsID0gX2FbMF0udXJsO1xuXHRcdFx0cC5pbWFnZXMgPSBfYS5tYXAoZm9ybWF0SW1hZ2UpO1xuXHRcdH1cblxuXHRcdF9hID0gZ3JvdXAubWVkaWEkY29udGVudDtcblxuXHRcdGlmIChfYSAmJiBfYS5sZW5ndGgpIHtcblx0XHRcdHAuaW1hZ2VzLnB1c2goZm9ybWF0SW1hZ2UoX2FbMF0pKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcDtcblx0fVxuXG5cdGZ1bmN0aW9uIHBhZ2luZyhyZXMpIHtcblxuXHRcdC8vIENvbnRhY3RzIFYyXG5cdFx0aWYgKCdmZWVkJyBpbiByZXMgJiYgcmVzLmZlZWQub3BlblNlYXJjaCRpdGVtc1BlclBhZ2UpIHtcblx0XHRcdGNvbnN0IGxpbWl0ID0gdG9JbnQocmVzLmZlZWQub3BlblNlYXJjaCRpdGVtc1BlclBhZ2UuJHQpO1xuXHRcdFx0Y29uc3Qgc3RhcnQgPSB0b0ludChyZXMuZmVlZC5vcGVuU2VhcmNoJHN0YXJ0SW5kZXguJHQpO1xuXHRcdFx0Y29uc3QgdG90YWwgPSB0b0ludChyZXMuZmVlZC5vcGVuU2VhcmNoJHRvdGFsUmVzdWx0cy4kdCk7XG5cblx0XHRcdGlmICgoc3RhcnQgKyBsaW1pdCkgPCB0b3RhbCkge1xuXHRcdFx0XHRyZXMucGFnaW5nID0ge1xuXHRcdFx0XHRcdG5leHQ6IGA/c3RhcnQ9JHsgIHN0YXJ0ICsgbGltaXR9YFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIGlmICgnbmV4dFBhZ2VUb2tlbicgaW4gcmVzKSB7XG5cdFx0XHRyZXMucGFnaW5nID0ge1xuXHRcdFx0XHRuZXh0OiBgP3BhZ2VUb2tlbj0keyAgcmVzLm5leHRQYWdlVG9rZW59YFxuXHRcdFx0fTtcblx0XHR9XG5cdH1cblxuXHQvLyBDb25zdHJ1Y3QgYSBtdWx0aXBhcnQgbWVzc2FnZVxuXHRmdW5jdGlvbiBNdWx0aXBhcnQoKSB7XG5cblx0XHQvLyBJbnRlcm5hbCBib2R5XG5cdFx0bGV0IGJvZHkgPSBbXTtcblx0XHRjb25zdCBib3VuZGFyeSA9IChNYXRoLnJhbmRvbSgpICogMWUxMCkudG9TdHJpbmcoMzIpO1xuXHRcdGxldCBjb3VudGVyID0gMDtcblx0XHRjb25zdCBsaW5lQnJlYWsgPSAnXFxyXFxuJztcblx0XHRjb25zdCBkZWxpbSA9IGAke2xpbmVCcmVhayAgfS0tJHsgIGJvdW5kYXJ5fWA7XG5cdFx0bGV0IHJlYWR5ID0gZnVuY3Rpb24oKSB7fTtcblxuXHRcdGNvbnN0IGRhdGFVcmkgPSAvXmRhdGE6KFteOyxdKyg7Y2hhcnNldD1bXjssXSspPykoO2Jhc2U2NCk/LC9pO1xuXG5cdFx0Ly8gQWRkIGZpbGVcblx0XHRmdW5jdGlvbiBhZGRGaWxlKGl0ZW0pIHtcblx0XHRcdGNvbnN0IGZyID0gbmV3IEZpbGVSZWFkZXIoKTtcblx0XHRcdGZyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0YWRkQ29udGVudChidG9hKGUudGFyZ2V0LnJlc3VsdCksIGAke2l0ZW0udHlwZSArIGxpbmVCcmVha31Db250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiBiYXNlNjRgKTtcblx0XHRcdH07XG5cblx0XHRcdGZyLnJlYWRBc0JpbmFyeVN0cmluZyhpdGVtKTtcblx0XHR9XG5cblx0XHQvLyBBZGQgY29udGVudFxuXHRcdGZ1bmN0aW9uIGFkZENvbnRlbnQoY29udGVudCwgdHlwZSkge1xuXHRcdFx0Ym9keS5wdXNoKGAke2xpbmVCcmVha31Db250ZW50LVR5cGU6ICR7dHlwZX0ke2xpbmVCcmVha30ke2xpbmVCcmVha30ke2NvbnRlbnR9YCk7XG5cdFx0XHRjb3VudGVyLS07XG5cdFx0XHRyZWFkeSgpO1xuXHRcdH1cblxuXHRcdC8vIEFkZCBuZXcgdGhpbmdzIHRvIHRoZSBvYmplY3Rcblx0XHR0aGlzLmFwcGVuZCA9IGZ1bmN0aW9uKGNvbnRlbnQsIHR5cGUpIHtcblxuXHRcdFx0Ly8gRG9lcyB0aGUgY29udGVudCBoYXZlIGFuIGFycmF5XG5cdFx0XHRpZiAodHlwZW9mIChjb250ZW50KSA9PT0gJ3N0cmluZycgfHwgISgnbGVuZ3RoJyBpbiBPYmplY3QoY29udGVudCkpKSB7XG5cdFx0XHRcdC8vIENvbnZlcnRpIHRvIG11bHRpcGxlc1xuXHRcdFx0XHRjb250ZW50ID0gW2NvbnRlbnRdO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnQubGVuZ3RoOyBpKyspIHtcblxuXHRcdFx0XHRjb3VudGVyKys7XG5cblx0XHRcdFx0Y29uc3QgaXRlbSA9IGNvbnRlbnRbaV07XG5cblx0XHRcdFx0Ly8gSXMgdGhpcyBhIGZpbGU/XG5cdFx0XHRcdC8vIEZpbGVzIGNhbiBiZSBlaXRoZXIgQmxvYnMgb3IgRmlsZSB0eXBlc1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0KHR5cGVvZiAoRmlsZSkgIT09ICd1bmRlZmluZWQnICYmIGl0ZW0gaW5zdGFuY2VvZiBGaWxlKSB8fFxuXHRcdFx0XHRcdCh0eXBlb2YgKEJsb2IpICE9PSAndW5kZWZpbmVkJyAmJiBpdGVtIGluc3RhbmNlb2YgQmxvYilcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0Ly8gUmVhZCB0aGUgZmlsZSBpblxuXHRcdFx0XHRcdGFkZEZpbGUoaXRlbSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBEYXRhLVVSST9cblx0XHRcdFx0Ly8gRGF0YTpbPG1pbWUgdHlwZT5dWztjaGFyc2V0PTxjaGFyc2V0Pl1bO2Jhc2U2NF0sPGVuY29kZWQgZGF0YT5cblx0XHRcdFx0Ly8gL15kYXRhXFw6KFteOyxdKyhcXDtjaGFyc2V0PVteOyxdKyk/KShcXDtiYXNlNjQpPywvaVxuXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgKGl0ZW0pID09PSAnc3RyaW5nJyAmJiBpdGVtLm1hdGNoKGRhdGFVcmkpKSB7XG5cdFx0XHRcdFx0Y29uc3QgbSA9IGl0ZW0ubWF0Y2goZGF0YVVyaSk7XG5cdFx0XHRcdFx0YWRkQ29udGVudChpdGVtLnJlcGxhY2UoZGF0YVVyaSwgJycpLCBgJHttWzFdICsgbGluZUJyZWFrICB9Q29udGVudC1UcmFuc2Zlci1FbmNvZGluZzogYmFzZTY0YCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWd1bGFyIHN0cmluZ1xuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRhZGRDb250ZW50KGl0ZW0sIHR5cGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHRoaXMub25yZWFkeSA9IGZ1bmN0aW9uKGZuKSB7XG5cdFx0XHRyZWFkeSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoY291bnRlciA9PT0gMCkge1xuXHRcdFx0XHRcdC8vIFRyaWdnZXIgcmVhZHlcblx0XHRcdFx0XHRib2R5LnVuc2hpZnQoJycpO1xuXHRcdFx0XHRcdGJvZHkucHVzaCgnLS0nKTtcblx0XHRcdFx0XHRmbihib2R5LmpvaW4oZGVsaW0pLCBib3VuZGFyeSk7XG5cdFx0XHRcdFx0Ym9keSA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHRyZWFkeSgpO1xuXHRcdH07XG5cdH1cblxuXHQvLyBVcGxvYWQgdG8gRHJpdmVcblx0Ly8gSWYgdGhpcyBpcyBQVVQgdGhlbiBvbmx5IGF1Z21lbnQgdGhlIGZpbGUgdXBsb2FkZWRcblx0Ly8gUFVUIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2RyaXZlL3YyL3JlZmVyZW5jZS9maWxlcy91cGRhdGVcblx0Ly8gUE9TVCBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9kcml2ZS9tYW5hZ2UtdXBsb2Fkc1xuXHRmdW5jdGlvbiB1cGxvYWREcml2ZShwLCBjYWxsYmFjaykge1xuXG5cdFx0bGV0IGRhdGEgPSB7fTtcblxuXHRcdC8vIFRlc3QgZm9yIERPTSBlbGVtZW50XG5cdFx0aWYgKHAuZGF0YSAmJlxuXHRcdFx0KHR5cGVvZiAoSFRNTElucHV0RWxlbWVudCkgIT09ICd1bmRlZmluZWQnICYmIHAuZGF0YSBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpXG5cdFx0KSB7XG5cdFx0XHRwLmRhdGEgPSB7ZmlsZTogcC5kYXRhfTtcblx0XHR9XG5cblx0XHRpZiAoIXAuZGF0YS5uYW1lICYmIE9iamVjdChPYmplY3QocC5kYXRhLmZpbGUpLmZpbGVzKS5sZW5ndGggJiYgcC5tZXRob2QgPT09ICdwb3N0Jykge1xuXHRcdFx0cC5kYXRhLm5hbWUgPSBwLmRhdGEuZmlsZS5maWxlc1swXS5uYW1lO1xuXHRcdH1cblxuXHRcdGlmIChwLm1ldGhvZCA9PT0gJ3Bvc3QnKSB7XG5cdFx0XHRwLmRhdGEgPSB7XG5cdFx0XHRcdHRpdGxlOiBwLmRhdGEubmFtZSxcblx0XHRcdFx0cGFyZW50czogW3tpZDogcC5kYXRhLnBhcmVudCB8fCAncm9vdCd9XSxcblx0XHRcdFx0ZmlsZTogcC5kYXRhLmZpbGVcblx0XHRcdH07XG5cdFx0fVxuXHRcdGVsc2Uge1xuXG5cdFx0XHQvLyBNYWtlIGEgcmVmZXJlbmNlXG5cdFx0XHRkYXRhID0gcC5kYXRhO1xuXHRcdFx0cC5kYXRhID0ge307XG5cblx0XHRcdC8vIEFkZCB0aGUgcGFydHMgdG8gY2hhbmdlIGFzIHJlcXVpcmVkXG5cdFx0XHRpZiAoZGF0YS5wYXJlbnQpIHtcblx0XHRcdFx0cC5kYXRhLnBhcmVudHMgPSBbe2lkOiBwLmRhdGEucGFyZW50IHx8ICdyb290J31dO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZGF0YS5maWxlKSB7XG5cdFx0XHRcdHAuZGF0YS5maWxlID0gZGF0YS5maWxlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZGF0YS5uYW1lKSB7XG5cdFx0XHRcdHAuZGF0YS50aXRsZSA9IGRhdGEubmFtZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBFeHRyYWN0IHRoZSBmaWxlLCBpZiBpdCBleGlzdHMgZnJvbSB0aGUgZGF0YSBvYmplY3Rcblx0XHQvLyBJZiB0aGUgRmlsZSBpcyBhbiBJTlBVVCBlbGVtZW50IGxldHMganVzdCBjb25jZXJuIG91cnNlbHZlcyB3aXRoIHRoZSBOb2RlTGlzdFxuXHRcdGxldCBmaWxlO1xuXHRcdGlmICgnZmlsZScgaW4gcC5kYXRhKSB7XG5cdFx0XHRmaWxlID0gcC5kYXRhLmZpbGU7XG5cdFx0XHRkZWxldGUgcC5kYXRhLmZpbGU7XG5cblx0XHRcdGlmICh0eXBlb2YgKGZpbGUpID09PSAnb2JqZWN0JyAmJiAnZmlsZXMnIGluIGZpbGUpIHtcblx0XHRcdFx0Ly8gQXNzaWduIHRoZSBOb2RlTGlzdFxuXHRcdFx0XHRmaWxlID0gZmlsZS5maWxlcztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFmaWxlIHx8ICFmaWxlLmxlbmd0aCkge1xuXHRcdFx0XHRjYWxsYmFjayh7XG5cdFx0XHRcdFx0ZXJyb3I6IHtcblx0XHRcdFx0XHRcdGNvZGU6ICdyZXF1ZXN0X2ludmFsaWQnLFxuXHRcdFx0XHRcdFx0bWVzc2FnZTogJ1RoZXJlIHdlcmUgbm8gZmlsZXMgYXR0YWNoZWQgd2l0aCB0aGlzIHJlcXVlc3QgdG8gdXBsb2FkJ1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdHlwZSBwLmRhdGEubWltZVR5cGUgPSBPYmplY3QoZmlsZVswXSkudHlwZSB8fCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJztcblxuXHRcdC8vIENvbnN0cnVjdCBhIG11bHRpcGFydCBtZXNzYWdlXG5cdFx0Y29uc3QgcGFydHMgPSBuZXcgTXVsdGlwYXJ0KCk7XG5cdFx0cGFydHMuYXBwZW5kKEpTT04uc3RyaW5naWZ5KHAuZGF0YSksICdhcHBsaWNhdGlvbi9qc29uJyk7XG5cblx0XHQvLyBSZWFkIHRoZSBmaWxlIGludG8gYSAgYmFzZTY0IHN0cmluZy4uLiB5ZXAgYSBoYXNzbGUsIGkga25vd1xuXHRcdC8vIEZvcm1EYXRhIGRvZXNuJ3QgbGV0IHVzIGFzc2lnbiBvdXIgb3duIE11bHRpcGFydCBoZWFkZXJzIGFuZCBIVFRQIENvbnRlbnQtVHlwZVxuXHRcdC8vIEFsYXMgR29vZ2xlQXBpIG5lZWQgdGhlc2UgaW4gYSBwYXJ0aWN1bGFyIGZvcm1hdFxuXHRcdGlmIChmaWxlKSB7XG5cdFx0XHRwYXJ0cy5hcHBlbmQoZmlsZSk7XG5cdFx0fVxuXG5cdFx0cGFydHMub25yZWFkeSgoYm9keSwgYm91bmRhcnkpID0+IHtcblxuXHRcdFx0cC5oZWFkZXJzWydjb250ZW50LXR5cGUnXSA9IGBtdWx0aXBhcnQvcmVsYXRlZDsgYm91bmRhcnk9XCIke2JvdW5kYXJ5fVwiYDtcblx0XHRcdHAuZGF0YSA9IGJvZHk7XG5cblx0XHRcdGNhbGxiYWNrKGB1cGxvYWQvZHJpdmUvdjIvZmlsZXMke2RhdGEuaWQgPyBgLyR7ZGF0YS5pZH1gIDogJyd9P3VwbG9hZFR5cGU9bXVsdGlwYXJ0YCk7XG5cdFx0fSk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHRvSlNPTihwKSB7XG5cdFx0aWYgKHR5cGVvZiAocC5kYXRhKSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdC8vIENvbnZlcnQgdGhlIFBPU1QgaW50byBhIGphdmFzY3JpcHQgb2JqZWN0XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRwLmRhdGEgPSBKU09OLnN0cmluZ2lmeShwLmRhdGEpO1xuXHRcdFx0XHRwLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXHRcdFx0fVxuXHRcdFx0Y2F0Y2ggKGUpIHtcblx0XHRcdFx0Ly8gQ29udGludWVcblx0XHRcdH1cblx0XHR9XG5cdH1cblxufSIsImNvbnN0IGhlbGxvID0gcmVxdWlyZSgnLi4vaGVsbG8uanMnKTtcblxue1xuXG5cdGhlbGxvLmluaXQoe1xuXG5cdFx0aW5zdGFncmFtOiB7XG5cblx0XHRcdG5hbWU6ICdJbnN0YWdyYW0nLFxuXG5cdFx0XHRvYXV0aDoge1xuXHRcdFx0XHQvLyBTZWU6IGh0dHA6Ly9pbnN0YWdyYW0uY29tL2RldmVsb3Blci9hdXRoZW50aWNhdGlvbi9cblx0XHRcdFx0dmVyc2lvbjogMixcblx0XHRcdFx0YXV0aDogJ2h0dHBzOi8vaW5zdGFncmFtLmNvbS9vYXV0aC9hdXRob3JpemUvJyxcblx0XHRcdFx0Z3JhbnQ6ICdodHRwczovL2FwaS5pbnN0YWdyYW0uY29tL29hdXRoL2FjY2Vzc190b2tlbidcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlZnJlc2ggdGhlIGFjY2Vzc190b2tlbiBvbmNlIGV4cGlyZWRcblx0XHRcdHJlZnJlc2g6IHRydWUsXG5cblx0XHRcdHNjb3BlOiB7XG5cdFx0XHRcdGJhc2ljOiAnYmFzaWMnLFxuXHRcdFx0XHRwaG90b3M6ICcnLFxuXHRcdFx0XHRmcmllbmRzOiAncmVsYXRpb25zaGlwcycsXG5cdFx0XHRcdHB1Ymxpc2g6ICdsaWtlcyBjb21tZW50cycsXG5cdFx0XHRcdGVtYWlsOiAnJyxcblx0XHRcdFx0c2hhcmU6ICcnLFxuXHRcdFx0XHRwdWJsaXNoX2ZpbGVzOiAnJyxcblx0XHRcdFx0ZmlsZXM6ICcnLFxuXHRcdFx0XHR2aWRlb3M6ICcnLFxuXHRcdFx0XHRvZmZsaW5lX2FjY2VzczogJydcblx0XHRcdH0sXG5cblx0XHRcdHNjb3BlX2RlbGltOiAnICcsXG5cblx0XHRcdGJhc2U6ICdodHRwczovL2FwaS5pbnN0YWdyYW0uY29tL3YxLycsXG5cblx0XHRcdGdldDoge1xuXHRcdFx0XHRtZTogJ3VzZXJzL3NlbGYnLFxuXHRcdFx0XHQnbWUvZmVlZCc6ICd1c2Vycy9zZWxmL2ZlZWQ/Y291bnQ9QHtsaW1pdHwxMDB9Jyxcblx0XHRcdFx0J21lL3Bob3Rvcyc6ICd1c2Vycy9zZWxmL21lZGlhL3JlY2VudD9taW5faWQ9MCZjb3VudD1Ae2xpbWl0fDEwMH0nLFxuXHRcdFx0XHQnbWUvZnJpZW5kcyc6ICd1c2Vycy9zZWxmL2ZvbGxvd3M/Y291bnQ9QHtsaW1pdHwxMDB9Jyxcblx0XHRcdFx0J21lL2ZvbGxvd2luZyc6ICd1c2Vycy9zZWxmL2ZvbGxvd3M/Y291bnQ9QHtsaW1pdHwxMDB9Jyxcblx0XHRcdFx0J21lL2ZvbGxvd2Vycyc6ICd1c2Vycy9zZWxmL2ZvbGxvd2VkLWJ5P2NvdW50PUB7bGltaXR8MTAwfScsXG5cdFx0XHRcdCdmcmllbmQvcGhvdG9zJzogJ3VzZXJzL0B7aWR9L21lZGlhL3JlY2VudD9taW5faWQ9MCZjb3VudD1Ae2xpbWl0fDEwMH0nXG5cdFx0XHR9LFxuXG5cdFx0XHRwb3N0OiB7XG5cdFx0XHRcdCdtZS9saWtlJyhwLCBjYWxsYmFjaykge1xuXHRcdFx0XHRcdGNvbnN0IGlkID0gcC5kYXRhLmlkO1xuXHRcdFx0XHRcdHAuZGF0YSA9IHt9O1xuXHRcdFx0XHRcdGNhbGxiYWNrKGBtZWRpYS8keyAgaWQgIH0vbGlrZXNgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0ZGVsOiB7XG5cdFx0XHRcdCdtZS9saWtlJzogJ21lZGlhL0B7aWR9L2xpa2VzJ1xuXHRcdFx0fSxcblxuXHRcdFx0d3JhcDoge1xuXHRcdFx0XHRtZShvKSB7XG5cblx0XHRcdFx0XHRmb3JtYXRFcnJvcihvKTtcblxuXHRcdFx0XHRcdGlmICgnZGF0YScgaW4gbykge1xuXHRcdFx0XHRcdFx0by5pZCA9IG8uZGF0YS5pZDtcblx0XHRcdFx0XHRcdG8udGh1bWJuYWlsID0gby5kYXRhLnByb2ZpbGVfcGljdHVyZTtcblx0XHRcdFx0XHRcdG8ubmFtZSA9IG8uZGF0YS5mdWxsX25hbWUgfHwgby5kYXRhLnVzZXJuYW1lO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBvO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdCdtZS9mcmllbmRzJzogZm9ybWF0RnJpZW5kcyxcblx0XHRcdFx0J21lL2ZvbGxvd2luZyc6IGZvcm1hdEZyaWVuZHMsXG5cdFx0XHRcdCdtZS9mb2xsb3dlcnMnOiBmb3JtYXRGcmllbmRzLFxuXHRcdFx0XHQnbWUvcGhvdG9zJyhvKSB7XG5cblx0XHRcdFx0XHRmb3JtYXRFcnJvcihvKTtcblx0XHRcdFx0XHRwYWdpbmcobyk7XG5cblx0XHRcdFx0XHRpZiAoJ2RhdGEnIGluIG8pIHtcblx0XHRcdFx0XHRcdG8uZGF0YSA9IG8uZGF0YS5maWx0ZXIoZCA9PiBkLnR5cGUgPT09ICdpbWFnZScpO1xuXG5cdFx0XHRcdFx0XHRvLmRhdGEuZm9yRWFjaChkID0+IHtcblx0XHRcdFx0XHRcdFx0ZC5uYW1lID0gZC5jYXB0aW9uID8gZC5jYXB0aW9uLnRleHQgOiBudWxsO1xuXHRcdFx0XHRcdFx0XHRkLnRodW1ibmFpbCA9IGQuaW1hZ2VzLnRodW1ibmFpbC51cmw7XG5cdFx0XHRcdFx0XHRcdGQucGljdHVyZSA9IGQuaW1hZ2VzLnN0YW5kYXJkX3Jlc29sdXRpb24udXJsO1xuXHRcdFx0XHRcdFx0XHRkLnBpY3R1cmVzID0gT2JqZWN0LmtleXMoZC5pbWFnZXMpXG5cdFx0XHRcdFx0XHRcdFx0Lm1hcChrZXkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29uc3QgaW1hZ2UgPSBkLmltYWdlc1trZXldO1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZvcm1hdEltYWdlKGltYWdlKTtcblx0XHRcdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0XHRcdC5zb3J0KChhLCBiKSA9PiBhLndpZHRoIC0gYi53aWR0aCk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gbztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRkZWZhdWx0KG8pIHtcblx0XHRcdFx0XHRvID0gZm9ybWF0RXJyb3Iobyk7XG5cdFx0XHRcdFx0cGFnaW5nKG8pO1xuXHRcdFx0XHRcdHJldHVybiBvO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBJbnN0YWdyYW0gZG9lcyBub3QgcmV0dXJuIGFueSBDT1JTIEhlYWRlcnNcblx0XHRcdC8vIFNvIGJlc2lkZXMgSlNPTlAgd2UncmUgc3R1Y2sgd2l0aCBwcm94eVxuXHRcdFx0eGhyKHApIHtcblxuXHRcdFx0XHRjb25zdCBtZXRob2QgPSBwLm1ldGhvZDtcblx0XHRcdFx0Y29uc3QgcHJveHkgPSBtZXRob2QgIT09ICdnZXQnO1xuXG5cdFx0XHRcdGlmIChwcm94eSkge1xuXG5cdFx0XHRcdFx0aWYgKChtZXRob2QgPT09ICdwb3N0JyB8fCBtZXRob2QgPT09ICdwdXQnKSAmJiBwLnF1ZXJ5LmFjY2Vzc190b2tlbikge1xuXHRcdFx0XHRcdFx0cC5kYXRhLmFjY2Vzc190b2tlbiA9IHAucXVlcnkuYWNjZXNzX3Rva2VuO1xuXHRcdFx0XHRcdFx0ZGVsZXRlIHAucXVlcnkuYWNjZXNzX3Rva2VuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5vIGFjY2VzcyBjb250cm9sIGhlYWRlcnNcblx0XHRcdFx0XHQvLyBVc2UgdGhlIHByb3h5IGluc3RlYWRcblx0XHRcdFx0XHRwLnByb3h5ID0gcHJveHk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gcHJveHk7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBObyBmb3JtXG5cdFx0XHRmb3JtOiBmYWxzZVxuXHRcdH1cblx0fSk7XG5cblx0ZnVuY3Rpb24gZm9ybWF0SW1hZ2UoaW1hZ2UpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c291cmNlOiBpbWFnZS51cmwsXG5cdFx0XHR3aWR0aDogaW1hZ2Uud2lkdGgsXG5cdFx0XHRoZWlnaHQ6IGltYWdlLmhlaWdodFxuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBmb3JtYXRFcnJvcihvKSB7XG5cdFx0aWYgKHR5cGVvZiBvID09PSAnc3RyaW5nJykge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZXJyb3I6IHtcblx0XHRcdFx0XHRjb2RlOiAnaW52YWxpZF9yZXF1ZXN0Jyxcblx0XHRcdFx0XHRtZXNzYWdlOiBvXG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0aWYgKG8gJiYgJ21ldGEnIGluIG8gJiYgJ2Vycm9yX3R5cGUnIGluIG8ubWV0YSkge1xuXHRcdFx0by5lcnJvciA9IHtcblx0XHRcdFx0Y29kZTogby5tZXRhLmVycm9yX3R5cGUsXG5cdFx0XHRcdG1lc3NhZ2U6IG8ubWV0YS5lcnJvcl9tZXNzYWdlXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0RnJpZW5kcyhvKSB7XG5cdFx0cGFnaW5nKG8pO1xuXHRcdGlmIChvICYmICdkYXRhJyBpbiBvKSB7XG5cdFx0XHRvLmRhdGEuZm9yRWFjaChmb3JtYXRGcmllbmQpO1xuXHRcdH1cblxuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0RnJpZW5kKG8pIHtcblx0XHRpZiAoby5pZCkge1xuXHRcdFx0by50aHVtYm5haWwgPSBvLnByb2ZpbGVfcGljdHVyZTtcblx0XHRcdG8ubmFtZSA9IG8uZnVsbF9uYW1lIHx8IG8udXNlcm5hbWU7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2VlOiBodHRwOi8vaW5zdGFncmFtLmNvbS9kZXZlbG9wZXIvZW5kcG9pbnRzL1xuXHRmdW5jdGlvbiBwYWdpbmcocmVzKSB7XG5cdFx0aWYgKHJlcyAmJiAncGFnaW5hdGlvbicgaW4gcmVzKSB7XG5cdFx0XHRyZXMucGFnaW5nID0ge1xuXHRcdFx0XHRuZXh0OiByZXMucGFnaW5hdGlvbi5uZXh0X3VybFxuXHRcdFx0fTtcblx0XHRcdGRlbGV0ZSByZXMucGFnaW5hdGlvbjtcblx0XHR9XG5cdH1cblxufVxuIiwiY29uc3QgaGVsbG8gPSByZXF1aXJlKCcuLi9oZWxsby5qcycpO1xuXG57XG5cblx0aGVsbG8uaW5pdCh7XG5cblx0XHRqb2lubWU6IHtcblxuXHRcdFx0bmFtZTogJ2pvaW4ubWUnLFxuXG5cdFx0XHRvYXV0aDoge1xuXHRcdFx0XHR2ZXJzaW9uOiAyLFxuXHRcdFx0XHRhdXRoOiAnaHR0cHM6Ly9zZWN1cmUuam9pbi5tZS9hcGkvcHVibGljL3YxL2F1dGgvb2F1dGgyJyxcblx0XHRcdFx0Z3JhbnQ6ICdodHRwczovL3NlY3VyZS5qb2luLm1lL2FwaS9wdWJsaWMvdjEvYXV0aC9vYXV0aDInXG5cdFx0XHR9LFxuXG5cdFx0XHRyZWZyZXNoOiBmYWxzZSxcblxuXHRcdFx0c2NvcGU6IHtcblx0XHRcdFx0YmFzaWM6ICd1c2VyX2luZm8nLFxuXHRcdFx0XHR1c2VyOiAndXNlcl9pbmZvJyxcblx0XHRcdFx0c2NoZWR1bGVyOiAnc2NoZWR1bGVyJyxcblx0XHRcdFx0c3RhcnQ6ICdzdGFydF9tZWV0aW5nJyxcblx0XHRcdFx0ZW1haWw6ICcnLFxuXHRcdFx0XHRmcmllbmRzOiAnJyxcblx0XHRcdFx0c2hhcmU6ICcnLFxuXHRcdFx0XHRwdWJsaXNoOiAnJyxcblx0XHRcdFx0cGhvdG9zOiAnJyxcblx0XHRcdFx0cHVibGlzaF9maWxlczogJycsXG5cdFx0XHRcdGZpbGVzOiAnJyxcblx0XHRcdFx0dmlkZW9zOiAnJyxcblx0XHRcdFx0b2ZmbGluZV9hY2Nlc3M6ICcnXG5cdFx0XHR9LFxuXG5cdFx0XHRzY29wZV9kZWxpbTogJyAnLFxuXG5cdFx0XHRsb2dpbihwKSB7XG5cdFx0XHRcdHAub3B0aW9ucy5wb3B1cC53aWR0aCA9IDQwMDtcblx0XHRcdFx0cC5vcHRpb25zLnBvcHVwLmhlaWdodCA9IDcwMDtcblx0XHRcdH0sXG5cblx0XHRcdGJhc2U6ICdodHRwczovL2FwaS5qb2luLm1lL3YxLycsXG5cblx0XHRcdGdldDoge1xuXHRcdFx0XHRtZTogJ3VzZXInLFxuXHRcdFx0XHRtZWV0aW5nczogJ21lZXRpbmdzJyxcblx0XHRcdFx0J21lZXRpbmdzL2luZm8nOiAnbWVldGluZ3MvQHtpZH0nXG5cdFx0XHR9LFxuXG5cdFx0XHRwb3N0OiB7XG5cdFx0XHRcdCdtZWV0aW5ncy9zdGFydC9hZGhvYycocCwgY2FsbGJhY2spIHtcblx0XHRcdFx0XHRjYWxsYmFjaygnbWVldGluZ3Mvc3RhcnQnKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQnbWVldGluZ3Mvc3RhcnQvc2NoZWR1bGVkJyhwLCBjYWxsYmFjaykge1xuXHRcdFx0XHRcdGNvbnN0IG1lZXRpbmdJZCA9IHAuZGF0YS5tZWV0aW5nSWQ7XG5cdFx0XHRcdFx0cC5kYXRhID0ge307XG5cdFx0XHRcdFx0Y2FsbGJhY2soYG1lZXRpbmdzLyR7ICBtZWV0aW5nSWQgIH0vc3RhcnRgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQnbWVldGluZ3Mvc2NoZWR1bGUnKHAsIGNhbGxiYWNrKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soJ21lZXRpbmdzJyk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdHBhdGNoOiB7XG5cdFx0XHRcdCdtZWV0aW5ncy91cGRhdGUnKHAsIGNhbGxiYWNrKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soYG1lZXRpbmdzLyR7ICBwLmRhdGEubWVldGluZ0lkfWApO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRkZWw6IHtcblx0XHRcdFx0J21lZXRpbmdzL2RlbGV0ZSc6ICdtZWV0aW5ncy9Ae2lkfSdcblx0XHRcdH0sXG5cblx0XHRcdHdyYXA6IHtcblx0XHRcdFx0bWUobywgaGVhZGVycykge1xuXHRcdFx0XHRcdGZvcm1hdEVycm9yKG8sIGhlYWRlcnMpO1xuXG5cdFx0XHRcdFx0aWYgKCFvLmVtYWlsKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gbztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRvLm5hbWUgPSBvLmZ1bGxOYW1lO1xuXHRcdFx0XHRcdG8uZmlyc3RfbmFtZSA9IG8ubmFtZS5zcGxpdCgnICcpWzBdO1xuXHRcdFx0XHRcdG8ubGFzdF9uYW1lID0gby5uYW1lLnNwbGl0KCcgJylbMV07XG5cdFx0XHRcdFx0by5pZCA9IG8uZW1haWw7XG5cblx0XHRcdFx0XHRyZXR1cm4gbztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRkZWZhdWx0KG8sIGhlYWRlcnMpIHtcblx0XHRcdFx0XHRmb3JtYXRFcnJvcihvLCBoZWFkZXJzKTtcblxuXHRcdFx0XHRcdHJldHVybiBvO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHR4aHI6IGZvcm1hdFJlcXVlc3RcblxuXHRcdH1cblx0fSk7XG5cblx0ZnVuY3Rpb24gZm9ybWF0RXJyb3IobywgaGVhZGVycykge1xuXHRcdGxldCBlcnJvckNvZGU7XG5cdFx0bGV0IG1lc3NhZ2U7XG5cblx0XHRpZiAobyAmJiAoJ01lc3NhZ2UnIGluIG8pKSB7XG5cdFx0XHRtZXNzYWdlID0gby5NZXNzYWdlO1xuXHRcdFx0ZGVsZXRlIG8uTWVzc2FnZTtcblxuXHRcdFx0aWYgKCdFcnJvckNvZGUnIGluIG8pIHtcblx0XHRcdFx0ZXJyb3JDb2RlID0gby5FcnJvckNvZGU7XG5cdFx0XHRcdGRlbGV0ZSBvLkVycm9yQ29kZTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRlcnJvckNvZGUgPSBnZXRFcnJvckNvZGUoaGVhZGVycyk7XG5cdFx0XHR9XG5cblx0XHRcdG8uZXJyb3IgPSB7XG5cdFx0XHRcdGNvZGU6IGVycm9yQ29kZSxcblx0XHRcdFx0bWVzc2FnZSxcblx0XHRcdFx0ZGV0YWlsczogb1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGZ1bmN0aW9uIGZvcm1hdFJlcXVlc3QocCwgcXMpIHtcblx0XHQvLyBNb3ZlIHRoZSBhY2Nlc3MgdG9rZW4gZnJvbSB0aGUgcmVxdWVzdCBib2R5IHRvIHRoZSByZXF1ZXN0IGhlYWRlclxuXHRcdGNvbnN0IHRva2VuID0gcXMuYWNjZXNzX3Rva2VuO1xuXHRcdGRlbGV0ZSBxcy5hY2Nlc3NfdG9rZW47XG5cdFx0cC5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSBgQmVhcmVyICR7ICB0b2tlbn1gO1xuXG5cdFx0Ly8gRm9ybWF0IG5vbi1nZXQgcmVxdWVzdHMgdG8gaW5kaWNhdGUganNvbiBib2R5XG5cdFx0aWYgKHAubWV0aG9kICE9PSAnZ2V0JyAmJiBwLmRhdGEpIHtcblx0XHRcdHAuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG5cdFx0XHRpZiAodHlwZW9mIChwLmRhdGEpID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRwLmRhdGEgPSBKU09OLnN0cmluZ2lmeShwLmRhdGEpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChwLm1ldGhvZCA9PT0gJ3B1dCcpIHtcblx0XHRcdHAubWV0aG9kID0gJ3BhdGNoJztcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldEVycm9yQ29kZShoZWFkZXJzKSB7XG5cdFx0c3dpdGNoIChoZWFkZXJzLnN0YXR1c0NvZGUpIHtcblx0XHRcdGNhc2UgNDAwOlxuXHRcdFx0XHRyZXR1cm4gJ2ludmFsaWRfcmVxdWVzdCc7XG5cdFx0XHRjYXNlIDQwMzpcblx0XHRcdFx0cmV0dXJuICdzdGFsZV90b2tlbic7XG5cdFx0XHRjYXNlIDQwMTpcblx0XHRcdFx0cmV0dXJuICdpbnZhbGlkX3Rva2VuJztcblx0XHRcdGNhc2UgNTAwOlxuXHRcdFx0XHRyZXR1cm4gJ3NlcnZlcl9lcnJvcic7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm4gJ3NlcnZlcl9lcnJvcic7XG5cdFx0fVxuXHR9XG5cbn0iLCJjb25zdCBoZWxsbyA9IHJlcXVpcmUoJy4uL2hlbGxvLmpzJyk7XG5cbntcblxuXHRoZWxsby5pbml0KHtcblxuXHRcdGxpbmtlZGluOiB7XG5cblx0XHRcdG9hdXRoOiB7XG5cdFx0XHRcdHZlcnNpb246IDIsXG5cdFx0XHRcdHJlc3BvbnNlX3R5cGU6ICdjb2RlJyxcblx0XHRcdFx0YXV0aDogJ2h0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS91YXMvb2F1dGgyL2F1dGhvcml6YXRpb24nLFxuXHRcdFx0XHRncmFudDogJ2h0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS91YXMvb2F1dGgyL2FjY2Vzc1Rva2VuJ1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVmcmVzaCB0aGUgYWNjZXNzX3Rva2VuIG9uY2UgZXhwaXJlZFxuXHRcdFx0cmVmcmVzaDogdHJ1ZSxcblxuXHRcdFx0c2NvcGU6IHtcblx0XHRcdFx0YmFzaWM6ICdyX2Jhc2ljcHJvZmlsZScsXG5cdFx0XHRcdGVtYWlsOiAncl9lbWFpbGFkZHJlc3MnLFxuXHRcdFx0XHRmaWxlczogJycsXG5cdFx0XHRcdGZyaWVuZHM6ICcnLFxuXHRcdFx0XHRwaG90b3M6ICcnLFxuXHRcdFx0XHRwdWJsaXNoOiAnd19zaGFyZScsXG5cdFx0XHRcdHB1Ymxpc2hfZmlsZXM6ICd3X3NoYXJlJyxcblx0XHRcdFx0c2hhcmU6ICcnLFxuXHRcdFx0XHR2aWRlb3M6ICcnLFxuXHRcdFx0XHRvZmZsaW5lX2FjY2VzczogJydcblx0XHRcdH0sXG5cdFx0XHRzY29wZV9kZWxpbTogJyAnLFxuXG5cdFx0XHRiYXNlOiAnaHR0cHM6Ly9hcGkubGlua2VkaW4uY29tL3YxLycsXG5cblx0XHRcdGdldDoge1xuXHRcdFx0XHRtZTogJ3Blb3BsZS9+OihwaWN0dXJlLXVybCxmaXJzdC1uYW1lLGxhc3QtbmFtZSxpZCxmb3JtYXR0ZWQtbmFtZSxlbWFpbC1hZGRyZXNzKScsXG5cblx0XHRcdFx0Ly8gU2VlOiBodHRwOi8vZGV2ZWxvcGVyLmxpbmtlZGluLmNvbS9kb2N1bWVudHMvZ2V0LW5ldHdvcmstdXBkYXRlcy1hbmQtc3RhdGlzdGljcy1hcGlcblx0XHRcdFx0J21lL3NoYXJlJzogJ3Blb3BsZS9+L25ldHdvcmsvdXBkYXRlcz9jb3VudD1Ae2xpbWl0fDI1MH0nXG5cdFx0XHR9LFxuXG5cdFx0XHRwb3N0OiB7XG5cblx0XHRcdFx0Ly8gU2VlOiBodHRwczovL2RldmVsb3Blci5saW5rZWRpbi5jb20vZG9jdW1lbnRzL2FwaS1yZXF1ZXN0cy1qc29uXG5cdFx0XHRcdCdtZS9zaGFyZScocCwgY2FsbGJhY2spIHtcblx0XHRcdFx0XHRjb25zdCBkYXRhID0ge1xuXHRcdFx0XHRcdFx0dmlzaWJpbGl0eToge1xuXHRcdFx0XHRcdFx0XHRjb2RlOiAnYW55b25lJ1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRpZiAocC5kYXRhLmlkKSB7XG5cblx0XHRcdFx0XHRcdGRhdGEuYXR0cmlidXRpb24gPSB7XG5cdFx0XHRcdFx0XHRcdHNoYXJlOiB7XG5cdFx0XHRcdFx0XHRcdFx0aWQ6IHAuZGF0YS5pZFxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0ZGF0YS5jb21tZW50ID0gcC5kYXRhLm1lc3NhZ2U7XG5cdFx0XHRcdFx0XHRpZiAocC5kYXRhLnBpY3R1cmUgJiYgcC5kYXRhLmxpbmspIHtcblx0XHRcdFx0XHRcdFx0ZGF0YS5jb250ZW50ID0ge1xuXHRcdFx0XHRcdFx0XHRcdCdzdWJtaXR0ZWQtdXJsJzogcC5kYXRhLmxpbmssXG5cdFx0XHRcdFx0XHRcdFx0J3N1Ym1pdHRlZC1pbWFnZS11cmwnOiBwLmRhdGEucGljdHVyZVxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHAuZGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuXG5cdFx0XHRcdFx0Y2FsbGJhY2soJ3Blb3BsZS9+L3NoYXJlcz9mb3JtYXQ9anNvbicpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdCdtZS9saWtlJzogbGlrZVxuXHRcdFx0fSxcblxuXHRcdFx0ZGVsOiB7XG5cdFx0XHRcdCdtZS9saWtlJzogbGlrZVxuXHRcdFx0fSxcblxuXHRcdFx0d3JhcDoge1xuXHRcdFx0XHRtZShvKSB7XG5cdFx0XHRcdFx0Zm9ybWF0RXJyb3Iobyk7XG5cdFx0XHRcdFx0Zm9ybWF0VXNlcihvKTtcblx0XHRcdFx0XHRyZXR1cm4gbztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQnbWUvZnJpZW5kcyc6IGZvcm1hdEZyaWVuZHMsXG5cdFx0XHRcdCdtZS9mb2xsb3dpbmcnOiBmb3JtYXRGcmllbmRzLFxuXHRcdFx0XHQnbWUvZm9sbG93ZXJzJzogZm9ybWF0RnJpZW5kcyxcblx0XHRcdFx0J21lL3NoYXJlJyhvKSB7XG5cdFx0XHRcdFx0Zm9ybWF0RXJyb3Iobyk7XG5cdFx0XHRcdFx0cGFnaW5nKG8pO1xuXHRcdFx0XHRcdGlmIChvLnZhbHVlcykge1xuXHRcdFx0XHRcdFx0by5kYXRhID0gby52YWx1ZXMubWFwKGZvcm1hdFVzZXIpO1xuXHRcdFx0XHRcdFx0by5kYXRhLmZvckVhY2goaXRlbSA9PiB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0ubWVzc2FnZSA9IGl0ZW0uaGVhZGxpbmU7XG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0ZGVsZXRlIG8udmFsdWVzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBvO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdGRlZmF1bHQobywgaGVhZGVycykge1xuXHRcdFx0XHRcdGZvcm1hdEVycm9yKG8pO1xuXHRcdFx0XHRcdGVtcHR5KG8sIGhlYWRlcnMpO1xuXHRcdFx0XHRcdHBhZ2luZyhvKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0anNvbnAocCwgcXMpIHtcblx0XHRcdFx0Zm9ybWF0UXVlcnkocXMpO1xuXHRcdFx0XHRpZiAocC5tZXRob2QgPT09ICdnZXQnKSB7XG5cdFx0XHRcdFx0cXMuZm9ybWF0ID0gJ2pzb25wJztcblx0XHRcdFx0XHRxc1snZXJyb3ItY2FsbGJhY2snXSA9IHAuY2FsbGJhY2tJRDtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0eGhyKHAsIHFzKSB7XG5cdFx0XHRcdGlmIChwLm1ldGhvZCAhPT0gJ2dldCcpIHtcblx0XHRcdFx0XHRmb3JtYXRRdWVyeShxcyk7XG5cdFx0XHRcdFx0cC5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuXHRcdFx0XHRcdC8vIE5vdGU6IHgtbGktZm9ybWF0IGVuc3VyZXMgZXJyb3IgcmVzcG9uc2VzIGFyZSBub3QgcmV0dXJuZWQgaW4gWE1MXG5cdFx0XHRcdFx0cC5oZWFkZXJzWyd4LWxpLWZvcm1hdCddID0gJ2pzb24nO1xuXHRcdFx0XHRcdHAucHJveHkgPSB0cnVlO1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0ZnVuY3Rpb24gZm9ybWF0RXJyb3Iobykge1xuXHRcdGlmIChvICYmICdlcnJvckNvZGUnIGluIG8pIHtcblx0XHRcdG8uZXJyb3IgPSB7XG5cdFx0XHRcdGNvZGU6IG8uc3RhdHVzLFxuXHRcdFx0XHRtZXNzYWdlOiBvLm1lc3NhZ2Vcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0VXNlcihvKSB7XG5cdFx0aWYgKG8uZXJyb3IpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRvLmZpcnN0X25hbWUgPSBvLmZpcnN0TmFtZTtcblx0XHRvLmxhc3RfbmFtZSA9IG8ubGFzdE5hbWU7XG5cdFx0by5uYW1lID0gby5mb3JtYXR0ZWROYW1lIHx8IChgJHtvLmZpcnN0X25hbWUgIH0gJHsgIG8ubGFzdF9uYW1lfWApO1xuXHRcdG8udGh1bWJuYWlsID0gby5waWN0dXJlVXJsO1xuXHRcdG8uZW1haWwgPSBvLmVtYWlsQWRkcmVzcztcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGZ1bmN0aW9uIGZvcm1hdEZyaWVuZHMobykge1xuXHRcdGZvcm1hdEVycm9yKG8pO1xuXHRcdHBhZ2luZyhvKTtcblx0XHRpZiAoby52YWx1ZXMpIHtcblx0XHRcdG8uZGF0YSA9IG8udmFsdWVzLm1hcChmb3JtYXRVc2VyKTtcblx0XHRcdGRlbGV0ZSBvLnZhbHVlcztcblx0XHR9XG5cblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGZ1bmN0aW9uIHBhZ2luZyhyZXMpIHtcblx0XHRpZiAoJ19jb3VudCcgaW4gcmVzICYmICdfc3RhcnQnIGluIHJlcyAmJiAocmVzLl9jb3VudCArIHJlcy5fc3RhcnQpIDwgcmVzLl90b3RhbCkge1xuXHRcdFx0cmVzLnBhZ2luZyA9IHtcblx0XHRcdFx0bmV4dDogYD9zdGFydD0keyAgcmVzLl9zdGFydCArIHJlcy5fY291bnQgIH0mY291bnQ9JHsgIHJlcy5fY291bnR9YFxuXHRcdFx0fTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBlbXB0eShvLCBoZWFkZXJzKSB7XG5cdFx0aWYgKEpTT04uc3RyaW5naWZ5KG8pID09PSAne30nICYmIGhlYWRlcnMuc3RhdHVzQ29kZSA9PT0gMjAwKSB7XG5cdFx0XHRvLnN1Y2Nlc3MgPSB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGZvcm1hdFF1ZXJ5KHFzKSB7XG5cdFx0Ly8gTGlua2VkSW4gc2lnbnMgcmVxdWVzdHMgd2l0aCB0aGUgcGFyYW1ldGVyICdvYXV0aDJfYWNjZXNzX3Rva2VuJ1xuXHRcdC8vIC4uLiB5ZWFoIGFub3RoZXIgb25lIHdobyB0aGlua3MgdGhleSBzaG91bGQgYmUgZGlmZmVyZW50IVxuXHRcdGlmIChxcy5hY2Nlc3NfdG9rZW4pIHtcblx0XHRcdHFzLm9hdXRoMl9hY2Nlc3NfdG9rZW4gPSBxcy5hY2Nlc3NfdG9rZW47XG5cdFx0XHRkZWxldGUgcXMuYWNjZXNzX3Rva2VuO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGxpa2UocCwgY2FsbGJhY2spIHtcblx0XHRwLmhlYWRlcnNbJ3gtbGktZm9ybWF0J10gPSAnanNvbic7XG5cdFx0Y29uc3QgaWQgPSBwLmRhdGEuaWQ7XG5cdFx0cC5kYXRhID0gKHAubWV0aG9kICE9PSAnZGVsZXRlJykudG9TdHJpbmcoKTtcblx0XHRwLm1ldGhvZCA9ICdwdXQnO1xuXHRcdGNhbGxiYWNrKGBwZW9wbGUvfi9uZXR3b3JrL3VwZGF0ZXMva2V5PSR7ICBpZCAgfS9pcy1saWtlZGApO1xuXHR9XG5cbn0iLCJjb25zdCBoZWxsbyA9IHJlcXVpcmUoJy4uL2hlbGxvLmpzJyk7XG5cbi8vIFNlZTogaHR0cHM6Ly9kZXZlbG9wZXJzLnNvdW5kY2xvdWQuY29tL2RvY3MvYXBpL3JlZmVyZW5jZVxue1xuXG5cdGhlbGxvLmluaXQoe1xuXG5cdFx0c291bmRjbG91ZDoge1xuXHRcdFx0bmFtZTogJ1NvdW5kQ2xvdWQnLFxuXG5cdFx0XHRvYXV0aDoge1xuXHRcdFx0XHR2ZXJzaW9uOiAyLFxuXHRcdFx0XHRhdXRoOiAnaHR0cHM6Ly9zb3VuZGNsb3VkLmNvbS9jb25uZWN0Jyxcblx0XHRcdFx0Z3JhbnQ6ICdodHRwczovL3NvdW5kY2xvdWQuY29tL29hdXRoMi90b2tlbidcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlcXVlc3QgcGF0aCB0cmFuc2xhdGVkXG5cdFx0XHRiYXNlOiAnaHR0cHM6Ly9hcGkuc291bmRjbG91ZC5jb20vJyxcblx0XHRcdGdldDoge1xuXHRcdFx0XHRtZTogJ21lLmpzb24nLFxuXG5cdFx0XHRcdC8vIEh0dHA6Ly9kZXZlbG9wZXJzLnNvdW5kY2xvdWQuY29tL2RvY3MvYXBpL3JlZmVyZW5jZSNtZVxuXHRcdFx0XHQnbWUvZnJpZW5kcyc6ICdtZS9mb2xsb3dpbmdzLmpzb24nLFxuXHRcdFx0XHQnbWUvZm9sbG93ZXJzJzogJ21lL2ZvbGxvd2Vycy5qc29uJyxcblx0XHRcdFx0J21lL2ZvbGxvd2luZyc6ICdtZS9mb2xsb3dpbmdzLmpzb24nLFxuXG5cdFx0XHRcdC8vIFNlZTogaHR0cDovL2RldmVsb3BlcnMuc291bmRjbG91ZC5jb20vZG9jcy9hcGkvcmVmZXJlbmNlI2FjdGl2aXRpZXNcblx0XHRcdFx0ZGVmYXVsdChwLCBjYWxsYmFjaykge1xuXG5cdFx0XHRcdFx0Ly8gSW5jbHVkZSAnLmpzb24gYXQgdGhlIGVuZCBvZiBlYWNoIHJlcXVlc3QnXG5cdFx0XHRcdFx0Y2FsbGJhY2soYCR7cC5wYXRoICB9Lmpzb25gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGFuZGxlcnNcblx0XHRcdHdyYXA6IHtcblx0XHRcdFx0bWUobykge1xuXHRcdFx0XHRcdGZvcm1hdFVzZXIobyk7XG5cdFx0XHRcdFx0cmV0dXJuIG87XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0ZGVmYXVsdChvKSB7XG5cdFx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkobykpIHtcblx0XHRcdFx0XHRcdG8gPSB7XG5cdFx0XHRcdFx0XHRcdGRhdGE6IG8ubWFwKGZvcm1hdFVzZXIpXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHBhZ2luZyhvKTtcblx0XHRcdFx0XHRyZXR1cm4gbztcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0eGhyOiBmb3JtYXRSZXF1ZXN0LFxuXHRcdFx0anNvbnA6IGZvcm1hdFJlcXVlc3Rcblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIGZvcm1hdFJlcXVlc3QocCwgcXMpIHtcblx0XHQvLyBBbHRlciB0aGUgcXVlcnlzdHJpbmdcblx0XHRjb25zdCB0b2tlbiA9IHFzLmFjY2Vzc190b2tlbjtcblx0XHRkZWxldGUgcXMuYWNjZXNzX3Rva2VuO1xuXHRcdHFzLm9hdXRoX3Rva2VuID0gdG9rZW47XG5cdFx0cXNbJ19zdGF0dXNfY29kZV9tYXBbMzAyXSddID0gMjAwO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0VXNlcihvKSB7XG5cdFx0aWYgKG8uaWQpIHtcblx0XHRcdG8ucGljdHVyZSA9IG8uYXZhdGFyX3VybDtcblx0XHRcdG8udGh1bWJuYWlsID0gby5hdmF0YXJfdXJsO1xuXHRcdFx0by5uYW1lID0gby51c2VybmFtZSB8fCBvLmZ1bGxfbmFtZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8vIFNlZTogaHR0cDovL2RldmVsb3BlcnMuc291bmRjbG91ZC5jb20vZG9jcy9hcGkvcmVmZXJlbmNlI2FjdGl2aXRpZXNcblx0ZnVuY3Rpb24gcGFnaW5nKHJlcykge1xuXHRcdGlmICgnbmV4dF9ocmVmJyBpbiByZXMpIHtcblx0XHRcdHJlcy5wYWdpbmcgPSB7XG5cdFx0XHRcdG5leHQ6IHJlcy5uZXh0X2hyZWZcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cbn0iLCJjb25zdCBoZWxsbyA9IHJlcXVpcmUoJy4uL2hlbGxvLmpzJyk7XG5cbntcblxuXHRjb25zdCBiYXNlID0gJ2h0dHBzOi8vYXBpLnR3aXR0ZXIuY29tLyc7XG5cblx0aGVsbG8uaW5pdCh7XG5cblx0XHR0d2l0dGVyOiB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGF0IHlvdSBkZWZpbmUgYW4gb2F1dGhfcHJveHlcblx0XHRcdG9hdXRoOiB7XG5cdFx0XHRcdHZlcnNpb246ICcxLjBhJyxcblx0XHRcdFx0YXV0aDogYCR7YmFzZX1vYXV0aC9hdXRoZW50aWNhdGVgLFxuXHRcdFx0XHRyZXF1ZXN0OiBgJHtiYXNlfW9hdXRoL3JlcXVlc3RfdG9rZW5gLFxuXHRcdFx0XHR0b2tlbjogYCR7YmFzZX1vYXV0aC9hY2Nlc3NfdG9rZW5gXG5cdFx0XHR9LFxuXG5cdFx0XHRsb2dpbihwKSB7XG5cdFx0XHRcdC8vIFJlYXV0aGVudGljYXRlXG5cdFx0XHRcdC8vIGh0dHBzOi8vZGV2LnR3aXR0ZXIuY29tL29hdXRoL3JlZmVyZW5jZS9nZXQvb2F1dGgvYXV0aGVudGljYXRlXG5cdFx0XHRcdGNvbnN0IHByZWZpeCA9ICc/Zm9yY2VfbG9naW49dHJ1ZSc7XG5cdFx0XHRcdHRoaXMub2F1dGguYXV0aCA9IHRoaXMub2F1dGguYXV0aC5yZXBsYWNlKHByZWZpeCwgJycpICsgKHAub3B0aW9ucy5mb3JjZSA/IHByZWZpeCA6ICcnKTtcblx0XHRcdH0sXG5cblx0XHRcdGJhc2U6IGAke2Jhc2V9MS4xL2AsXG5cblx0XHRcdGdldDoge1xuXHRcdFx0XHRtZTogJ2FjY291bnQvdmVyaWZ5X2NyZWRlbnRpYWxzLmpzb24nLFxuXHRcdFx0XHQnbWUvZnJpZW5kcyc6ICdmcmllbmRzL2xpc3QuanNvbj9jb3VudD1Ae2xpbWl0fDIwMH0nLFxuXHRcdFx0XHQnbWUvZm9sbG93aW5nJzogJ2ZyaWVuZHMvbGlzdC5qc29uP2NvdW50PUB7bGltaXR8MjAwfScsXG5cdFx0XHRcdCdtZS9mb2xsb3dlcnMnOiAnZm9sbG93ZXJzL2xpc3QuanNvbj9jb3VudD1Ae2xpbWl0fDIwMH0nLFxuXG5cdFx0XHRcdC8vIEh0dHBzOi8vZGV2LnR3aXR0ZXIuY29tL2RvY3MvYXBpLzEuMS9nZXQvc3RhdHVzZXMvdXNlcl90aW1lbGluZVxuXHRcdFx0XHQnbWUvc2hhcmUnOiAnc3RhdHVzZXMvdXNlcl90aW1lbGluZS5qc29uP2NvdW50PUB7bGltaXR8MjAwfScsXG5cblx0XHRcdFx0Ly8gSHR0cHM6Ly9kZXYudHdpdHRlci5jb20vcmVzdC9yZWZlcmVuY2UvZ2V0L2Zhdm9yaXRlcy9saXN0XG5cdFx0XHRcdCdtZS9saWtlJzogJ2Zhdm9yaXRlcy9saXN0Lmpzb24/Y291bnQ9QHtsaW1pdHwyMDB9J1xuXHRcdFx0fSxcblxuXHRcdFx0cG9zdDoge1xuXHRcdFx0XHQnbWUvc2hhcmUnKHAsIGNhbGxiYWNrKSB7XG5cblx0XHRcdFx0XHRjb25zdCBkYXRhID0gcC5kYXRhO1xuXHRcdFx0XHRcdHAuZGF0YSA9IG51bGw7XG5cblx0XHRcdFx0XHRjb25zdCBzdGF0dXMgPSBbXTtcblxuXHRcdFx0XHRcdC8vIENoYW5nZSBtZXNzYWdlIHRvIHN0YXR1c1xuXHRcdFx0XHRcdGlmIChkYXRhLm1lc3NhZ2UpIHtcblx0XHRcdFx0XHRcdHN0YXR1cy5wdXNoKGRhdGEubWVzc2FnZSk7XG5cdFx0XHRcdFx0XHRkZWxldGUgZGF0YS5tZXNzYWdlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIElmIGxpbmsgaXMgZ2l2ZW5cblx0XHRcdFx0XHRpZiAoZGF0YS5saW5rKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMucHVzaChkYXRhLmxpbmspO1xuXHRcdFx0XHRcdFx0ZGVsZXRlIGRhdGEubGluaztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoZGF0YS5waWN0dXJlKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMucHVzaChkYXRhLnBpY3R1cmUpO1xuXHRcdFx0XHRcdFx0ZGVsZXRlIGRhdGEucGljdHVyZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBDb21wb3VuZCBhbGwgdGhlIGNvbXBvbmVudHNcblx0XHRcdFx0XHRpZiAoc3RhdHVzLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0ZGF0YS5zdGF0dXMgPSBzdGF0dXMuam9pbignICcpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFR3ZWV0IG1lZGlhXG5cdFx0XHRcdFx0aWYgKGRhdGEuZmlsZSkge1xuXHRcdFx0XHRcdFx0ZGF0YVsnbWVkaWFbXSddID0gZGF0YS5maWxlO1xuXHRcdFx0XHRcdFx0ZGVsZXRlIGRhdGEuZmlsZTtcblx0XHRcdFx0XHRcdHAuZGF0YSA9IGRhdGE7XG5cdFx0XHRcdFx0XHRjYWxsYmFjaygnc3RhdHVzZXMvdXBkYXRlX3dpdGhfbWVkaWEuanNvbicpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFJldHdlZXQ/XG5cdFx0XHRcdFx0ZWxzZSBpZiAoJ2lkJyBpbiBkYXRhKSB7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayhgc3RhdHVzZXMvcmV0d2VldC8keyAgZGF0YS5pZCAgfS5qc29uYCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gVHdlZXRcblx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0aGUgcG9zdCBib2R5IHRvIHRoZSBxdWVyeSBwYXJhbWV0ZXJzXG5cdFx0XHRcdFx0XHRPYmplY3QuYXNzaWduKHAucXVlcnksIGRhdGEpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2soJ3N0YXR1c2VzL3VwZGF0ZS5qc29uP2luY2x1ZGVfZW50aXRpZXM9MScpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTZWU6IGh0dHBzOi8vZGV2LnR3aXR0ZXIuY29tL3Jlc3QvcmVmZXJlbmNlL3Bvc3QvZmF2b3JpdGVzL2NyZWF0ZVxuXHRcdFx0XHQnbWUvbGlrZScocCwgY2FsbGJhY2spIHtcblx0XHRcdFx0XHRjb25zdCBpZCA9IHAuZGF0YS5pZDtcblx0XHRcdFx0XHRwLmRhdGEgPSBudWxsO1xuXHRcdFx0XHRcdGNhbGxiYWNrKGBmYXZvcml0ZXMvY3JlYXRlLmpzb24/aWQ9JHtpZH1gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0ZGVsOiB7XG5cblx0XHRcdFx0Ly8gU2VlOiBodHRwczovL2Rldi50d2l0dGVyLmNvbS9yZXN0L3JlZmVyZW5jZS9wb3N0L2Zhdm9yaXRlcy9kZXN0cm95XG5cdFx0XHRcdCdtZS9saWtlJyhwLCBjYWxsYmFjaykge1xuXHRcdFx0XHRcdHAubWV0aG9kID0gJ3Bvc3QnO1xuXHRcdFx0XHRcdGNvbnN0IGlkID0gcC5kYXRhLmlkO1xuXHRcdFx0XHRcdHAuZGF0YSA9IG51bGw7XG5cdFx0XHRcdFx0Y2FsbGJhY2soYGZhdm9yaXRlcy9kZXN0cm95Lmpzb24/aWQ9JHtpZH1gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0d3JhcDoge1xuXHRcdFx0XHRtZShyZXMpIHtcblx0XHRcdFx0XHRmb3JtYXRFcnJvcihyZXMpO1xuXHRcdFx0XHRcdGZvcm1hdFVzZXIocmVzKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdCdtZS9mcmllbmRzJzogZm9ybWF0RnJpZW5kcyxcblx0XHRcdFx0J21lL2ZvbGxvd2Vycyc6IGZvcm1hdEZyaWVuZHMsXG5cdFx0XHRcdCdtZS9mb2xsb3dpbmcnOiBmb3JtYXRGcmllbmRzLFxuXG5cdFx0XHRcdCdtZS9zaGFyZScocmVzKSB7XG5cdFx0XHRcdFx0Zm9ybWF0RXJyb3IocmVzKTtcblx0XHRcdFx0XHRwYWdpbmcocmVzKTtcblx0XHRcdFx0XHRpZiAoIXJlcy5lcnJvciAmJiAnbGVuZ3RoJyBpbiByZXMpIHtcblx0XHRcdFx0XHRcdHJldHVybiB7ZGF0YTogcmVzfTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gcmVzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdGRlZmF1bHQocmVzKSB7XG5cdFx0XHRcdFx0cmVzID0gYXJyYXlUb0RhdGFSZXNwb25zZShyZXMpO1xuXHRcdFx0XHRcdHBhZ2luZyhyZXMpO1xuXHRcdFx0XHRcdHJldHVybiByZXM7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHR4aHIocCkge1xuXG5cdFx0XHRcdC8vIFJlbHkgb24gdGhlIHByb3h5IGZvciBub24tR0VUIHJlcXVlc3RzLlxuXHRcdFx0XHRyZXR1cm4gKHAubWV0aG9kICE9PSAnZ2V0Jyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRmdW5jdGlvbiBmb3JtYXRVc2VyKG8pIHtcblx0XHRpZiAoby5pZCkge1xuXHRcdFx0aWYgKG8ubmFtZSkge1xuXHRcdFx0XHRjb25zdCBtID0gby5uYW1lLnNwbGl0KCcgJyk7XG5cdFx0XHRcdG8uZmlyc3RfbmFtZSA9IG0uc2hpZnQoKTtcblx0XHRcdFx0by5sYXN0X25hbWUgPSBtLmpvaW4oJyAnKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlOiBodHRwczovL2Rldi50d2l0dGVyLmNvbS9vdmVydmlldy9nZW5lcmFsL3VzZXItcHJvZmlsZS1pbWFnZXMtYW5kLWJhbm5lcnNcblx0XHRcdG8udGh1bWJuYWlsID0gby5wcm9maWxlX2ltYWdlX3VybF9odHRwcyB8fCBvLnByb2ZpbGVfaW1hZ2VfdXJsO1xuXHRcdH1cblxuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0RnJpZW5kcyhvKSB7XG5cdFx0Zm9ybWF0RXJyb3Iobyk7XG5cdFx0cGFnaW5nKG8pO1xuXHRcdGlmIChvLnVzZXJzKSB7XG5cdFx0XHRvLmRhdGEgPSBvLnVzZXJzLm1hcChmb3JtYXRVc2VyKTtcblx0XHRcdGRlbGV0ZSBvLnVzZXJzO1xuXHRcdH1cblxuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0RXJyb3Iobykge1xuXHRcdGlmIChvLmVycm9ycykge1xuXHRcdFx0Y29uc3QgZSA9IG8uZXJyb3JzWzBdO1xuXHRcdFx0by5lcnJvciA9IHtcblx0XHRcdFx0Y29kZTogJ3JlcXVlc3RfZmFpbGVkJyxcblx0XHRcdFx0bWVzc2FnZTogZS5tZXNzYWdlXG5cdFx0XHR9O1xuXHRcdH1cblx0fVxuXG5cdC8vIFRha2UgYSBjdXJzb3IgYW5kIGFkZCBpdCB0byB0aGUgcGF0aFxuXHRmdW5jdGlvbiBwYWdpbmcocmVzKSB7XG5cdFx0Ly8gRG9lcyB0aGUgcmVzcG9uc2UgaW5jbHVkZSBhICduZXh0X2N1cnNvcl9zdHJpbmcnXG5cdFx0aWYgKCduZXh0X2N1cnNvcl9zdHInIGluIHJlcykge1xuXHRcdFx0Ly8gU2VlOiBodHRwczovL2Rldi50d2l0dGVyLmNvbS9kb2NzL21pc2MvY3Vyc29yaW5nXG5cdFx0XHRyZXMucGFnaW5nID0ge1xuXHRcdFx0XHRuZXh0OiBgP2N1cnNvcj0ke3Jlcy5uZXh0X2N1cnNvcl9zdHJ9YFxuXHRcdFx0fTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBhcnJheVRvRGF0YVJlc3BvbnNlKHJlcykge1xuXHRcdHJldHVybiBBcnJheS5pc0FycmF5KHJlcykgPyB7ZGF0YTogcmVzfSA6IHJlcztcblx0fVxuXG5cdC8qKlxuXHQvLyBUaGUgZG9jdW1lbnRhdGlvbiBzYXlzIHRvIGRlZmluZSB1c2VyIGluIHRoZSByZXF1ZXN0XG5cdC8vIEFsdGhvdWdoIGl0cyBub3QgYWN0dWFsbHkgcmVxdWlyZWQuXG5cblx0dmFyIHVzZXJfaWQ7XG5cblx0ZnVuY3Rpb24gd2l0aFVzZXJJZChjYWxsYmFjayl7XG5cdFx0aWYodXNlcl9pZCl7XG5cdFx0XHRjYWxsYmFjayh1c2VyX2lkKTtcblx0XHR9XG5cdFx0ZWxzZXtcblx0XHRcdGhlbGxvLmFwaSgndHdpdHRlcjovbWUnLCBmdW5jdGlvbihvKXtcblx0XHRcdFx0dXNlcl9pZCA9IG8uaWQ7XG5cdFx0XHRcdGNhbGxiYWNrKG8uaWQpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gc2lnbih1cmwpe1xuXHRcdHJldHVybiBmdW5jdGlvbihwLCBjYWxsYmFjayl7XG5cdFx0XHR3aXRoVXNlcklkKGZ1bmN0aW9uKHVzZXJfaWQpe1xuXHRcdFx0XHRjYWxsYmFjayh1cmwrJz91c2VyX2lkPScrdXNlcl9pZCk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXHR9XG5cdCovXG5cbn1cbiIsImNvbnN0IGhlbGxvID0gcmVxdWlyZSgnLi4vaGVsbG8uanMnKTtcblxuLy8gVmtvbnRha3RlICh2ay5jb20pXG57XG5cblx0aGVsbG8uaW5pdCh7XG5cblx0XHR2azoge1xuXHRcdFx0bmFtZTogJ1ZrJyxcblxuXHRcdFx0Ly8gU2VlIGh0dHBzOi8vdmsuY29tL2Rldi9vYXV0aF9kaWFsb2dcblx0XHRcdG9hdXRoOiB7XG5cdFx0XHRcdHZlcnNpb246IDIsXG5cdFx0XHRcdGF1dGg6ICdodHRwczovL29hdXRoLnZrLmNvbS9hdXRob3JpemUnLFxuXHRcdFx0XHRncmFudDogJ2h0dHBzOi8vb2F1dGgudmsuY29tL2FjY2Vzc190b2tlbidcblx0XHRcdH0sXG5cblx0XHRcdC8vIEF1dGhvcml6YXRpb24gc2NvcGVzXG5cdFx0XHQvLyBTZWUgaHR0cHM6Ly92ay5jb20vZGV2L3Blcm1pc3Npb25zXG5cdFx0XHRzY29wZToge1xuXHRcdFx0XHRlbWFpbDogJ2VtYWlsJyxcblx0XHRcdFx0ZnJpZW5kczogJ2ZyaWVuZHMnLFxuXHRcdFx0XHRwaG90b3M6ICdwaG90b3MnLFxuXHRcdFx0XHR2aWRlb3M6ICd2aWRlbycsXG5cdFx0XHRcdHNoYXJlOiAnc2hhcmUnLFxuXHRcdFx0XHRvZmZsaW5lX2FjY2VzczogJ29mZmxpbmUnXG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZWZyZXNoIHRoZSBhY2Nlc3NfdG9rZW5cblx0XHRcdHJlZnJlc2g6IHRydWUsXG5cblx0XHRcdGxvZ2luKHApIHtcblx0XHRcdFx0cC5xcy5kaXNwbGF5ID0gd2luZG93Lm5hdmlnYXRvciAmJlxuXHRcdFx0XHRcdHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50ICYmXG5cdFx0XHRcdFx0L2lwYWR8cGhvbmV8cGhvbmV8YW5kcm9pZC8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKSA/ICdtb2JpbGUnIDogJ3BvcHVwJztcblx0XHRcdH0sXG5cblx0XHRcdC8vIEFQSSBCYXNlIFVSTFxuXHRcdFx0YmFzZTogJ2h0dHBzOi8vYXBpLnZrLmNvbS9tZXRob2QvJyxcblxuXHRcdFx0Ly8gTWFwIEdFVCByZXF1ZXN0c1xuXHRcdFx0Z2V0OiB7XG5cdFx0XHRcdG1lKHAsIGNhbGxiYWNrKSB7XG5cdFx0XHRcdFx0cC5xdWVyeS5maWVsZHMgPSAnaWQsZmlyc3RfbmFtZSxsYXN0X25hbWUscGhvdG9fbWF4Jztcblx0XHRcdFx0XHRjYWxsYmFjaygndXNlcnMuZ2V0Jyk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdHdyYXA6IHtcblx0XHRcdFx0bWUocmVzLCBoZWFkZXJzLCByZXEpIHtcblx0XHRcdFx0XHRmb3JtYXRFcnJvcihyZXMpO1xuXHRcdFx0XHRcdHJldHVybiBmb3JtYXRVc2VyKHJlcywgcmVxKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gTm8gWEhSXG5cdFx0XHR4aHI6IGZhbHNlLFxuXG5cdFx0XHQvLyBBbGwgcmVxdWVzdHMgc2hvdWxkIGJlIEpTT05QIGFzIG9mIG1pc3NpbmcgQ09SUyBoZWFkZXJzIGluIGh0dHBzOi8vYXBpLnZrLmNvbS9tZXRob2QvKlxuXHRcdFx0anNvbnA6IHRydWUsXG5cblx0XHRcdC8vIE5vIGZvcm1cblx0XHRcdGZvcm06IGZhbHNlXG5cdFx0fVxuXHR9KTtcblxuXHRmdW5jdGlvbiBmb3JtYXRVc2VyKG8sIHJlcSkge1xuXG5cdFx0aWYgKG8gIT09IG51bGwgJiYgJ3Jlc3BvbnNlJyBpbiBvICYmIG8ucmVzcG9uc2UgIT09IG51bGwgJiYgby5yZXNwb25zZS5sZW5ndGgpIHtcblx0XHRcdG8gPSBvLnJlc3BvbnNlWzBdO1xuXHRcdFx0by5pZCA9IG8udWlkO1xuXHRcdFx0by50aHVtYm5haWwgPSBvLnBpY3R1cmUgPSBvLnBob3RvX21heDtcblx0XHRcdG8ubmFtZSA9IGAke28uZmlyc3RfbmFtZX0gJHtvLmxhc3RfbmFtZX1gO1xuXG5cdFx0XHRpZiAocmVxLmF1dGhSZXNwb25zZSAmJiByZXEuYXV0aFJlc3BvbnNlLmVtYWlsICE9PSBudWxsKSB7XG5cdFx0XHRcdG8uZW1haWwgPSByZXEuYXV0aFJlc3BvbnNlLmVtYWlsO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0RXJyb3Iobykge1xuXG5cdFx0aWYgKG8uZXJyb3IpIHtcblx0XHRcdGNvbnN0IGUgPSBvLmVycm9yO1xuXHRcdFx0by5lcnJvciA9IHtcblx0XHRcdFx0Y29kZTogZS5lcnJvcl9jb2RlLFxuXHRcdFx0XHRtZXNzYWdlOiBlLmVycm9yX21zZ1xuXHRcdFx0fTtcblx0XHR9XG5cdH1cblxufSIsImNvbnN0IGhlbGxvID0gcmVxdWlyZSgnLi4vaGVsbG8uanMnKTtcblxuY29uc3QgaGFzQmluYXJ5ID0gcmVxdWlyZSgndHJpY2tzL29iamVjdC9oYXNCaW5hcnknKTtcbmNvbnN0IHRvQmxvYiA9IHJlcXVpcmUoJ3RyaWNrcy9vYmplY3QvdG9CbG9iJyk7XG5cbntcblxuXHRoZWxsby5pbml0KHtcblx0XHR3aW5kb3dzOiB7XG5cdFx0XHRuYW1lOiAnV2luZG93cyBsaXZlJyxcblxuXHRcdFx0Ly8gUkVGOiBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaGgyNDM2NDEuYXNweFxuXHRcdFx0b2F1dGg6IHtcblx0XHRcdFx0dmVyc2lvbjogMixcblx0XHRcdFx0YXV0aDogJ2h0dHBzOi8vbG9naW4ubGl2ZS5jb20vb2F1dGgyMF9hdXRob3JpemUuc3JmJyxcblx0XHRcdFx0Z3JhbnQ6ICdodHRwczovL2xvZ2luLmxpdmUuY29tL29hdXRoMjBfdG9rZW4uc3JmJ1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVmcmVzaCB0aGUgYWNjZXNzX3Rva2VuIG9uY2UgZXhwaXJlZFxuXHRcdFx0cmVmcmVzaDogdHJ1ZSxcblxuXHRcdFx0bG9nb3V0KCkge1xuXHRcdFx0XHRyZXR1cm4gYGh0dHA6Ly9sb2dpbi5saXZlLmNvbS9vYXV0aDIwX2xvZ291dC5zcmY/dHM9JHsobmV3IERhdGUoKSkuZ2V0VGltZSgpfWA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBBdXRob3JpemF0aW9uIHNjb3Blc1xuXHRcdFx0c2NvcGU6IHtcblx0XHRcdFx0YmFzaWM6ICd3bC5zaWduaW4sd2wuYmFzaWMnLFxuXHRcdFx0XHRlbWFpbDogJ3dsLmVtYWlscycsXG5cdFx0XHRcdGJpcnRoZGF5OiAnd2wuYmlydGhkYXknLFxuXHRcdFx0XHRldmVudHM6ICd3bC5jYWxlbmRhcnMnLFxuXHRcdFx0XHRwaG90b3M6ICd3bC5waG90b3MnLFxuXHRcdFx0XHR2aWRlb3M6ICd3bC5waG90b3MnLFxuXHRcdFx0XHRmcmllbmRzOiAnd2wuY29udGFjdHNfZW1haWxzJyxcblx0XHRcdFx0ZmlsZXM6ICd3bC5za3lkcml2ZScsXG5cdFx0XHRcdHB1Ymxpc2g6ICd3bC5zaGFyZScsXG5cdFx0XHRcdHB1Ymxpc2hfZmlsZXM6ICd3bC5za3lkcml2ZV91cGRhdGUnLFxuXHRcdFx0XHRzaGFyZTogJ3dsLnNoYXJlJyxcblx0XHRcdFx0Y3JlYXRlX2V2ZW50OiAnd2wuY2FsZW5kYXJzX3VwZGF0ZSx3bC5ldmVudHNfY3JlYXRlJyxcblx0XHRcdFx0b2ZmbGluZV9hY2Nlc3M6ICd3bC5vZmZsaW5lX2FjY2Vzcydcblx0XHRcdH0sXG5cblx0XHRcdC8vIEFQSSBiYXNlIFVSTFxuXHRcdFx0YmFzZTogJ2h0dHBzOi8vYXBpcy5saXZlLm5ldC92NS4wLycsXG5cblx0XHRcdC8vIE1hcCBHRVQgcmVxdWVzdHNcblx0XHRcdGdldDoge1xuXG5cdFx0XHRcdC8vIEZyaWVuZHNcblx0XHRcdFx0bWU6ICdtZScsXG5cdFx0XHRcdCdtZS9mcmllbmRzJzogJ21lL2ZyaWVuZHMnLFxuXHRcdFx0XHQnbWUvZm9sbG93aW5nJzogJ21lL2NvbnRhY3RzJyxcblx0XHRcdFx0J21lL2ZvbGxvd2Vycyc6ICdtZS9mcmllbmRzJyxcblx0XHRcdFx0J21lL2NvbnRhY3RzJzogJ21lL2NvbnRhY3RzJyxcblxuXHRcdFx0XHQnbWUvYWxidW1zJzogJ21lL2FsYnVtcycsXG5cblx0XHRcdFx0Ly8gSW5jbHVkZSB0aGUgZGF0YVtpZF0gaW4gdGhlIHBhdGhcblx0XHRcdFx0J21lL2FsYnVtJzogJ0B7aWR9L2ZpbGVzJyxcblx0XHRcdFx0J21lL3Bob3RvJzogJ0B7aWR9JyxcblxuXHRcdFx0XHQvLyBGaWxlc1xuXHRcdFx0XHQnbWUvZmlsZXMnOiAnQHtwYXJlbnR8bWUvc2t5ZHJpdmV9L2ZpbGVzJyxcblx0XHRcdFx0J21lL2ZvbGRlcnMnOiAnQHtpZHxtZS9za3lkcml2ZX0vZmlsZXMnLFxuXHRcdFx0XHQnbWUvZm9sZGVyJzogJ0B7aWR8bWUvc2t5ZHJpdmV9L2ZpbGVzJ1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gTWFwIFBPU1QgcmVxdWVzdHNcblx0XHRcdHBvc3Q6IHtcblx0XHRcdFx0J21lL2FsYnVtcyc6ICdtZS9hbGJ1bXMnLFxuXHRcdFx0XHQnbWUvYWxidW0nOiAnQHtpZH0vZmlsZXMvJyxcblxuXHRcdFx0XHQnbWUvZm9sZGVycyc6ICdAe2lkfG1lL3NreWRyaXZlL30nLFxuXHRcdFx0XHQnbWUvZmlsZXMnOiAnQHtwYXJlbnR8bWUvc2t5ZHJpdmV9L2ZpbGVzJ1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gTWFwIERFTEVURSByZXF1ZXN0c1xuXHRcdFx0ZGVsOiB7XG5cdFx0XHRcdC8vIEluY2x1ZGUgdGhlIGRhdGFbaWRdIGluIHRoZSBwYXRoXG5cdFx0XHRcdCdtZS9hbGJ1bSc6ICdAe2lkfScsXG5cdFx0XHRcdCdtZS9waG90byc6ICdAe2lkfScsXG5cdFx0XHRcdCdtZS9mb2xkZXInOiAnQHtpZH0nLFxuXHRcdFx0XHQnbWUvZmlsZXMnOiAnQHtpZH0nXG5cdFx0XHR9LFxuXG5cdFx0XHR3cmFwOiB7XG5cdFx0XHRcdG1lOiBmb3JtYXRVc2VyLFxuXG5cdFx0XHRcdCdtZS9mcmllbmRzJzogZm9ybWF0RnJpZW5kcyxcblx0XHRcdFx0J21lL2NvbnRhY3RzJzogZm9ybWF0RnJpZW5kcyxcblx0XHRcdFx0J21lL2ZvbGxvd2Vycyc6IGZvcm1hdEZyaWVuZHMsXG5cdFx0XHRcdCdtZS9mb2xsb3dpbmcnOiBmb3JtYXRGcmllbmRzLFxuXHRcdFx0XHQnbWUvYWxidW1zJzogZm9ybWF0QWxidW1zLFxuXHRcdFx0XHQnbWUvcGhvdG9zJzogZm9ybWF0RGVmYXVsdCxcblx0XHRcdFx0ZGVmYXVsdDogZm9ybWF0RGVmYXVsdFxuXHRcdFx0fSxcblxuXHRcdFx0eGhyKHApIHtcblx0XHRcdFx0aWYgKHAubWV0aG9kICE9PSAnZ2V0JyAmJiBwLm1ldGhvZCAhPT0gJ2RlbGV0ZScgJiYgIWhhc0JpbmFyeShwLmRhdGEpKSB7XG5cblx0XHRcdFx0XHQvLyBEb2VzIHRoaXMgaGF2ZSBhIGRhdGEtdXJpIHRvIHVwbG9hZCBhcyBhIGZpbGU/XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiAocC5kYXRhLmZpbGUpID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdFx0cC5kYXRhLmZpbGUgPSB0b0Jsb2IocC5kYXRhLmZpbGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdHAuZGF0YSA9IEpTT04uc3RyaW5naWZ5KHAuZGF0YSk7XG5cdFx0XHRcdFx0XHRwLmhlYWRlcnMgPSB7XG5cdFx0XHRcdFx0XHRcdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHRqc29ucChwKSB7XG5cdFx0XHRcdGlmIChwLm1ldGhvZCAhPT0gJ2dldCcgJiYgIWhhc0JpbmFyeShwLmRhdGEpKSB7XG5cdFx0XHRcdFx0cC5kYXRhLm1ldGhvZCA9IHAubWV0aG9kO1xuXHRcdFx0XHRcdHAubWV0aG9kID0gJ2dldCc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIGZvcm1hdERlZmF1bHQobykge1xuXHRcdGlmICgnZGF0YScgaW4gbykge1xuXHRcdFx0by5kYXRhLmZvckVhY2goZCA9PiB7XG5cdFx0XHRcdGlmIChkLnBpY3R1cmUpIHtcblx0XHRcdFx0XHRkLnRodW1ibmFpbCA9IGQucGljdHVyZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChkLmltYWdlcykge1xuXHRcdFx0XHRcdGQucGljdHVyZXMgPSBkLmltYWdlc1xuXHRcdFx0XHRcdFx0Lm1hcChmb3JtYXRJbWFnZSlcblx0XHRcdFx0XHRcdC5zb3J0KChhLCBiKSA9PiBhLndpZHRoIC0gYi53aWR0aCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0SW1hZ2UoaW1hZ2UpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0d2lkdGg6IGltYWdlLndpZHRoLFxuXHRcdFx0aGVpZ2h0OiBpbWFnZS5oZWlnaHQsXG5cdFx0XHRzb3VyY2U6IGltYWdlLnNvdXJjZVxuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBmb3JtYXRBbGJ1bXMobykge1xuXHRcdGlmICgnZGF0YScgaW4gbykge1xuXHRcdFx0by5kYXRhLmZvckVhY2goZCA9PiB7XG5cdFx0XHRcdGQucGhvdG9zID0gZC5maWxlcyA9IGBodHRwczovL2FwaXMubGl2ZS5uZXQvdjUuMC8keyAgZC5pZCAgfS9waG90b3NgO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBmb3JtYXRVc2VyKG8sIGhlYWRlcnMsIHJlcSkge1xuXHRcdGlmIChvLmlkKSB7XG5cdFx0XHRjb25zdCB0b2tlbiA9IHJlcS5hdXRoUmVzcG9uc2UuYWNjZXNzX3Rva2VuO1xuXHRcdFx0aWYgKG8uZW1haWxzKSB7XG5cdFx0XHRcdG8uZW1haWwgPSBvLmVtYWlscy5wcmVmZXJyZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgbm90IGFuIG5vbi1uZXR3b3JrIGZyaWVuZFxuXHRcdFx0aWYgKG8uaXNfZnJpZW5kICE9PSBmYWxzZSkge1xuXHRcdFx0XHQvLyBVc2UgdGhlIGlkIG9mIHRoZSB1c2VyX2lkIGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRjb25zdCBpZCA9IChvLnVzZXJfaWQgfHwgby5pZCk7XG5cdFx0XHRcdG8udGh1bWJuYWlsID0gby5waWN0dXJlID0gYGh0dHBzOi8vYXBpcy5saXZlLm5ldC92NS4wLyR7ICBpZCAgfS9waWN0dXJlP2FjY2Vzc190b2tlbj0keyAgdG9rZW59YDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGZ1bmN0aW9uIGZvcm1hdEZyaWVuZHMobywgaGVhZGVycywgcmVxKSB7XG5cdFx0aWYgKCdkYXRhJyBpbiBvKSB7XG5cdFx0XHRvLmRhdGEuZm9yRWFjaChkID0+IHtcblx0XHRcdFx0Zm9ybWF0VXNlcihkLCBoZWFkZXJzLCByZXEpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG87XG5cdH1cblxufSIsImNvbnN0IGhlbGxvID0gcmVxdWlyZSgnLi4vaGVsbG8uanMnKTtcblxue1xuXG5cdGhlbGxvLmluaXQoe1xuXG5cdFx0eWFob286IHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoYXQgeW91IGRlZmluZSBhbiBvYXV0aF9wcm94eVxuXHRcdFx0b2F1dGg6IHtcblx0XHRcdFx0dmVyc2lvbjogJzEuMGEnLFxuXHRcdFx0XHRhdXRoOiAnaHR0cHM6Ly9hcGkubG9naW4ueWFob28uY29tL29hdXRoL3YyL3JlcXVlc3RfYXV0aCcsXG5cdFx0XHRcdHJlcXVlc3Q6ICdodHRwczovL2FwaS5sb2dpbi55YWhvby5jb20vb2F1dGgvdjIvZ2V0X3JlcXVlc3RfdG9rZW4nLFxuXHRcdFx0XHR0b2tlbjogJ2h0dHBzOi8vYXBpLmxvZ2luLnlhaG9vLmNvbS9vYXV0aC92Mi9nZXRfdG9rZW4nXG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBMb2dpbiBoYW5kbGVyXG5cdFx0XHRsb2dpbihwKSB7XG5cdFx0XHRcdC8vIENoYW5nZSB0aGUgZGVmYXVsdCBwb3B1cCB3aW5kb3cgdG8gYmUgYXQgbGVhc3QgNTYwXG5cdFx0XHRcdC8vIFlhaG9vIGRvZXMgZHluYW1pY2FsbHkgY2hhbmdlIGl0IG9uIHRoZSBmbHkgZm9yIHRoZSBzaWduaW4gc2NyZWVuIChvbmx5LCB3aGF0IGlmIHlvdXIgYWxyZWFkeSBzaWduZWQgaW4pXG5cdFx0XHRcdHAub3B0aW9ucy5wb3B1cC53aWR0aCA9IDU2MDtcblxuXHRcdFx0XHQvLyBZYWhvbyB0aHJvd3MgYW4gcGFyYW1ldGVyIGVycm9yIGlmIGZvciB3aGF0ZXZlciByZWFzb24gdGhlIHN0YXRlLnNjb3BlIGNvbnRhaW5zIGEgY29tbWEsIHNvIGxldHMgcmVtb3ZlIHNjb3BlXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0ZGVsZXRlIHAucXMuc3RhdGUuc2NvcGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2F0Y2ggKGUpIHtcblx0XHRcdFx0XHQvLyBDb250aW51ZVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRiYXNlOiAnaHR0cHM6Ly9zb2NpYWwueWFob29hcGlzLmNvbS92MS8nLFxuXG5cdFx0XHRnZXQ6IHtcblx0XHRcdFx0bWU6IHlxbCgnc2VsZWN0ICogZnJvbSBzb2NpYWwucHJvZmlsZSgwKSB3aGVyZSBndWlkPW1lJyksXG5cdFx0XHRcdCdtZS9mcmllbmRzJzogeXFsKCdzZWxlY3QgKiBmcm9tIHNvY2lhbC5jb250YWN0cygwKSB3aGVyZSBndWlkPW1lJyksXG5cdFx0XHRcdCdtZS9mb2xsb3dpbmcnOiB5cWwoJ3NlbGVjdCAqIGZyb20gc29jaWFsLmNvbnRhY3RzKDApIHdoZXJlIGd1aWQ9bWUnKVxuXHRcdFx0fSxcblx0XHRcdHdyYXA6IHtcblx0XHRcdFx0bWU6IGZvcm1hdFVzZXIsXG5cblx0XHRcdFx0Ly8gQ2FuJ3QgZ2V0IElEc1xuXHRcdFx0XHQvLyBJdCBtaWdodCBiZSBiZXR0ZXIgdG8gbG9vcCB0aHJvdWdoIHRoZSBzb2NpYWwucmVsYXRpb25zaGlwIHRhYmxlIHdpdGggaGFzIHVuaXF1ZSBJRHMgb2YgdXNlcnMuXG5cdFx0XHRcdCdtZS9mcmllbmRzJzogZm9ybWF0RnJpZW5kcyxcblx0XHRcdFx0J21lL2ZvbGxvd2luZyc6IGZvcm1hdEZyaWVuZHMsXG5cdFx0XHRcdGRlZmF1bHQ6IHBhZ2luZ1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Lypcblx0XHQvLyBBdXRvLXJlZnJlc2ggZml4OiBidWcgaW4gWWFob28gY2FuJ3QgZ2V0IHRoaXMgdG8gd29yayB3aXRoIG5vZGUtb2F1dGgtc2hpbVxuXHRcdGxvZ2luIDogZnVuY3Rpb24obyl7XG5cdFx0XHQvLyBJcyB0aGUgdXNlciBhbHJlYWR5IGxvZ2dlZCBpblxuXHRcdFx0dmFyIGF1dGggPSBoZWxsbygneWFob28nKS5nZXRBdXRoUmVzcG9uc2UoKTtcblxuXHRcdFx0Ly8gSXMgdGhpcyBhIHJlZnJlc2ggdG9rZW4/XG5cdFx0XHRpZihvLm9wdGlvbnMuZGlzcGxheT09PSdub25lJyYmYXV0aCYmYXV0aC5hY2Nlc3NfdG9rZW4mJmF1dGgucmVmcmVzaF90b2tlbil7XG5cdFx0XHRcdC8vIEFkZCB0aGUgb2xkIHRva2VuIGFuZCB0aGUgcmVmcmVzaCB0b2tlbiwgaW5jbHVkaW5nIHBhdGggdG8gdGhlIHF1ZXJ5XG5cdFx0XHRcdC8vIFNlZSBodHRwOi8vZGV2ZWxvcGVyLnlhaG9vLmNvbS9vYXV0aC9ndWlkZS9vYXV0aC1yZWZyZXNoYWNjZXNzdG9rZW4uaHRtbFxuXHRcdFx0XHRvLnFzLmFjY2Vzc190b2tlbiA9IGF1dGguYWNjZXNzX3Rva2VuO1xuXHRcdFx0XHRvLnFzLnJlZnJlc2hfdG9rZW4gPSBhdXRoLnJlZnJlc2hfdG9rZW47XG5cdFx0XHRcdG8ucXMudG9rZW5fdXJsID0gJ2h0dHBzOi8vYXBpLmxvZ2luLnlhaG9vLmNvbS9vYXV0aC92Mi9nZXRfdG9rZW4nO1xuXHRcdFx0fVxuXHRcdH0sXG5cdCovXG5cblx0ZnVuY3Rpb24gZm9ybWF0RXJyb3Iobykge1xuXHRcdGlmIChvICYmICdtZXRhJyBpbiBvICYmICdlcnJvcl90eXBlJyBpbiBvLm1ldGEpIHtcblx0XHRcdG8uZXJyb3IgPSB7XG5cdFx0XHRcdGNvZGU6IG8ubWV0YS5lcnJvcl90eXBlLFxuXHRcdFx0XHRtZXNzYWdlOiBvLm1ldGEuZXJyb3JfbWVzc2FnZVxuXHRcdFx0fTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBmb3JtYXRVc2VyKG8pIHtcblxuXHRcdGZvcm1hdEVycm9yKG8pO1xuXHRcdGlmIChvLnF1ZXJ5ICYmIG8ucXVlcnkucmVzdWx0cyAmJiBvLnF1ZXJ5LnJlc3VsdHMucHJvZmlsZSkge1xuXHRcdFx0byA9IG8ucXVlcnkucmVzdWx0cy5wcm9maWxlO1xuXHRcdFx0by5pZCA9IG8uZ3VpZDtcblx0XHRcdG8ubGFzdF9uYW1lID0gby5mYW1pbHlOYW1lO1xuXHRcdFx0by5maXJzdF9uYW1lID0gby5naXZlbk5hbWUgfHwgby5uaWNrbmFtZTtcblx0XHRcdGNvbnN0IGEgPSBbXTtcblx0XHRcdGlmIChvLmZpcnN0X25hbWUpIHtcblx0XHRcdFx0YS5wdXNoKG8uZmlyc3RfbmFtZSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvLmxhc3RfbmFtZSkge1xuXHRcdFx0XHRhLnB1c2goby5sYXN0X25hbWUpO1xuXHRcdFx0fVxuXG5cdFx0XHRvLm5hbWUgPSBhLmpvaW4oJyAnKTtcblx0XHRcdG8uZW1haWwgPSAoby5lbWFpbHMgJiYgby5lbWFpbHNbMF0pID8gby5lbWFpbHNbMF0uaGFuZGxlIDogbnVsbDtcblx0XHRcdG8udGh1bWJuYWlsID0gby5pbWFnZSA/IG8uaW1hZ2UuaW1hZ2VVcmwgOiBudWxsO1xuXHRcdH1cblxuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0RnJpZW5kcyhvLCBoZWFkZXJzLCByZXF1ZXN0KSB7XG5cdFx0Zm9ybWF0RXJyb3Iobyk7XG5cdFx0cGFnaW5nKG8sIGhlYWRlcnMsIHJlcXVlc3QpO1xuXHRcdGlmIChvLnF1ZXJ5ICYmIG8ucXVlcnkucmVzdWx0cyAmJiBvLnF1ZXJ5LnJlc3VsdHMuY29udGFjdCkge1xuXHRcdFx0by5kYXRhID0gby5xdWVyeS5yZXN1bHRzLmNvbnRhY3Q7XG5cdFx0XHRkZWxldGUgby5xdWVyeTtcblxuXHRcdFx0aWYgKCFBcnJheS5pc0FycmF5KG8uZGF0YSkpIHtcblx0XHRcdFx0by5kYXRhID0gW28uZGF0YV07XG5cdFx0XHR9XG5cblx0XHRcdG8uZGF0YS5mb3JFYWNoKGZvcm1hdEZyaWVuZCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBmb3JtYXRGcmllbmQoY29udGFjdCkge1xuXHRcdGNvbnRhY3QuaWQgPSBudWxsO1xuXG5cdFx0Ly8gIzM2MjogUmVwb3J0cyBvZiByZXNwb25zZXMgcmV0dXJuaW5nIGEgc2luZ2xlIGl0ZW0sIHJhdGhlciB0aGFuIGFuIEFycmF5IG9mIGl0ZW1zLlxuXHRcdC8vIEZvcm1hdCB0aGUgY29udGFjdC5maWVsZHMgdG8gYmUgYW4gYXJyYXkuXG5cdFx0aWYgKGNvbnRhY3QuZmllbGRzICYmICEoY29udGFjdC5maWVsZHMgaW5zdGFuY2VvZiBBcnJheSkpIHtcblx0XHRcdGNvbnRhY3QuZmllbGRzID0gW2NvbnRhY3QuZmllbGRzXTtcblx0XHR9XG5cblx0XHQoY29udGFjdC5maWVsZHMgfHwgW10pLmZvckVhY2goZmllbGQgPT4ge1xuXHRcdFx0aWYgKGZpZWxkLnR5cGUgPT09ICdlbWFpbCcpIHtcblx0XHRcdFx0Y29udGFjdC5lbWFpbCA9IGZpZWxkLnZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZmllbGQudHlwZSA9PT0gJ25hbWUnKSB7XG5cdFx0XHRcdGNvbnRhY3QuZmlyc3RfbmFtZSA9IGZpZWxkLnZhbHVlLmdpdmVuTmFtZTtcblx0XHRcdFx0Y29udGFjdC5sYXN0X25hbWUgPSBmaWVsZC52YWx1ZS5mYW1pbHlOYW1lO1xuXHRcdFx0XHRjb250YWN0Lm5hbWUgPSBgJHtmaWVsZC52YWx1ZS5naXZlbk5hbWUgIH0gJHsgIGZpZWxkLnZhbHVlLmZhbWlseU5hbWV9YDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGZpZWxkLnR5cGUgPT09ICd5YWhvb2lkJykge1xuXHRcdFx0XHRjb250YWN0LmlkID0gZmllbGQudmFsdWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRmdW5jdGlvbiBwYWdpbmcocmVzLCBoZWFkZXJzLCByZXF1ZXN0KSB7XG5cblx0XHQvLyBTZWU6IGh0dHA6Ly9kZXZlbG9wZXIueWFob28uY29tL3lxbC9ndWlkZS9wYWdpbmcuaHRtbCNsb2NhbF9saW1pdHNcblx0XHRpZiAocmVzLnF1ZXJ5ICYmIHJlcy5xdWVyeS5jb3VudCAmJiByZXF1ZXN0Lm9wdGlvbnMpIHtcblx0XHRcdHJlcy5wYWdpbmcgPSB7XG5cdFx0XHRcdG5leHQ6IGA/c3RhcnQ9JHtyZXMucXVlcnkuY291bnQgKyAoK3JlcXVlc3Qub3B0aW9ucy5zdGFydCB8fCAxKX1gXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHJldHVybiByZXM7XG5cdH1cblxuXHRmdW5jdGlvbiB5cWwocSkge1xuXHRcdHJldHVybiBgaHR0cHM6Ly9xdWVyeS55YWhvb2FwaXMuY29tL3YxL3lxbD9xPSR7KGAke3F9IGxpbWl0IEB7bGltaXR8MTAwfSBvZmZzZXQgQHtzdGFydHwwfWApLnJlcGxhY2UoL1xccy9nLCAnJTIwJyl9JmZvcm1hdD1qc29uYDtcblx0fVxuXG59Il19"}