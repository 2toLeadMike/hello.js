{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/tricks/array/diff.js","node_modules/tricks/array/find.js","node_modules/tricks/array/toArray.js","node_modules/tricks/array/unique.js","node_modules/tricks/browser/agent/Storage.js","node_modules/tricks/browser/agent/cookieStorage.js","node_modules/tricks/browser/agent/localStorage.js","node_modules/tricks/browser/agent/sessionStorage.js","node_modules/tricks/browser/http/formpost.js","node_modules/tricks/browser/http/getScript.js","node_modules/tricks/browser/http/jsonp.js","node_modules/tricks/browser/http/request.js","node_modules/tricks/browser/http/xhr.js","node_modules/tricks/dom/append.js","node_modules/tricks/dom/attr.js","node_modules/tricks/dom/createElement.js","node_modules/tricks/dom/domInstance.js","node_modules/tricks/dom/each.js","node_modules/tricks/dom/hiddenFrame.js","node_modules/tricks/dom/isDom.js","node_modules/tricks/events/createEvent.js","node_modules/tricks/events/emit.js","node_modules/tricks/events/globalCallback.js","node_modules/tricks/events/on.js","node_modules/tricks/object/args.js","node_modules/tricks/object/clone.js","node_modules/tricks/object/diffKey.js","node_modules/tricks/object/extend.js","node_modules/tricks/object/instanceOf.js","node_modules/tricks/object/isBinary.js","node_modules/tricks/object/isEmpty.js","node_modules/tricks/object/merge.js","node_modules/tricks/object/pubsub.js","node_modules/tricks/object/rewire.js","node_modules/tricks/object/tryCatch.js","node_modules/tricks/string/createUrl.js","node_modules/tricks/string/extract.js","node_modules/tricks/string/jsonParse.js","node_modules/tricks/string/param.js","node_modules/tricks/string/queryparse.js","node_modules/tricks/string/querystringify.js","node_modules/tricks/string/random.js","node_modules/tricks/support/cors.js","node_modules/tricks/time/setImmediate.js","node_modules/tricks/window/close.js","node_modules/tricks/window/popup.js","node_modules/tricks/window/url.js","src/hello.js"],"names":[],"mappings":"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","file":"hello.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = (a, b) => b.filter(item => a.indexOf(item) === -1);\n","// Array find\n// Returns the first non undefined response\n// If the response is (Boolean) True, then the value of that array item is returned instead...\nmodule.exports = (arr, callback, thisArg = null) => {\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst value = callback.call(thisArg, arr[i]);\n\t\tif (value !== undefined) {\n\t\t\treturn value === true ? arr[i] : value;\n\t\t}\n\t}\n};\n","module.exports = obj => Array.prototype.slice.call(obj);\n","module.exports = a => {\n\tif (!Array.isArray(a)) {\n\t\treturn [];\n\t}\n\n\t// Is this the first location of item\n\treturn a.filter((item, index) => a.indexOf(item) === index);\n};\n","const jsonParse = require('../../string/jsonParse.js');\nconst extend = require('../../object/extend.js');\n\n// Return handler\nmodule.exports = Storage;\n\nfunction Storage(method) {\n\n\tthis.native = method;\n\n\treturn extend(this.api.bind(this), this);\n}\n\nStorage.prototype.api = function(name, value) {\n\t// recursive\n\tif (typeof name === 'object') {\n\t\tfor (const x in name) {\n\t\t\tthis.api(x, name[x]);\n\t\t}\n\t}\n\n\t// Local storage\n\telse if (!name) {\n\t\tthrow 'agent/store must have a valid name';\n\t}\n\telse if (value === undefined) {\n\t\treturn this.getItem(name);\n\t}\n\telse if (value === null) {\n\t\tthis.removeItem(name);\n\t}\n\telse {\n\t\tthis.setItem(name, value);\n\t}\n};\n\nStorage.prototype.getItem = function(name) {\n\treturn jsonParse(this.native.getItem(name));\n};\n\nStorage.prototype.setItem = function(name, value) {\n\tthis.native.setItem(name, JSON.stringify(value));\n};\n\nStorage.prototype.removeItem = function(name) {\n\tthis.native.removeItem(name);\n};\n","// Provide an API for setting and retrieving cookies\nconst arrayFind = require('../../array/find.js');\nconst Storage = require('./Storage.js');\n\n// Emulate localStorage using cookies\nmodule.exports = new Storage({\n\tgetItem: name => {\n\t\tconst key = `${name }=`;\n\t\tconst m = document.cookie.split(';');\n\t\treturn arrayFind(m, item => {\n\t\t\titem = item.replace(/(^\\s+|\\s+$)/, '');\n\t\t\tif (item && item.indexOf(key) === 0) {\n\t\t\t\treturn item.substr(key.length);\n\t\t\t}\n\t\t}) || null;\n\n\t},\n\n\tsetItem: (name, value) => {\n\t\tdocument.cookie = `${name }=${ value}`;\n\t},\n\n\tremoveItem: name => {\n\t\tdocument.cookie = `${name }=; expires=Thu, 01 Jan 1970 00:00:01 GMT;`;\n\t}\n});\n","// sessionStorage\n// Shimmed up sessionStorage\n\nconst sessionStorage = require('./sessionStorage.js');\nconst Storage = require('./Storage.js');\n\n// Test the environment\ntry {\n\tconst temp = '__tricks_temp__';\n\t// In Chrome with cookies blocked, calling localStorage throws an error\n\tconst storage = window.localStorage;\n\tstorage.setItem(temp, 1);\n\tstorage.removeItem(temp);\n\tmodule.exports = new Storage(storage);\n\n}\ncatch (e) {\n\tmodule.exports = sessionStorage;\n}\n","// sessionStorage\n// Shimmed up sessionStorage\n\nconst cookieStorage = require('./cookieStorage.js');\nconst Storage = require('./Storage.js');\n\n// Test the environment\ntry {\n\tconst temp = '__tricks_temp__';\n\t// In Chrome with cookies blocked, calling localStorage throws an error\n\tconst storage = window.sessionStorage;\n\tstorage.setItem(temp, 1);\n\tstorage.removeItem(temp);\n\tmodule.exports = new Storage(storage);\n\n}\ncatch (e) {\n\tmodule.exports = cookieStorage;\n}\n","// Post\n// Send information to a remote location using the post mechanism\n// @param string uri path\n// @param object data, key value data to send\n// @param function callback, function to execute in response\n\nconst append = require('../../dom/append.js');\nconst attr = require('../../dom/attr.js');\nconst domInstance = require('../../dom/domInstance.js');\nconst createElement = require('../../dom/createElement.js');\nconst globalCallback = require('../../events/globalCallback.js');\nconst toArray = require('../../array/toArray.js');\nconst instanceOf = require('../../object/instanceOf.js');\nconst on = require('../../events/on.js');\nconst emit = require('../../events/emit.js');\nconst setImmediate = require('../../time/setImmediate.js');\n\nmodule.exports = (url, data, options, callback, callback_name, timeout = 60000) => {\n\n\tlet timer;\n\tlet bool = 0;\n\tconst cb = r => {\n\t\tif (!(bool++)) {\n\t\t\tif (timer) {\n\t\t\t\tclearTimeout(timer);\n\t\t\t\ttimer = null;\n\t\t\t}\n\t\t\tcallback(r);\n\n\t\t\t// Trigger onsubmit on the form.\n\t\t\t// Typically this isn't activated until afterwards\n\t\t\temit(form, 'submit');\n\n\t\t\t// The setImmediate fixes the test runner in phantomjs\n\t\t\tsetImmediate(() => frame.parentNode.removeChild(frame));\n\t\t}\n\n\t\treturn true;\n\t};\n\n\t// What is the name of the callback to contain\n\t// We'll also use this to name the iframe\n\tcallback_name = globalCallback(cb, callback_name);\n\n\t/////////////////////\n\t// Create the FRAME\n\t/////////////////////\n\n\tconst frame = createFrame(callback_name);\n\n\t// Override callback mechanism. Triggger a response onload/onerror\n\tif (options && options.callbackonload) {\n\n\t\t// Onload is being fired twice\n\t\tframe.onload = cb.bind(null, {\n\t\t\tresponse: 'posted',\n\t\t\tmessage: 'Content was posted'\n\t\t});\n\t}\n\n\n\t/////////////////////\n\t// Set a timeout\n\t/////////////////////\n\n\tif (timeout) {\n\t\ttimer = setTimeout(cb.bind(null, new Error('timeout')), timeout);\n\t}\n\n\n\t/////////////////////\n\t// Create a form\n\t/////////////////////\n\n\tconst form = createFormFromData(data);\n\n\t// The URL is a function for some cases and as such\n\t// Determine its value with a callback containing the new parameters of this function.\n\turl = url.replace(new RegExp('=\\\\?(&|$)'), `=${ callback_name }$1`);\n\n\t// Set the target of the form\n\tattr(form, {\n\t\tmethod: 'POST',\n\t\ttarget: callback_name,\n\t\taction: url\n\t});\n\n\tform.target = callback_name;\n\n\t// Submit the form\n\t// Some reason this needs to be offset from the current window execution\n\tsetTimeout(() => {\n\t\tform.submit();\n\t}, 100);\n};\n\n\nfunction createFrame(callback_name) {\n\tlet frame;\n\n\ttry {\n\t\t// IE7 hack, only lets us define the name here, not later.\n\t\tframe = createElement(`<iframe name=\"${ callback_name }\">`);\n\t}\n\tcatch (e) {\n\t\tframe = createElement('iframe');\n\t}\n\n\t// Attach the frame with the following attributes to the document body.\n\tattr(frame, {\n\t\tname: callback_name,\n\t\tid: callback_name,\n\t\tstyle: 'display:none;'\n\t});\n\n\tdocument.body.appendChild(frame);\n\n\treturn frame;\n}\n\n\nfunction createFormFromData(data) {\n\n\t// This hack needs a form\n\tlet form = null;\n\tconst reenableAfterSubmit = [];\n\tlet i = 0;\n\tlet x = null;\n\n\n\t// If we are just posting a single item\n\tif (domInstance('input', data)) {\n\t\t// Get the parent form\n\t\tform = data.form;\n\n\t\t// Loop through and disable all of its siblings\n\t\ttoArray(form.elements).forEach(input => {\n\t\t\tif (input !== data) {\n\t\t\t\tinput.setAttribute('disabled', true);\n\t\t\t}\n\t\t});\n\n\t\t// Move the focus to the form\n\t\tdata = form;\n\t}\n\n\t// Posting a form\n\tif (domInstance('form', data)) {\n\t\t// This is a form element\n\t\tform = data;\n\n\t\t// Does this form need to be a multipart form?\n\t\ttoArray(form.elements).forEach(input => {\n\t\t\tif (!input.disabled && input.type === 'file') {\n\t\t\t\tform.encoding = form.enctype = 'multipart/form-data';\n\t\t\t\tinput.setAttribute('name', 'file');\n\t\t\t}\n\t\t});\n\t}\n\telse {\n\t\t// Its not a form element,\n\t\t// Therefore it must be a JSON object of Key=>Value or Key=>Element\n\t\t// If anyone of those values are a input type=file we shall shall insert its siblings into the form for which it belongs.\n\t\tfor (x in data) if (data.hasOwnProperty(x)) {\n\t\t\t// Is this an input Element?\n\t\t\tif (domInstance('input', data[x]) && data[x].type === 'file') {\n\t\t\t\tform = data[x].form;\n\t\t\t\tform.encoding = form.enctype = 'multipart/form-data';\n\t\t\t}\n\t\t}\n\n\t\t// Do If there is no defined form element, lets create one.\n\t\tif (!form) {\n\t\t\t// Build form\n\t\t\tform = append('form');\n\n\t\t\t// Bind the removal of the form\n\t\t\ton(form, 'submit', () => {\n\t\t\t\tsetImmediate(() => {\n\t\t\t\t\tform.parentNode.removeChild(form);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\t// Bind the clean up of the existing form.\n\t\t\ton(form, 'submit', () => {\n\t\t\t\tsetImmediate(() => {\n\t\t\t\t\treenableAfterSubmit.forEach(input => {\n\t\t\t\t\t\tif (input) {\n\t\t\t\t\t\t\tinput.setAttribute('disabled', false);\n\t\t\t\t\t\t\tinput.disabled = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Reset, incase this is called again.\n\t\t\t\t\treenableAfterSubmit.length = 0;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tlet input;\n\n\t\t// Add elements to the form if they dont exist\n\t\tfor (x in data) if (data.hasOwnProperty(x)) {\n\n\t\t\t// Is this an element?\n\t\t\tconst el = (domInstance('input', data[x]) || domInstance('textArea', data[x]) || domInstance('select', data[x]));\n\n\t\t\t// Is this not an input element, or one that exists outside the form.\n\t\t\tif (!el || data[x].form !== form) {\n\n\t\t\t\t// Does an element have the same name?\n\t\t\t\tlet inputs = form.elements[x];\n\t\t\t\tif (input) {\n\t\t\t\t\t// Remove it.\n\t\t\t\t\tif (!instanceOf(inputs, window.NodeList)) {\n\t\t\t\t\t\tinputs = [inputs];\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (i = 0; i < inputs.length; i++) {\n\t\t\t\t\t\tinputs[i].parentNode.removeChild(inputs[i]);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Create an input element\n\t\t\t\tinput = append('input', {\n\t\t\t\t\ttype: 'hidden',\n\t\t\t\t\tname: x\n\t\t\t\t}, form);\n\n\t\t\t\t// Does it have a value attribute?\n\t\t\t\tif (el) {\n\t\t\t\t\tinput.value = data[x].value;\n\t\t\t\t}\n\t\t\t\telse if (domInstance(null, data[x])) {\n\t\t\t\t\tinput.value = data[x].innerHTML || data[x].innerText;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tinput.value = data[x];\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// It is an element, which exists within the form, but the name is wrong\n\t\t\telse if (el && data[x].name !== x) {\n\t\t\t\tdata[x].setAttribute('name', x);\n\t\t\t\tdata[x].name = x;\n\t\t\t}\n\t\t}\n\n\t\t// Disable elements from within the form if they weren't specified\n\t\ttoArray(form.elements).forEach(input => {\n\n\t\t\t// Does the same name and value exist in the parent\n\t\t\tif (!(input.name in data) && input.getAttribute('disabled') !== true) {\n\t\t\t\t// Disable\n\t\t\t\tinput.setAttribute('disabled', true);\n\n\t\t\t\t// Add re-enable to callback\n\t\t\t\treenableAfterSubmit.push(input);\n\t\t\t}\n\t\t});\n\t}\n\n\treturn form;\n}\n","const createElement = require('../../dom/createElement.js');\nconst createEvent = require('../../events/createEvent.js');\n\nmodule.exports = (url, callback, timeout = 0) => {\n\n\t// Inject a script tag\n\tlet bool = 0;\n\tlet timer;\n\tconst head = document.getElementsByTagName('script')[0].parentNode;\n\tconst cb = e => {\n\t\tif (!(bool++) && callback) {\n\t\t\tcallback(e);\n\t\t}\n\t\tif (timer) {\n\t\t\tclearTimeout(timer);\n\t\t}\n\t};\n\n\t// Add timeout\n\tif (timeout) {\n\t\ttimer = window.setTimeout(() => {\n\t\t\tcb(createEvent('timeout'));\n\t\t}, timeout);\n\t}\n\n\t// Build script tag\n\tconst script = createElement('script', {\n\t\tsrc: url,\n\t\tonerror: cb,\n\t\tonload: cb,\n\t\tonreadystatechange: () => {\n\t\t\tif (/loaded|complete/i.test(script.readyState)) {\n\t\t\t\tcb(createEvent('load'));\n\t\t\t}\n\t\t}\n\t});\n\n\t// Set Async\n\tscript.async = true;\n\n\t// Inject script tag into the head element\n\thead.insertBefore(script, head.firstChild);\n\n\treturn script;\n};\n","// JSONP\nconst globalCallback = require('../../events/globalCallback.js');\nconst getScript = require('./getScript.js');\n\nconst MATCH_CALLBACK_PLACEHOLDER = /=\\?(&|$)/;\n\nmodule.exports = (url, callback, callback_name, timeout = 60000) => {\n\n\t// Change the name of the callback\n\tlet result;\n\n\t// Add callback to the window object\n\tcallback_name = globalCallback(json => {\n\t\tresult = json;\n\t\treturn true; // this ensure the window reference is removed\n\t}, callback_name);\n\n\t// The URL is a function for some cases and as such\n\t// Determine its value with a callback containing the new parameters of this function.\n\turl = url.replace(MATCH_CALLBACK_PLACEHOLDER, `=${ callback_name }$1`);\n\n\tconst script = getScript(url, () => {\n\t\tcallback(result);\n\t\tscript.parentNode.removeChild(script);\n\t}, timeout);\n\n\treturn script;\n};\n","// Request\n// Makes an REST request given an object which describes how (aka, xhr, jsonp, formpost)\nconst jsonp = require('./jsonp.js');\nconst xhr = require('./xhr.js');\nconst formpost = require('./formpost.js');\nconst SupportCORS = require('../../support/cors.js');\nconst globalCallback = require('../../events/globalCallback.js');\nconst createUrl = require('../../string/createUrl.js');\nconst extend = require('../../object/extend.js');\n\nmodule.exports = (p, callback) => {\n\n\tif (typeof p === 'string') {\n\t\tp = {\n\t\t\turl: p\n\t\t};\n\t}\n\n\t// Use interchangeably\n\tp.url = p.url || p.uri;\n\n\t// Set defaults\n\tp.query = p.query || p.qs || {};\n\n\t// Default method\n\tp.method = (p.method || 'get').toLowerCase();\n\n\t// Default proxy response\n\tp.proxyHandler = p.proxyHandler || ((p, cb) => {\n\t\tcb();\n\t});\n\n\t// CORS\n\tif (SupportCORS && (typeof (p.xhr) === 'function' ? p.xhr(p, p.query) : p.xhr !== false)) {\n\n\t\t// Pass the selected request through a proxy\n\t\tp.proxyHandler(p, () => {\n\t\t\t// The agent and the provider support CORS\n\t\t\tconst url = createUrl(p.url, p.query);\n\t\t\tconst x = xhr(p.method, url, p.responseType, p.headers, p.data, callback);\n\t\t\tx.onprogress = p.onprogress || null;\n\n\t\t\t// Feature detect, not available on all implementations of XMLHttpRequest\n\t\t\tif (x.upload && p.onuploadprogress) {\n\t\t\t\tx.upload.onprogress = p.onuploadprogress;\n\t\t\t}\n\t\t});\n\n\t\treturn;\n\t}\n\n\t// Apply a globalCallback\n\tp.callbackID = p.query.callback = globalCallback(callback);\n\n\t// JSONP\n\tif (p.jsonp !== false) {\n\n\t\t// Call p.jsonp handler\n\t\tif (typeof (p.jsonp) === 'function') {\n\t\t\t// Format the request via JSONP\n\t\t\tp.jsonp(p, p.query);\n\t\t}\n\n\t\t// Lets use JSONP if the method is 'get'\n\t\tif (p.method === 'get') {\n\n\t\t\tp.proxyHandler(p, () => {\n\t\t\t\tconst url = createUrl(p.url, extend(p.query, p.data || {}));\n\t\t\t\tjsonp(url, callback, p.callbackID, p.timeout);\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// Otherwise we're on to the old school, iframe hacks and JSONP\n\tif (p.form !== false) {\n\n\t\t// Add some additional query parameters to the URL\n\t\t// We're pretty stuffed if the endpoint doesn't like these\n\t\tp.query.redirect_uri = p.redirect_uri;\n\t\tp.query.state = JSON.stringify({callback: p.callbackID});\n\t\tdelete p.query.callback;\n\n\t\tlet opts;\n\n\t\tif (typeof (p.form) === 'function') {\n\n\t\t\t// Format the request\n\t\t\topts = p.form(p, p.query);\n\t\t}\n\n\t\tif (p.method === 'post' && opts !== false) {\n\n\t\t\tp.proxyHandler(p, () => {\n\t\t\t\tconst url = createUrl(p.url, p.query);\n\t\t\t\tformpost(url, p.data, opts, callback, p.callbackID, p.timeout);\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\t}\n\n\tcallback({error: 'invalid_request'});\n};\n","// XHR: uses CORS to make requests\nconst instanceOf = require('../../object/instanceOf.js');\nconst extract = require('../../string/extract.js');\nconst jsonParse = require('../../string/jsonParse.js');\nconst tryCatch = require('../../object/tryCatch.js');\nconst rewire = require('../../object/rewire.js');\n\nconst match_headers = /([a-z0-9\\-]+):\\s*(.*);?/gi;\n\nmodule.exports = rewire(xhr);\n\nfunction xhr(method, url, responseType, headers, data, callback) {\n\n\tconst r = new XMLHttpRequest();\n\n\t// Make it CAPITAL\n\tmethod = method.toUpperCase();\n\n\t// Define the callback function\n\tr.onload = () => {\n\t\t// Response\n\t\tlet response = r.response;\n\n\t\t// Was this text\n\t\tif (!response && (r.responseType === '' || r.responseType === 'text')) {\n\t\t\tresponse = r.responseText;\n\t\t}\n\n\t\t// Is this json?\n\t\tif (typeof(response) === 'string' && responseType === 'json') {\n\n\t\t\t// Set this to the json response\n\t\t\t// Fallback if the browser did not defined responseJSON...\n\t\t\tresponse = r.responseJSON || jsonParse(r.responseText || r.response);\n\t\t}\n\n\t\tconst headers = extract(r.getAllResponseHeaders(), match_headers);\n\t\theaders.statusCode = r.status;\n\n\t\tcallback(response, headers);\n\t};\n\n\tr.onerror = r.onload;\n\n\t// Should we add the query to the URL?\n\tif (method === 'GET' || method === 'DELETE') {\n\t\tdata = null;\n\t}\n\telse if (data && typeof (data) !== 'string' &&\n\t\t!instanceOf(data, window.FormData) &&\n\t\t!instanceOf(data, window.File) &&\n\t\t!instanceOf(data, window.Blob))\t{\n\t\t// Loop through and add formData\n\t\tdata = toFormData(data);\n\t}\n\n\t// Open the path, async\n\tr.open(method, url, true);\n\n\t// Set responseType if supported\n\tif ('responseType' in r) {\n\n\t\ttryCatch(() => {\n\t\t\t// Setting this to an unsupported value can result in a \"SYNTAX_ERR: DOM Exception 12\"\n\t\t\tr.responseType = responseType;\n\t\t});\n\t}\n\telse if (responseType === 'blob') {\n\t\tr.overrideMimeType('text/plain; charset=x-user-defined');\n\t}\n\n\t// Set any bespoke headers\n\tif (headers) {\n\t\tfor (const x in headers) {\n\t\t\tr.setRequestHeader(x, headers[x]);\n\t\t}\n\t}\n\n\tr.send(data);\n\n\treturn r;\n}\n\n\nfunction toFormData(data) {\n\tconst f = new FormData();\n\tfor (const x in data) {\n\t\tif (data.hasOwnProperty(x)) {\n\t\t\tif (instanceOf(data[x], window.HTMLInputElement) && 'files' in data[x]) {\n\t\t\t\tif (data[x].files.length > 0) {\n\t\t\t\t\tf.append(x, data[x].files[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (instanceOf(data[x], window.Blob)) {\n\t\t\t\tf.append(x, data[x], data.name);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tf.append(x, data[x]);\n\t\t\t}\n\t\t}\n\t}\n\treturn f;\n}\n","const createElement = require('./createElement.js');\n\nmodule.exports = (tagName, prop, parent = document.body) => {\n\tconst elm = createElement(tagName, prop);\n\tparent.appendChild(elm);\n\treturn elm;\n};\n","const each = require('./each.js');\n\nmodule.exports = (elements, props) =>\n\teach(elements, element => {\n\t\tfor (const x in props) {\n\t\t\tconst prop = props[x];\n\t\t\tif (typeof prop === 'function') {\n\t\t\t\telement[x] = prop;\n\t\t\t}\n\t\t\telse {\n\t\t\t\telement.setAttribute(x, prop);\n\t\t\t}\n\t\t}\n\t});\n","const attr = require('./attr.js');\n\nmodule.exports = (tagName, attrs) => {\n\tconst elm = document.createElement(tagName);\n\tattr(elm, attrs);\n\treturn elm;\n};\n","const instanceOf = require('../object/instanceOf.js');\n\nmodule.exports = (type, data) => {\n\tconst test = `HTML${ (type || '').replace(\n\t\t/^[a-z]/,\n\t\tm => m.toUpperCase()\n\t)}Element`;\n\n\tif (!data) {\n\t\treturn false;\n\t}\n\n\tif (window[test]) {\n\t\treturn instanceOf(data, window[test]);\n\t}\n\telse if (window.Element) {\n\t\treturn instanceOf(data, window.Element) && (!type || (data.tagName && data.tagName.toLowerCase() === type));\n\t}\n\telse {\n\t\treturn (!(instanceOf(data, Object) || instanceOf(data, Array) || instanceOf(data, String) || instanceOf(data, Number)) && data.tagName && data.tagName.toLowerCase() === type);\n\t}\n};\n","const isDom = require('./isDom.js');\nconst instanceOf = require('../object/instanceOf.js');\nconst toArray = require('../array/toArray.js');\n\nmodule.exports = (matches, callback = () => {}) => {\n\n\tif (isDom(matches)) {\n\t\tmatches = [matches];\n\t}\n\telse if (typeof(matches) === 'string') {\n\t\tmatches = document.querySelectorAll(matches);\n\t}\n\n\tif (!instanceOf(matches, Array)) {\n\t\tmatches = toArray(matches);\n\t}\n\n\tif (callback) {\n\t\tmatches.forEach(callback);\n\t}\n\n\treturn matches;\n};\n","const append = require('./append.js');\nconst param = require('../string/param.js');\n\nmodule.exports = src => {\n\n\tconst style = param({\n\t\tposition: 'absolute',\n\t\tleft: '-1000px',\n\t\tbottom: 0,\n\t\theight: '1px',\n\t\twidth: '1px'\n\t}, ';', ':');\n\n\treturn append('iframe', {src, style});\n};\n","const instanceOf = require('../object/instanceOf.js');\n\nconst _HTMLElement = typeof HTMLElement !== 'undefined' ? HTMLElement : Element;\nconst _HTMLDocument = typeof HTMLDocument !== 'undefined' ? HTMLDocument : Document;\nconst _Window = window.constructor;\n\nmodule.exports = test =>\n\tinstanceOf(test, _HTMLElement) ||\n\t\tinstanceOf(test, _HTMLDocument) ||\n\t\tinstanceOf(test, _Window)\n;\n","// IE does not support `new Event()`\n// See https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events for details\nconst dict = {bubbles: true, cancelable: true};\n\nlet createEvent = (eventname, options = dict) =>\n\tnew Event(eventname, options);\n\ntry {\n\tcreateEvent('test');\n}\ncatch (e) {\n\tcreateEvent = (eventname, options = dict) => {\n\t\tconst e = document.createEvent('Event');\n\t\te.initEvent(eventname, !!options.bubbles, !!options.cancelable);\n\t\treturn e;\n\t};\n}\n\nmodule.exports = createEvent;\n","// on.js\n// Listen to events, this is a wrapper for addEventListener\nconst each = require('../dom/each.js');\nconst createEvent = require('./createEvent.js');\n\n// Return\nmodule.exports = (elements, eventname) => each(elements, el => el.dispatchEvent(createEvent(eventname)));\n\n","// Global Events\n// Attach the callback to the window object\n// Return its unique reference\nconst random = require('../string/random.js');\n\nmodule.exports = (callback, guid, prefix = '_tricks_') => {\n\n\t// If the guid has not been supplied then create a new one.\n\tguid = guid || prefix + random();\n\n\t// Define the callback function\n\twindow[guid] = handle.bind(null, guid, callback);\n\n\treturn guid;\n};\n\nfunction handle(guid, callback, ...args) {\n\tcallback(...args) && delete window[guid];\n}\n","// on.js\n// Listen to events, this is a wrapper for addEventListener\n\nconst each = require('../dom/each.js');\nconst SEPERATOR = /[\\s\\,]+/;\n\n// See https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection\nlet supportsPassive = false;\ntry {\n\tconst opts = Object.defineProperty({}, 'passive', {\n\t\tget() {\n\t\t\tsupportsPassive = true;\n\t\t}\n\t});\n\twindow.addEventListener('test', null, opts);\n}\ncatch (e) {\n\t// Continue\n}\n\n\nmodule.exports = (elements, eventnames, callback, options = false) => {\n\n\tif (typeof options === 'object' && options.passive && !supportsPassive) {\n\t\t// Override the passive mark\n\t\toptions = false;\n\t}\n\n\teventnames = eventnames.split(SEPERATOR);\n\treturn each(elements, el => eventnames.forEach(eventname => el.addEventListener(eventname, callback, options)));\n};\n","// Makes it easier to assign parameters, where some are optional\n// @param o object\n// @param a arguments\nmodule.exports = (o, args) => {\n\n\tconst p = {};\n\tlet i = 0;\n\tlet t = null;\n\tlet x = null;\n\n\t// 'x' is the first key in the list of object parameters\n\tfor (x in o) {\n\t\tif (o.hasOwnProperty(x)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Passing in hash object of arguments?\n\t// Where the first argument can't be an object\n\tif ((args.length === 1) && (typeof (args[0]) === 'object') && o[x] !== 'o!') {\n\n\t\t// Could this object still belong to a property?\n\t\t// Check the object keys if they match any of the property keys\n\t\tfor (x in args[0]) {\n\t\t\tif (o.hasOwnProperty(x)) {\n\t\t\t\t// Does this key exist in the property list?\n\t\t\t\tif (x in o) {\n\t\t\t\t\t// Yes this key does exist so its most likely this function has been invoked with an object parameter\n\t\t\t\t\t// Return first argument as the hash of all arguments\n\t\t\t\t\treturn args[0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Else loop through and account for the missing ones.\n\tfor (x in o) {\n\t\tif (o.hasOwnProperty(x)) {\n\n\t\t\tt = typeof (args[i]);\n\n\t\t\tif ((typeof (o[x]) === 'function' && o[x].test(args[i])) || (typeof (o[x]) === 'string' && (\n\t\t\t\t(o[x].indexOf('s') > -1 && t === 'string') ||\n\t\t\t\t(o[x].indexOf('o') > -1 && t === 'object') ||\n\t\t\t\t(o[x].indexOf('i') > -1 && t === 'number') ||\n\t\t\t\t(o[x].indexOf('a') > -1 && t === 'object') ||\n\t\t\t\t(o[x].indexOf('f') > -1 && t === 'function')\n\t\t\t\t))\n\t\t\t\t) {\n\t\t\t\tp[x] = args[i++];\n\t\t\t}\n\n\t\t\telse if (typeof (o[x]) === 'string' && o[x].indexOf('!') > -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn p;\n};\n","const isBinary = require('./isBinary.js');\n\n// Create a clone of an object\nmodule.exports = function clone(obj) {\n\t// Does not clone DOM elements, nor Binary data, e.g. Blobs, Filelists\n\tif (obj === null || typeof (obj) !== 'object' || obj instanceof Date || 'nodeName' in obj || isBinary(obj) || (typeof FormData === 'function' && obj instanceof FormData)) {\n\t\treturn obj;\n\t}\n\n\tif (Array.isArray(obj)) {\n\t\t// Clone each item in the array\n\t\treturn obj.map(clone.bind(this));\n\t}\n\n\t// But does clone everything else.\n\tconst _clone = {};\n\tfor (const x in obj) {\n\t\t_clone[x] = clone(obj[x]);\n\t}\n\n\treturn _clone;\n};\n","// Return all the properties in 'a' which aren't in 'b';\nmodule.exports = (a, b) => {\n\tif (a || !b) {\n\t\tconst r = {};\n\t\tfor (const x in a) {\n\t\t\t// is this a custom property?\n\t\t\tif (!(x in b)) {\n\t\t\t\tr[x] = a[x];\n\t\t\t}\n\t\t}\n\t\treturn r;\n\t}\n\treturn a;\n};\n","const instanceOf = require('./instanceOf.js');\n\nmodule.exports = function extend(r, ...args) {\n\targs.forEach(o => {\n\t\tif (Array.isArray(r) && Array.isArray(o)) {\n\t\t\tArray.prototype.push.apply(r, o);\n\t\t}\n\t\telse if (instanceOf(r, Object) && instanceOf(o, Object) && r !== o) {\n\t\t\tfor (const x in o) {\n\t\t\t\tr[x] = extend(r[x], o[x]);\n\t\t\t}\n\t\t}\n\t\telse if (Array.isArray(o)) {\n\t\t\t// Clone it\n\t\t\tr = o.slice(0);\n\t\t}\n\t\telse {\n\t\t\tr = o;\n\t\t}\n\t});\n\treturn r;\n};\n","module.exports = (test, root) => root && test instanceof root;\n","const instanceOf = require('./instanceOf.js');\n\nmodule.exports = data =>\n\tinstanceOf(data, Object) && (\n\t(instanceOf(data, typeof HTMLInputElement !== 'undefined' ? HTMLInputElement : undefined) && data.type === 'file') ||\n\t(instanceOf(data, typeof HTMLInput !== 'undefined' ? HTMLInput : undefined) && data.type === 'file') ||\n\tinstanceOf(data, typeof FileList !== 'undefined' ? FileList : undefined) ||\n\tinstanceOf(data, typeof File !== 'undefined' ? File : undefined) ||\n\tinstanceOf(data, typeof Blob !== 'undefined' ? Blob : undefined));\n","module.exports = obj => {\n\n\t// Scalar\n\tif (!obj)\n\t\treturn true;\n\n\t// Array\n\tif (Array.isArray(obj)) {\n\t\treturn !obj.length;\n\t}\n\telse if (typeof (obj) === 'object') {\n\t\t// Object\n\t\tfor (const key in obj) {\n\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n};\n","// Extend an object\nconst extend = require('./extend.js');\n\nmodule.exports = (...args) => {\n\targs.unshift({});\n\treturn extend(...args);\n};\n","// Pubsub extension\n// A contructor superclass for adding event menthods, on, off, emit.\nconst setImmediate = require('../time/setImmediate.js');\n\nconst separator = /[\\s\\,]+/;\n\nmodule.exports = function() {\n\n\t// If this doesn't support getPrototype then we can't get prototype.events of the parent\n\t// So lets get the current instance events, and add those to a parent property\n\tthis.parent = {\n\t\tevents: this.events,\n\t\tfindEvents: this.findEvents,\n\t\tparent: this.parent,\n\t\tutils: this.utils\n\t};\n\n\tthis.events = {};\n\n\tthis.off = off;\n\tthis.on = on;\n\tthis.emit = emit;\n\tthis.emitAfter = emitAfter;\n\tthis.findEvents = findEvents;\n\n\treturn this;\n};\n\n\n// On, subscribe to events\n// @param evt   string\n// @param callback  function\nfunction on(evt, callback) {\n\n\tif (callback && typeof (callback) === 'function') {\n\t\tevt.split(separator).forEach(name => {\n\t\t\t// Has this event already been fired on this instance?\n\t\t\tthis.events[name] = [callback].concat(this.events[name] || []);\n\t\t});\n\t}\n\n\treturn this;\n}\n\n\n// Off, unsubscribe to events\n// @param evt   string\n// @param callback  function\nfunction off(evt, callback) {\n\n\tthis.findEvents(evt, function(name, index) {\n\t\tif (!callback || this.events[name][index] === callback) {\n\t\t\tthis.events[name][index] = null;\n\t\t}\n\t});\n\n\treturn this;\n}\n\n// Emit\n// Triggers any subscribed events\nfunction emit(evt, ...args) {\n\n\t// Append the eventname to the end of the arguments\n\targs.push(evt);\n\n\t// Handler\n\tconst handler = function(name, index) {\n\n\t\t// Replace the last property with the event name\n\t\targs[args.length - 1] = (name === '*' ? evt : name);\n\n\t\t// Trigger\n\t\tthis.events[name][index].apply(this, args);\n\t};\n\n\t// Find the callbacks which match the condition and call\n\tlet _this = this;\n\twhile (_this && _this.findEvents) {\n\n\t\t// Find events which match\n\t\t_this.findEvents(`${evt },*`, handler);\n\t\t_this = _this.parent;\n\t}\n\n\treturn this;\n}\n\n// Easy functions\nfunction emitAfter(...args) {\n\n\tsetImmediate(() => {\n\t\tthis.emit(...args);\n\t});\n\n\treturn this;\n}\n\nfunction findEvents(evt, callback) {\n\n\tconst a = evt.split(separator);\n\n\tfor (const name in this.events) {\n\t\tif (this.events.hasOwnProperty(name)) {\n\n\t\t\tif (a.indexOf(name) > -1) {\n\n\t\t\t\tthis.events[name].forEach(triggerCallback.bind(this, name, callback));\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction triggerCallback(name, callback, handler, i) {\n\t// Does the event handler exist?\n\tif (handler) {\n\t\t// Emit on the local instance of this\n\t\tcallback.call(this, name, i);\n\t}\n}\n","// Rewire functions\nmodule.exports = fn => {\n\tconst f = (...args) => f.fn.apply(null, args);\n\tf.fn = fn;\n\treturn f;\n};\n","module.exports = fn => {\n\ttry {\n\t\treturn fn.call(null);\n\t}\n\tcatch (e) {\n\t\t// Continue\n\t}\n};\n","const querystringify = require('./querystringify.js');\nconst isEmpty = require('../object/isEmpty.js');\n\nmodule.exports = (url, params, formatFunction) => {\n\n\tlet reg;\n\n\tif (params) {\n\t\t// Set default formatting function\n\t\tformatFunction = formatFunction || encodeURIComponent;\n\n\t\t// Override the items in the URL which already exist\n\t\tfor (const x in params) {\n\t\t\tconst str = `([\\\\?\\\\&])${ x }=[^\\\\&]*`;\n\t\t\treg = new RegExp(str);\n\t\t\tif (url.match(reg)) {\n\t\t\t\turl = url.replace(reg, `$1${ x }=${ formatFunction(params[x])}`);\n\t\t\t\tdelete params[x];\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!isEmpty(params)) {\n\t\treturn url + (url.indexOf('?') > -1 ? '&' : '?') + querystringify(params, formatFunction);\n\t}\n\n\treturn url;\n};\n","// Extract\n// Extract the parameters of an URL string\n// @param string s, string to decode\n\nmodule.exports = (str, match_params, formatFunction = x => x) => {\n\tconst a = {};\n\tlet m;\n\twhile ((m = match_params.exec(str))) {\n\t\ta[m[1]] = formatFunction(m[2]);\n\t}\n\treturn a;\n};\n","const tryCatch = require('../object/tryCatch.js');\nmodule.exports = str => tryCatch(() => JSON.parse(str));\n","// Param\n// Explode/encode the parameters of an URL string/object\n// @param string s, string to decode\nmodule.exports = (hash, delimiter = '&', seperator = '=', formatFunction = o => o) =>\n\tObject.keys(hash).map(name => {\n\t\tconst value = formatFunction(hash[name]);\n\t\treturn name + (value !== null ? seperator + value : '');\n\t}).join(delimiter)\n;\n","// Create a Query string\nconst extract = require('./extract.js');\n\nconst trim_left = /^[\\#\\?]/;\nconst match_params = /([^=\\/\\&]+)=([^\\&]+)/g;\n\nmodule.exports = (str, formatFunction = decodeURIComponent) => {\n\tstr = str.replace(trim_left, '');\n\treturn extract(str, match_params, formatFunction);\n};\n","// Create a Query string\nconst param = require('./param.js');\nconst fn = value => (value === '?' ? '?' : encodeURIComponent(value));\n\nmodule.exports = (o, formatter = fn) => param(o, '&', '=', formatter);\n","module.exports = () => parseInt(Math.random() * 1e12, 10).toString(36);\n","module.exports = ('withCredentials' in new XMLHttpRequest());\n","module.exports = typeof setImmediate === 'function' ? setImmediate : (cb => setTimeout(cb, 0));\n","// Close a window\nmodule.exports = window => {\n\n\t// Is this window within an Iframe?\n\tif (window.frameElement) {\n\t\twindow.parent.document.body.removeChild(window.frameElement);\n\t}\n\telse {\n\t\t// Close this current window\n\t\ttry {\n\t\t\twindow.close();\n\t\t}\n\t\tcatch (e) {\n\t\t\t// Continue\n\t\t}\n\n\t\t// IOS bug wont let us close a popup if still loading\n\t\tif (window.addEventListener) {\n\t\t\twindow.addEventListener('load', () => window.close());\n\t\t}\n\t}\n};\n","// popup\n// Easy options as a hash\nconst param = require('../string/param.js');\n\nconst documentElement = document.documentElement;\nconst dimensions = [['Top', 'Height'], ['Left', 'Width']];\n\nmodule.exports = (url, target, options = {}) => {\n\n\t// centers the popup correctly to the current display of a multi-screen display.\n\tdimensions.forEach(generatePosition.bind(options));\n\n\t// Open\n\treturn window.open(url, target, param(options, ','));\n};\n\nfunction generatePosition ([Position, Dimension]) {\n\tconst position = Position.toLowerCase();\n\tconst dimension = Dimension.toLowerCase();\n\tif (this[dimension] && !(position in this)) {\n\t\tconst dualScreenPos = window[`screen${ Position}`] !== undefined ? window[`screen${ Position}`] : screen[position];\n\t\tconst d = screen[dimension] || window[`inner${ Dimension}`] || documentElement[`client${ Dimension}`];\n\t\tthis[position] = parseInt((d - this[dimension]) / 2, 10) + dualScreenPos;\n\t}\n}\n","module.exports = path => {\n\n\t// If the path is empty\n\tif (!path) {\n\t\treturn window.location;\n\t}\n\n\t// Chrome and FireFox support new URL() to extract URL objects\n\telse if (window.URL && URL instanceof Function && URL.length !== 0) {\n\t\treturn new URL(path, window.location);\n\t}\n\n\t// Ugly shim, it works!\n\telse {\n\t\tconst a = document.createElement('a');\n\t\ta.href = path;\n\t\t// Return clone for IE compatibility view.\n\t\treturn a.cloneNode(false);\n\t}\n};\n","/**\n * @hello.js\n *\n * HelloJS is a client side Javascript SDK for making OAuth2 logins and subsequent REST calls.\n *\n * @author Andrew Dodson\n * @website https://adodson.com/hello.js/\n\n * @copyright Andrew Dodson, 2012 - 2015\n * @license MIT: You are free to use and modify this code for any use, on the condition that this copyright notice remains.\n */\n\nconst argmap = require('tricks/object/args');\nconst clone = require('tricks/object/clone');\nconst closeWindow = require('tricks/window/close');\nconst createUrl = require('tricks/string/createUrl');\nconst diffKey = require('tricks/object/diffKey');\nconst diff = require('tricks/array/diff');\nconst extend = require('tricks/object/extend');\nconst globalCallback = require('tricks/events/globalCallback');\nconst iframe = require('tricks/dom/hiddenFrame');\nconst isEmpty = require('tricks/object/isEmpty');\nconst merge = require('tricks/object/merge');\nconst param = require('tricks/string/queryparse');\nconst popup = require('tricks/window/popup');\nconst pubsub = require('tricks/object/pubsub');\nconst random = require('tricks/string/random');\nconst request = require('tricks/http/request');\nconst store = require('tricks/browser/agent/localStorage');\nconst unique = require('tricks/array/unique');\nconst Url = require('tricks/window/url');\n\nconst hello = function(name) {\n\treturn hello.use(name);\n};\n\nmodule.exports = hello;\n\nextend(hello, {\n\n\tsettings: {\n\n\t\t// OAuth2 authentication defaults\n\t\tredirect_uri: (typeof location !== 'undefined' ? location.href.split('#')[0] : null),\n\t\tresponse_type: 'token',\n\t\tdisplay: 'popup',\n\t\tstate: '',\n\n\t\t// OAuth1 shim\n\t\t// The path to the OAuth1 server for signing user requests\n\t\t// Want to recreate your own? Checkout https://github.com/MrSwitch/node-oauth-shim\n\t\toauth_proxy: 'https://auth-server.herokuapp.com/proxy',\n\n\t\t// API timeout in milliseconds\n\t\ttimeout: 20000,\n\n\t\t// Popup Options\n\t\tpopup: {\n\t\t\tresizable: 1,\n\t\t\tscrollbars: 1,\n\t\t\twidth: 500,\n\t\t\theight: 550\n\t\t},\n\n\t\t// Default scope\n\t\t// Many services require atleast a profile scope,\n\t\t// HelloJS automatially includes the value of provider.scope_map.basic\n\t\t// If that's not required it can be removed via hello.settings.scope.length = 0;\n\t\tscope: ['basic'],\n\n\t\t// Scope Maps\n\t\t// This is the default module scope, these are the defaults which each service is mapped too.\n\t\t// By including them here it prevents the scope from being applied accidentally\n\t\tscope_map: {\n\t\t\tbasic: ''\n\t\t},\n\n\t\t// Default service / network\n\t\tdefault_service: null,\n\n\t\t// Force authentication\n\t\t// When hello.login is fired.\n\t\t// (null): ignore current session expiry and continue with login\n\t\t// (true): ignore current session expiry and continue with login, ask for user to reauthenticate\n\t\t// (false): if the current session looks good for the request scopes return the current session.\n\t\tforce: null,\n\n\t\t// Page URL\n\t\t// When 'display=page' this property defines where the users page should end up after redirect_uri\n\t\t// Ths could be problematic if the redirect_uri is indeed the final place,\n\t\t// Typically this circumvents the problem of the redirect_url being a dumb relay page.\n\t\tpage_uri: (typeof location !== 'undefined' ? location.href : null)\n\t},\n\n\t// Service configuration objects\n\tservices: {},\n\n\t// Use\n\t// Define a new instance of the HelloJS library with a default service\n\tuse(service) {\n\n\t\t// Create self, which inherits from its parent\n\t\tconst self = Object.create(this);\n\n\t\t// Inherit the prototype from its parent\n\t\tself.settings = Object.create(this.settings);\n\n\t\t// Define the default service\n\t\tif (service) {\n\t\t\tself.settings.default_service = service;\n\t\t}\n\n\t\t// Create an instance of Events\n\t\tpubsub.call(self);\n\n\t\treturn self;\n\t},\n\n\t// Initialize\n\t// Define the client_ids for the endpoint services\n\t// @param object o, contains a key value pair, service => clientId\n\t// @param object opts, contains a key value pair of options used for defining the authentication defaults\n\t// @param number timeout, timeout in seconds\n\tinit(services, options) {\n\n\t\tif (!services) {\n\t\t\treturn this.services;\n\t\t}\n\n\t\t// Define provider credentials\n\t\t// Reformat the ID field\n\t\tfor (const x in services) {\n\t\t\tif (services.hasOwnProperty(x)) {\n\t\t\t\tif (typeof (services[x]) !== 'object') {\n\t\t\t\t\tservices[x] = {id: services[x]};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Merge services if there already exists some\n\t\textend(this.services, services);\n\n\t\t// Update the default settings with this one.\n\t\tif (options) {\n\t\t\textend(this.settings, options);\n\n\t\t\t// Do this immediatly incase the browser changes the current path.\n\t\t\tif ('redirect_uri' in options) {\n\t\t\t\tthis.settings.redirect_uri = Url(options.redirect_uri).href;\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t// Login\n\t// Using the endpoint\n\t// @param network stringify       name to connect to\n\t// @param options object    (optional)  {display mode, is either none|popup(default)|page, scope: email,birthday,publish, .. }\n\t// @param callback  function  (optional)  fired on signin\n\tasync login(...args) {\n\n\t\tconst utils = this.utils;\n\t\t// Get parameters\n\t\tconst p = argmap({network: 's', options: 'o', callback: 'f'}, args);\n\n\t\t// Local vars\n\t\tlet url;\n\n\t\t// Get all the custom options and store to be appended to the querystring\n\t\tconst qs = diffKey(p.options, this.settings);\n\n\t\t// Merge/override options with app defaults\n\t\tconst opts = p.options = merge(this.settings, p.options || {});\n\n\t\t// Merge/override options with app defaults\n\t\topts.popup = merge(this.settings.popup, p.options.popup || {});\n\n\t\t// Network\n\t\tp.network = p.network || this.settings.default_service;\n\n\t\t// Is our service valid?\n\t\tif (typeof (p.network) !== 'string' || !(p.network in this.services)) {\n\t\t\t// Trigger the default login.\n\t\t\t// Ahh we dont have one.\n\t\t\tthrow error('invalid_network', 'The provided network was not recognized');\n\t\t}\n\n\t\tconst provider = this.services[p.network];\n\n\t\t// Create a global listener to capture events triggered out of scope\n\t\tconst callbackId = `_hellojs_${random()}`;\n\n\t\tconst prs = [];\n\n\t\tprs.push(new Promise((accept, reject) => {\n\t\t\tglobalCallback(str => {\n\n\t\t\t\t// The responseHandler returns a string, lets save this locally\n\t\t\t\tlet obj;\n\n\t\t\t\tif (str) {\n\t\t\t\t\tobj = JSON.parse(str);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tobj = error('cancelled', 'The authentication was not completed');\n\t\t\t\t}\n\n\t\t\t\t// Handle these response using the local\n\t\t\t\t// Trigger on the parent\n\t\t\t\tif (!obj.error) {\n\n\t\t\t\t\t// Save on the parent window the new credentials\n\t\t\t\t\t// This fixes an IE10 bug i think... atleast it does for me.\n\t\t\t\t\tutils.store(obj.network, obj);\n\n\t\t\t\t\t// Fulfill a successful login\n\t\t\t\t\taccept({\n\t\t\t\t\t\tnetwork: obj.network,\n\t\t\t\t\t\tauthResponse: obj\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Reject a successful login\n\t\t\t\t\treject(obj);\n\t\t\t\t}\n\t\t\t}, callbackId);\n\t\t}));\n\n\t\tconst redirectUri = Url(opts.redirect_uri).href;\n\n\t\t// May be a space-delimited list of multiple, complementary types\n\t\tlet responseType = provider.oauth.response_type || opts.response_type;\n\n\t\t// Fallback to token if the module hasn't defined a grant url\n\t\tif (/\\bcode\\b/.test(responseType) && !provider.oauth.grant) {\n\t\t\tresponseType = responseType.replace(/\\bcode\\b/, 'token');\n\t\t}\n\n\t\t// Query string parameters, we may pass our own arguments to form the querystring\n\t\tp.qs = merge(qs, {\n\t\t\tclient_id: encodeURIComponent(provider.id),\n\t\t\tresponse_type: encodeURIComponent(responseType),\n\t\t\tredirect_uri: encodeURIComponent(redirectUri),\n\t\t\tstate: {\n\t\t\t\tclient_id: provider.id,\n\t\t\t\tnetwork: p.network,\n\t\t\t\tdisplay: opts.display,\n\t\t\t\tcallback: callbackId,\n\t\t\t\tstate: opts.state,\n\t\t\t\tredirect_uri: redirectUri\n\t\t\t}\n\t\t});\n\n\t\t// Get current session for merging scopes, and for quick auth response\n\t\tconst session = utils.store(p.network);\n\n\t\t// Scopes (authentication permisions)\n\t\t// Ensure this is a string - IE has a problem moving Arrays between windows\n\t\t// Append the setup scope\n\t\tconst SCOPE_SPLIT = /[,\\s]+/;\n\n\t\t// Include default scope settings (cloned).\n\t\tlet scope = this.settings.scope ? [this.settings.scope.toString()] : [];\n\n\t\t// Extend the providers scope list with the default\n\t\tconst scopeMap = merge(this.settings.scope_map, provider.scope || {});\n\n\t\t// Add user defined scopes...\n\t\tif (opts.scope) {\n\t\t\tscope.push(opts.scope.toString());\n\t\t}\n\n\t\t// Append scopes from a previous session.\n\t\t// This helps keep app credentials constant,\n\t\t// Avoiding having to keep tabs on what scopes are authorized\n\t\tif (session && 'scope' in session && session.scope instanceof String) {\n\t\t\tscope.push(session.scope);\n\t\t}\n\n\t\t// Join and Split again\n\t\tscope = scope.join(',').split(SCOPE_SPLIT);\n\n\t\t// Format remove duplicates and empty values\n\t\tscope = unique(scope).filter(filterEmpty);\n\n\t\t// Save the the scopes to the state with the names that they were requested with.\n\t\tp.qs.state.scope = scope.join(',');\n\n\t\t// Map scopes to the providers naming convention\n\t\t// Does this have a mapping?\n\t\tscope = scope.map(item => ((item in scopeMap) ? scopeMap[item] : item));\n\n\t\t// Stringify and Arrayify so that double mapped scopes are given the chance to be formatted\n\t\tscope = scope.join(',').split(SCOPE_SPLIT);\n\n\t\t// Again...\n\t\t// Format remove duplicates and empty values\n\t\tscope = unique(scope).filter(filterEmpty);\n\n\t\t// Join with the expected scope delimiter into a string\n\t\tp.qs.scope = scope.join(provider.scope_delim || ',');\n\n\t\t// Is the user already signed in with the appropriate scopes, valid access_token?\n\t\tif (opts.force === false) {\n\n\t\t\tif (session && 'access_token' in session && session.access_token && 'expires' in session && session.expires > ((new Date()).getTime() / 1e3)) {\n\t\t\t\t// What is different about the scopes in the session vs the scopes in the new login?\n\t\t\t\tconst a = diff((session.scope || '').split(SCOPE_SPLIT), (p.qs.state.scope || '').split(SCOPE_SPLIT));\n\t\t\t\tif (a.length === 0) {\n\n\t\t\t\t\t// OK trigger the callback\n\t\t\t\t\treturn {\n\t\t\t\t\t\tunchanged: true,\n\t\t\t\t\t\tnetwork: p.network,\n\t\t\t\t\t\tauthResponse: session\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Page URL\n\t\tif (opts.display === 'page' && opts.page_uri) {\n\t\t\t// Add a page location, place to endup after session has authenticated\n\t\t\tp.qs.state.page_uri = Url(opts.page_uri).href;\n\t\t}\n\n\t\t// Bespoke\n\t\t// Override login querystrings from auth_options\n\t\tif ('login' in provider && typeof (provider.login) === 'function') {\n\t\t\t// Format the paramaters according to the providers formatting function\n\t\t\tprovider.login(p);\n\t\t}\n\n\t\t// Add OAuth to state\n\t\t// Where the service is going to take advantage of the oauth_proxy\n\t\tif (!/\\btoken\\b/.test(responseType) ||\n\t\tparseInt(provider.oauth.version, 10) < 2 ||\n\t\t(opts.display === 'none' && provider.oauth.grant && session && session.refresh_token)) {\n\n\t\t\t// Add the oauth endpoints\n\t\t\tp.qs.state.oauth = provider.oauth;\n\n\t\t\t// Add the proxy url\n\t\t\tp.qs.state.oauth_proxy = opts.oauth_proxy;\n\n\t\t}\n\n\t\t// Convert state to a string\n\t\tp.qs.state = encodeURIComponent(JSON.stringify(p.qs.state));\n\n\t\t// URL\n\t\tif (parseInt(provider.oauth.version, 10) === 1) {\n\n\t\t\t// Turn the request to the OAuth Proxy for 3-legged auth\n\t\t\turl = createUrl(opts.oauth_proxy, p.qs, encodeFunction);\n\t\t}\n\n\t\t// Refresh token\n\t\telse if (opts.display === 'none' && provider.oauth.grant && session && session.refresh_token) {\n\n\t\t\t// Add the refresh_token to the request\n\t\t\tp.qs.refresh_token = session.refresh_token;\n\n\t\t\t// Define the request path\n\t\t\turl = createUrl(opts.oauth_proxy, p.qs, encodeFunction);\n\t\t}\n\t\telse {\n\t\t\turl = createUrl(provider.oauth.auth, p.qs, encodeFunction);\n\t\t}\n\n\t\t// Broadcast this event as an auth:init\n\t\temit('auth.init', p);\n\n\t\t// Execute\n\t\t// Trigger how we want self displayed\n\t\tif (opts.display === 'none') {\n\t\t\t// Sign-in in the background, iframe\n\t\t\tutils.iframe(url, redirectUri);\n\t\t}\n\n\t\t// Triggering popup?\n\t\telse if (opts.display === 'popup') {\n\n\t\t\tconst win = utils.popup(url, redirectUri, opts.popup);\n\n\t\t\tprs.push(new Promise((accept, reject) => {\n\n\t\t\t\tconst timer = setInterval(() => {\n\t\t\t\t\tif (!win || win.closed) {\n\t\t\t\t\t\tclearInterval(timer);\n\n\t\t\t\t\t\tlet response = error('cancelled', 'Login has been cancelled');\n\n\t\t\t\t\t\tif (!popup) {\n\t\t\t\t\t\t\tresponse = error('blocked', 'Popup was blocked');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponse.network = p.network;\n\n\t\t\t\t\t\treject(response);\n\t\t\t\t\t}\n\t\t\t\t}, 100);\n\n\t\t\t}));\n\t\t}\n\n\t\telse {\n\t\t\twindow.location = url;\n\t\t}\n\n\t\tfunction encodeFunction(s) {\n\t\t\treturn s;\n\t\t}\n\n\t\tfunction filterEmpty(s) {\n\t\t\treturn !!s;\n\t\t}\n\n\t\t// Return the first success or failure...\n\t\tconst promise = Promise.race(prs);\n\n\t\t// Bind callback to both reject and fulfill states\n\t\tpromise.then(p.callback, p.callback);\n\n\t\t// Trigger an event on the global listener\n\t\tfunction emit(s, value) {\n\t\t\thello.emit(s, value);\n\t\t}\n\n\t\tpromise.then(emit.bind(this, 'auth.login auth'), emit.bind(this, 'auth.failed auth'));\n\n\t\treturn promise;\n\t},\n\n\t// Remove any data associated with a given service\n\t// @param string name of the service\n\t// @param function callback\n\tasync logout(...args) {\n\n\t\tconst utils = this.utils;\n\n\t\tconst p = argmap({name: 's', options: 'o', callback: 'f'}, args);\n\n\t\tconst prs = [];\n\n\t\tp.options = p.options || {};\n\n\t\t// Network\n\t\tp.name = p.name || this.settings.default_service;\n\t\tp.authResponse = utils.store(p.name);\n\n\t\tif (p.name && !(p.name in this.services)) {\n\n\t\t\tthrow error('invalid_network', 'The network was unrecognized');\n\n\t\t}\n\t\telse if (p.name && p.authResponse) {\n\n\t\t\tconst promiseLogout = new Promise(accept => {\n\t\t\t\t// Run an async operation to remove the users session\n\t\t\t\tconst _opts = {};\n\n\t\t\t\tif (p.options.force) {\n\t\t\t\t\tlet logout = this.services[p.name].logout;\n\t\t\t\t\tif (logout) {\n\t\t\t\t\t\t// Convert logout to URL string,\n\t\t\t\t\t\t// If no string is returned, then this function will handle the logout async style\n\t\t\t\t\t\tif (typeof (logout) === 'function') {\n\t\t\t\t\t\t\tlogout = logout(accept, p);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If logout is a string then assume URL and open in iframe.\n\t\t\t\t\t\tif (typeof (logout) === 'string') {\n\t\t\t\t\t\t\tutils.iframe(logout);\n\t\t\t\t\t\t\t_opts.force = null;\n\t\t\t\t\t\t\t_opts.message = 'Logout success on providers site was indeterminate';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (logout === undefined) {\n\t\t\t\t\t\t\t// The callback function will handle the response.\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\taccept(_opts);\n\t\t\t})\n\t\t\t\t.then(opts => {\n\n\t\t\t\t\t// Remove from the store\n\t\t\t\t\tutils.store(p.name, null);\n\n\t\t\t\t\t// Emit events by default\n\t\t\t\t\treturn merge({\n\t\t\t\t\t\tnetwork: p.name\n\t\t\t\t\t}, opts || {});\n\t\t\t\t});\n\n\t\t\tprs.push(promiseLogout);\n\n\t\t}\n\t\telse {\n\t\t\tthrow error('invalid_session', 'There was no session to remove');\n\t\t}\n\n\t\t// Promse\n\t\tconst promise = Promise.race(prs);\n\n\t\t// Add callback to events\n\t\tpromise.then(p.callback, p.callback);\n\n\t\t// Trigger an event on the global listener\n\t\tpromise.then(\n\t\t\tvalue => hello.emit('auth.logout auth', value),\n\t\t\terr => hello.emit('error', err)\n\t\t);\n\n\t\treturn promise;\n\t},\n\n\t// Returns all the sessions that are subscribed too\n\t// @param string optional, name of the service to get information about.\n\tgetAuthResponse(service) {\n\n\t\t// If the service doesn't exist\n\t\tservice = service || this.settings.default_service;\n\n\t\tif (!service || !(service in this.services)) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.utils.store(service) || null;\n\t},\n\n\t// Events: placeholder for the events\n\tevents: {}\n});\n\nfunction error(code, message) {\n\treturn {\n\t\terror: {\n\t\t\tcode,\n\t\t\tmessage\n\t\t}\n\t};\n}\n\nhello.utils = {\n\tiframe,\n\tpopup,\n\trequest,\n\tstore\n};\n\n// Core utilities\nextend(hello.utils, {\n\n\t// OAuth and API response handler\n\tresponseHandler(window, parent) {\n\t\tconst utils = this;\n\n\t\tlet p;\n\t\tconst location = window.location;\n\n\t\tconst redirect = (location.assign && location.assign.bind(location)) || (url => {\n\t\t\twindow.location = url;\n\t\t});\n\n\t\t// Is this an auth relay message which needs to call the proxy?\n\t\tp = param(location.search);\n\n\t\t// OAuth2 or OAuth1 server response?\n\t\tif (p && p.state && (p.code || p.oauth_token)) {\n\n\t\t\tconst state = JSON.parse(p.state);\n\n\t\t\t// Add this path as the redirect_uri\n\t\t\tp.redirect_uri = state.redirect_uri || location.href.replace(/[?#].*$/, '');\n\n\t\t\t// Redirect to the host\n\t\t\tconst path = `${state.oauth_proxy}?${param(p)}`;\n\n\t\t\tredirect(path);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Save session, from redirected authentication\n\t\t// #access_token has come in?\n\t\t//\n\t\t// FACEBOOK is returning auth errors within as a query_string... thats a stickler for consistency.\n\t\t// SoundCloud is the state in the querystring and the token in the hashtag, so we'll mix the two together\n\n\t\tp = merge(param(location.search || ''), param(location.hash || ''));\n\n\t\t// If p.state\n\t\tif (p && 'state' in p) {\n\n\t\t\t// Remove any addition information\n\t\t\t// E.g. p.state = 'facebook.page';\n\t\t\ttry {\n\t\t\t\tconst a = JSON.parse(p.state);\n\t\t\t\textend(p, a);\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\thello.emit('error', 'Could not decode state parameter');\n\t\t\t}\n\n\t\t\t// Access_token?\n\t\t\tif (('access_token' in p && p.access_token) && p.network) {\n\n\t\t\t\tif (!p.expires_in || parseInt(p.expires_in, 10) === 0) {\n\t\t\t\t\t// If p.expires_in is unset, set to 0\n\t\t\t\t\tp.expires_in = 0;\n\t\t\t\t}\n\n\t\t\t\tp.expires_in = parseInt(p.expires_in, 10);\n\t\t\t\tp.expires = ((new Date()).getTime() / 1e3) + (p.expires_in || (60 * 60 * 24 * 365));\n\n\t\t\t\t// Lets use the \"state\" to assign it to one of our networks\n\t\t\t\tauthCallback(p, window, parent);\n\t\t\t}\n\n\t\t\t// Error=?\n\t\t\t// &error_description=?\n\t\t\t// &state=?\n\t\t\telse if (('error' in p && p.error) && p.network) {\n\n\t\t\t\tp.error = {\n\t\t\t\t\tcode: p.error,\n\t\t\t\t\tmessage: p.error_message || p.error_description\n\t\t\t\t};\n\n\t\t\t\t// Let the state handler handle it\n\t\t\t\tauthCallback(p, window, parent);\n\t\t\t}\n\n\t\t\t// API call, or a cancelled login\n\t\t\t// Result is serialized JSON string\n\t\t\telse if (p.callback && p.callback in parent) {\n\n\t\t\t\t// Trigger a function in the parent\n\t\t\t\tconst res = 'result' in p && p.result ? JSON.parse(p.result) : false;\n\n\t\t\t\t// Trigger the callback on the parent\n\t\t\t\tcallback(parent, p.callback)(res);\n\t\t\t\tcloseWindow(window);\n\t\t\t}\n\n\t\t\t// If this page is still open\n\t\t\tif (p.page_uri) {\n\t\t\t\tredirect(p.page_uri);\n\t\t\t}\n\t\t}\n\n\t\t// OAuth redirect, fixes URI fragments from being lost in Safari\n\t\t// (URI Fragments within 302 Location URI are lost over HTTPS)\n\t\t// Loading the redirect.html before triggering the OAuth Flow seems to fix it.\n\t\telse if ('oauth_redirect' in p) {\n\n\t\t\tredirect(decodeURIComponent(p.oauth_redirect));\n\t\t\treturn;\n\t\t}\n\n\t\t// Trigger a callback to authenticate\n\t\tfunction authCallback(obj, window, parent) {\n\n\t\t\tconst cb = obj.callback;\n\t\t\tconst network = obj.network;\n\n\t\t\t// Trigger the callback on the parent\n\t\t\tutils.store(network, obj);\n\n\t\t\t// If this is a page request it has no parent or opener window to handle callbacks\n\t\t\tif (('display' in obj) && obj.display === 'page') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Remove from session object\n\t\t\tif (parent && cb && cb in parent) {\n\n\t\t\t\ttry {\n\t\t\t\t\tdelete obj.callback;\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\t// continue\n\t\t\t\t}\n\n\t\t\t\t// Update store\n\t\t\t\tutils.store(network, obj);\n\n\t\t\t\t// Call the globalEvent function on the parent\n\t\t\t\t// It's safer to pass back a string to the parent,\n\t\t\t\t// Rather than an object/array (better for IE8)\n\t\t\t\tconst str = JSON.stringify(obj);\n\n\t\t\t\ttry {\n\t\t\t\t\tcallback(parent, cb)(str);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\t// Error thrown whilst executing parent callback\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcloseWindow(window);\n\t\t}\n\n\t\tfunction callback(parent, callbackID) {\n\t\t\tif (callbackID.indexOf('_hellojs_') !== 0) {\n\t\t\t\treturn function() {\n\t\t\t\t\tthrow `Could not execute callback ${callbackID}`;\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn parent[callbackID];\n\t\t}\n\t}\n});\n\n\n// Events\n// Extend the hello object with its own event instance\npubsub.call(hello);\n\n///////////////////////////////////\n// Monitoring session state\n// Check for session changes\n///////////////////////////////////\n\n(function(hello) {\n\n\t// Monitor for a change in state and fire\n\tconst oldSessions = {};\n\n\t// Hash of expired tokens\n\tconst expired = {};\n\n\t// Listen to other triggers to Auth events, use these to update this\n\thello.on('auth.login, auth.logout', auth => {\n\t\tif (auth && typeof (auth) === 'object' && auth.network) {\n\t\t\toldSessions[auth.network] = hello.utils.store(auth.network) || {};\n\t\t}\n\t});\n\n\t(function self() {\n\n\t\tconst CURRENT_TIME = ((new Date()).getTime() / 1e3);\n\n\t\t// Loop through the services\n\t\tfor (const name in hello.services) {\n\t\t\tif (hello.services.hasOwnProperty(name)) {\n\n\t\t\t\tif (!hello.services[name].id) {\n\t\t\t\t// We haven't attached an ID so dont listen.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Get session\n\t\t\t\tconst session = hello.utils.store(name) || {};\n\t\t\t\tconst provider = hello.services[name];\n\t\t\t\tconst oldSess = oldSessions[name] || {};\n\n\t\t\t\tconst emit = function(eventName) {\n\t\t\t\t\thello.emit(`auth.${eventName}`, {\n\t\t\t\t\t\tnetwork: name,\n\t\t\t\t\t\tauthResponse: session\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\t// Listen for globalEvents that did not get triggered from the child\n\t\t\t\tif (session && 'callback' in session) {\n\n\t\t\t\t\t// To do remove from session object...\n\t\t\t\t\tconst cb = session.callback;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdelete session.callback;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\t// Continue\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update store\n\t\t\t\t\t// Removing the callback\n\t\t\t\t\thello.utils.store(name, session);\n\n\t\t\t\t\t// Emit global events\n\t\t\t\t\ttry {\n\t\t\t\t\t\twindow[cb](session);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\t// Continue\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Refresh token\n\t\t\t\tif (session && ('expires' in session) && session.expires < CURRENT_TIME) {\n\n\t\t\t\t\t// If auto refresh is possible\n\t\t\t\t\t// Either the browser supports\n\t\t\t\t\tconst refresh = provider.refresh || session.refresh_token;\n\n\t\t\t\t\t// Has the refresh been run recently?\n\t\t\t\t\tif (refresh && (!(name in expired) || expired[name] < CURRENT_TIME)) {\n\t\t\t\t\t\t// Try to resignin\n\t\t\t\t\t\thello.emit('notice', `${name} has expired trying to resignin`);\n\t\t\t\t\t\thello.login(name, {display: 'none', force: false});\n\n\t\t\t\t\t\t// Update expired, every 10 minutes\n\t\t\t\t\t\texpired[name] = CURRENT_TIME + 600;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Does this provider not support refresh\n\t\t\t\t\telse if (!refresh && !(name in expired)) {\n\t\t\t\t\t// Label the event\n\t\t\t\t\t\temit('expired');\n\t\t\t\t\t\texpired[name] = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If session has expired then we dont want to store its value until it can be established that its been updated\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Has session changed?\n\t\t\t\telse if (oldSess.access_token === session.access_token &&\n\t\t\toldSess.expires === session.expires) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Access_token has been removed\n\t\t\t\telse if (!session.access_token && oldSess.access_token) {\n\t\t\t\t\temit('logout');\n\t\t\t\t}\n\n\t\t\t\t// Access_token has been created\n\t\t\t\telse if (session.access_token && !oldSess.access_token) {\n\t\t\t\t\temit('login');\n\t\t\t\t}\n\n\t\t\t\t// Access_token has been updated\n\t\t\t\telse if (session.expires !== oldSess.expires) {\n\t\t\t\t\temit('update');\n\t\t\t\t}\n\n\t\t\t\t// Updated stored session\n\t\t\t\toldSessions[name] = session;\n\n\t\t\t\t// Remove the expired flags\n\t\t\t\tif (name in expired) {\n\t\t\t\t\tdelete expired[name];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check error events\n\t\tsetTimeout(self, 1000);\n\t})();\n\n})(hello);\n\n// EOF CORE lib\n//////////////////////////////////\n\n/////////////////////////////////////////\n// API\n// @param path    string\n// @param query   object (optional)\n// @param method  string (optional)\n// @param data    object (optional)\n// @param timeout integer (optional)\n// @param callback  function (optional)\n\nhello.api = async function(...args) {\n\n\t// Arguments\n\tconst p = argmap({path: 's!', query: 'o', method: 's', data: 'o', timeout: 'i', callback: 'f'}, args);\n\n\t// Remove the network from path, e.g. facebook:/me/friends\n\t// Results in { network : facebook, path : me/friends }\n\tif (!p || !p.path) {\n\t\tthrow error('invalid_path', 'Missing the path parameter from the request');\n\t}\n\n\t// Method\n\tp.method = (p.method || 'get').toLowerCase();\n\n\t// Headers\n\tp.headers = p.headers || {};\n\n\t// Response format\n\tp.responseType = p.responseType || 'json';\n\n\t// Query\n\tp.query = p.query || {};\n\n\t// If get, put all parameters into query\n\tif (p.method === 'get' || p.method === 'delete') {\n\t\textend(p.query, p.data);\n\t\tp.data = {};\n\t}\n\n\tconst data = p.data = p.data || {};\n\n\tp.path = p.path.replace(/^\\/+/, '');\n\tconst a = (p.path.split(/[/:]/, 2) || [])[0].toLowerCase();\n\n\tif (a in this.services) {\n\t\tp.network = a;\n\t\tconst reg = new RegExp(`^${a}:?/?`);\n\t\tp.path = p.path.replace(reg, '');\n\t}\n\n\t// Network & Provider\n\t// Define the network that this request is made for\n\tp.network = this.settings.default_service = p.network || this.settings.default_service;\n\tconst o = this.services[p.network];\n\n\t// INVALID\n\t// Is there no service by the given network name?\n\tif (!o) {\n\t\tthrow error('invalid_network', `Could not match the service requested: ${  p.network}`);\n\t}\n\n\t// PATH\n\t// As long as the path isn't flagged as unavaiable, e.g. path == false\n\n\tif (!(!(p.method in o) || !(p.path in o[p.method]) || o[p.method][p.path] !== false)) {\n\t\tthrow error('invalid_path', 'The provided path is not available on the selected network');\n\t}\n\n\t// PROXY\n\t// OAuth1 calls always need a proxy\n\n\tif (!p.oauth_proxy) {\n\t\tp.oauth_proxy = this.settings.oauth_proxy;\n\t}\n\n\tif (!('proxy' in p)) {\n\t\tp.proxy = p.oauth_proxy && o.oauth && parseInt(o.oauth.version, 10) === 1;\n\t}\n\n\t// TIMEOUT\n\t// Adopt timeout from global settings by default\n\n\tif (!('timeout' in p)) {\n\t\tp.timeout = this.settings.timeout;\n\t}\n\n\t// Format response\n\t// Whether to run the raw response through post processing.\n\tif (!('formatResponse' in p)) {\n\t\tp.formatResponse = true;\n\t}\n\n\t// Get the current session\n\t// Append the access_token to the query\n\tp.authResponse = this.getAuthResponse(p.network);\n\tif (p.authResponse && p.authResponse.access_token) {\n\t\tp.query.access_token = p.authResponse.access_token;\n\t}\n\n\tlet url = p.path;\n\tlet m;\n\n\t// Store the query as options\n\t// This is used to populate the request object before the data is augmented by the prewrap handlers.\n\tp.options = clone(p.query);\n\n\t// Clone the data object\n\t// Prevent this script overwriting the data of the incoming object.\n\t// Ensure that everytime we run an iteration the callbacks haven't removed some data\n\tp.data = clone(data);\n\n\t// URL Mapping\n\t// Is there a map for the given URL?\n\tconst actions = o[{delete: 'del'}[p.method] || p.method] || {};\n\n\t// Extrapolate the QueryString\n\t// Provide a clean path\n\t// Move the querystring into the data\n\tif (p.method === 'get') {\n\n\t\tconst query = url.split(/[?#]/)[1];\n\t\tif (query) {\n\t\t\textend(p.query, param(query));\n\n\t\t\t// Remove the query part from the URL\n\t\t\turl = url.replace(/\\?.*?(#|$)/, '$1');\n\t\t}\n\t}\n\n\t// Is the hash fragment defined\n\tif ((m = url.match(/#(.+)/, ''))) {\n\t\turl = url.split('#')[0];\n\t\tp.path = m[1];\n\t}\n\telse if (url in actions) {\n\t\tp.path = url;\n\t\turl = actions[url];\n\t}\n\telse if ('default' in actions) {\n\t\turl = actions.default;\n\t}\n\n\t// Redirect Handler\n\t// This defines for the Form+Iframe+Hash hack where to return the results too.\n\tp.redirect_uri = this.settings.redirect_uri;\n\n\t// Define FormatHandler\n\t// The request can be procesed in a multitude of ways\n\t// Here's the options - depending on the browser and endpoint\n\tp.xhr = o.xhr;\n\tp.jsonp = o.jsonp;\n\tp.form = o.form;\n\n\t// Define Proxy handler\n\tp.proxyHandler = (p, callback) => {\n\n\t\t// Are we signing the request?\n\t\tlet sign;\n\n\t\t// OAuth1\n\t\t// Remove the token from the query before signing\n\t\tif (p.authResponse && p.authResponse.oauth && parseInt(p.authResponse.oauth.version, 10) === 1) {\n\n\t\t\t// OAUTH SIGNING PROXY\n\t\t\tsign = p.query.access_token;\n\n\t\t\t// Remove the access_token\n\t\t\tdelete p.query.access_token;\n\n\t\t\t// Enfore use of Proxy\n\t\t\tp.proxy = true;\n\t\t}\n\n\t\t// POST body to querystring\n\t\tif (p.data && (p.method === 'get' || p.method === 'delete')) {\n\t\t\t// Attach the p.data to the querystring.\n\t\t\textend(p.query, p.data);\n\t\t\tp.data = null;\n\t\t}\n\n\t\t// Construct the path\n\t\tlet path = createUrl(p.url, p.query);\n\n\t\t// Proxy the request through a server\n\t\t// Used for signing OAuth1\n\t\t// And circumventing services without Access-Control Headers\n\t\tif (p.proxy) {\n\t\t\t// Use the proxy as a path\n\t\t\tpath = createUrl(p.oauth_proxy, {\n\t\t\t\tpath,\n\t\t\t\taccess_token: sign || '',\n\n\t\t\t\t// This will prompt the request to be signed as though it is OAuth1\n\t\t\t\tthen: p.proxy_response_type || (p.method.toLowerCase() === 'get' ? 'redirect' : 'proxy'),\n\t\t\t\tmethod: p.method.toLowerCase(),\n\t\t\t\tsuppress_response_codes: true\n\t\t\t});\n\t\t}\n\n\t\tcallback(path);\n\t};\n\n\n\t// If url needs a base\n\t// Wrap everything in\n\n\tlet promise;\n\n\t// Make request\n\tif (typeof (url) === 'function') {\n\t\t// Does self have its own callback?\n\t\tpromise = new Promise(accept => url(p, accept));\n\t}\n\telse {\n\t\t// Else the URL is a string\n\t\tpromise = Promise.resolve(url);\n\t}\n\n\t// Handle the url...\n\tpromise = promise.then(url => {\n\n\t\t// Format the string if it needs it\n\t\turl = url.replace(/@\\{([a-z_-]+)(\\|.*?)?\\}/gi, (m, key, defaults) => {\n\t\t\tlet val = defaults ? defaults.replace(/^\\|/, '') : '';\n\t\t\tif (key in p.query) {\n\t\t\t\tval = p.query[key];\n\t\t\t\tdelete p.query[key];\n\t\t\t}\n\t\t\telse if (p.data && key in p.data) {\n\t\t\t\tval = p.data[key];\n\t\t\t\tdelete p.data[key];\n\t\t\t}\n\t\t\telse if (!defaults) {\n\t\t\t\tthrow error('missing_attribute', `The attribute ${  key  } is missing from the request`);\n\t\t\t}\n\n\t\t\treturn val;\n\t\t});\n\n\t\t// Add base\n\t\tif (!url.match(/^https?:\\/\\//)) {\n\t\t\turl = o.base + url;\n\t\t}\n\n\t\t// Define the request URL\n\t\tp.url = url;\n\n\t\t// Make the HTTP request with the curated request object\n\t\t// CALLBACK HANDLER\n\t\t// @ response object\n\t\t// @ statusCode integer if available\n\t\treturn new Promise(accept => this.utils.request(p, (data, headers) => accept({data, headers})));\n\n\t})\n\t\t.then(resp => {\n\n\t\t\tlet {data} = resp;\n\t\t\tconst {headers} = resp;\n\n\t\t\t// Is this a raw response?\n\t\t\tif (!p.formatResponse) {\n\t\t\t\t// Bad request? error statusCode or otherwise contains an error response vis JSONP?\n\t\t\t\tif (typeof headers === 'object' ? (headers.statusCode >= 400) : (typeof r === 'object' && 'error' in data)) {\n\t\t\t\t\tthrow data;\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// Should this be an object\n\t\t\tif (data === true) {\n\t\t\t\tdata = {success: true};\n\t\t\t}\n\n\t\t\t// The delete callback needs a better response\n\t\t\tif (p.method === 'delete') {\n\t\t\t\tdata = (!data || isEmpty(data)) ? {success: true} : data;\n\t\t\t}\n\n\t\t\t// FORMAT RESPONSE?\n\t\t\t// Does self request have a corresponding formatter\n\t\t\tif (o.wrap && ((p.path in o.wrap) || ('default' in o.wrap))) {\n\t\t\t\tconst wrap = (p.path in o.wrap ? p.path : 'default');\n\n\t\t\t\t// FORMAT RESPONSE\n\t\t\t\tconst b = o.wrap[wrap](data, headers, p);\n\n\t\t\t\t// Has the response been utterly overwritten?\n\t\t\t\t// Typically self augments the existing object.. but for those rare occassions\n\t\t\t\tif (b) {\n\t\t\t\t\tdata = b;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Is there a next_page defined in the response?\n\t\t\tif (data && 'paging' in data && data.paging.next) {\n\n\t\t\t\t// Add the relative path if it is missing from the paging/next path\n\t\t\t\tif (data.paging.next[0] === '?') {\n\t\t\t\t\tdata.paging.next = p.path + data.paging.next;\n\t\t\t\t}\n\n\t\t\t\t// The relative path has been defined, lets markup the handler in the HashFragment\n\t\t\t\telse {\n\t\t\t\t\tdata.paging.next += `#${  p.path}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Dispatch to listeners\n\t\t\t// Emit events which pertain to the formatted response\n\t\t\tif (!data || 'error' in data) {\n\t\t\t\tthrow data;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t});\n\n\t// Completed event callback\n\tpromise.then(p.callback, p.callback);\n\n\treturn promise;\n};\n\n\n/////////////////////////////////////\n//\n// Save any access token that is in the current page URL\n// Handle any response solicited through iframe hash tag following an API request\n//\n/////////////////////////////////////\n\nhello.utils.responseHandler(window, window.opener || window.parent);\n\nmodule.exports = hello;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}